{"hash":"14a30dd8054b6118862f44a70f7676fa9a46303a","data":{"category":{"title":"tech","belongsTo":{"edges":[{"node":{"title":"猎户座 S10 5G 更新 Android 11 / Magisk / LSPosed 记录","path":"/tech/flash-magisk-latest-4-sumsung-s10-5-g-exynos/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/magisk-sumsung.a209973.1f2c960663536221e315d7c047774c3f.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/magisk-sumsung.a67b0b2.1f2c960663536221e315d7c047774c3f.png 480w","/assets/static/magisk-sumsung.a209973.1f2c960663536221e315d7c047774c3f.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-c721941c87b9fd1970665a65390e0e4f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-c721941c87b9fd1970665a65390e0e4f)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAYAAAA9djs/AAAACXBIWXMAAAsSAAALEgHS3X78AAAJCklEQVRYw81Y%2bVNU2Rl9gEIDyioYNxbZNwUEJQJNs0PL6ig7KksQlUUHh0UBmwZZFBVoWWTfFZQdFYdxjFa0YiVxJjVVGSuTibGmkvKH5C/IDyf3u0xTPVQDzpRTkx9evdtvue/7vnvO%2bc5tQUNDA%2boOQRCw2r1f%2bviQsQlrfYDO/2%2bHalw/SwFWTrx161YEBgYiODgY27dvh6amJrZt2wZvb284OztDJBJh8%2bbNcHd3h5ubG4yNjWFvbw8vLy9s2bKF36froaGhcHFx4b8tLCywe/duPo%2bDgwMMDAxgaWmJffv28Ws0trKygra2Nj%2bHhITAx8cHhoaGP4jvQxRBWAtmmzZtwvnz5zE1NYWxsTHk5eXBxMQEubm5ePLkCbp7emBnZw8PT09MTk7i9u3biImJQVNTEx4/fszHvr6%2bGBoawt27d9Hc3AwPDw8UFBaiqlqOYxkn0KRogdf%2b/fw7T58%2bRX5%2bPi5cuICSkhI4OTmhoaEBExMTfO7Dhw9DS0trXYR%2bsALQaioUCh4YBRIXF4edO3fya1%2b8eoU/vPw9YqSRCAsJwp%2b//ALPnj2DTCbD7OwsXr9%2bjaysLMTGxuL58%2bfo7%2b9HYUEBnF1dcPXqVYz39aP64yK8uP8AEeIAXLlyBX/95ht0d3djZGQEN27cQFhYGO7fvw%2b5XI7KykokJydj48aNapNcSZEPUgCCoFQq5QHNz88jJSWFw3l6cgIdnd0oktdjX3gs3CXhGBm/hwfzcxgdHeVooaKdPHkSNjY2PIGFhQXUsyT3OLvgMvudPzoA1%2btXED87Cavkj3CNFXjx4UP0DwxwdFGR6NtUTEqeUEXIIwqpQ8BS3Etjoikdyns0Xq0waxZAX1%2bfr2JtbS0vwODgENJTU1BWexW/EkdDw8kf%2bnvDoe8ZDnP/aKTmnWeoeIkBlsRDlkwhg7pYLMbly5fRcesWXjx9hsSTv4FRVxPEL2YROncBQdMlOPDbe3C%2bP4aam81ob1Hgzdu3nC6kG4QAQgPNR3GoIkCTJaylKWADHVosUTW0WA8dagugrB6tHkGTVmFmZgayygocCAyDyDOEJR4KQ0kkdmQlwiQ8GiLXIOh4BKGwohplJcV8BVNTUyGRSDiCJhmPu7u7oD/UiuiRGvzpu2/x8FEKHi2m8fGh4WpodjYiMzMD83Nz%2bKS4mAskFW98fJzPQXOt3yUELr6mpqbLCVtbW0NXV/f9EEAPKYUmIyMDp06dwrt373gg5uZm0HdhauwlhWlSHHxeyeD/bS32fyXDtvwkbPKKguAqxvadu5jKWy%2brto2dHSL8xNidnQ7h01HEyy6iqq0N1x6X4/rnFahqvYnYqnIIn92GYXwknHZZwNTcfFmHSEiJesqF2bhhA3REekjZL6A6TsC1BAHX2WFnvlSE0dERTE9PcwobGRnh7Nmzq%2bqCsDJ55Ueo%2blQAMzMzTgM3V1d%2bXY%2btsi5DgOdCCST/uoJffy2H9J83EPnqOtOCAAT7BUDH0IQ/SwJ45swZ%2bDMaaNAK5WVA%2b8koMntmIMm5B687Cn4E5kwgo3eG3xMKMvm7h48cQU5ODg4cOLC8utQm7Vgxg1hLrr0sR3W8BlqSBXx5ScCDQgGBjkvPRUdJkZ6ezsfx8fHLyFHtIKsiQFkAakdEAZ60nh5sWd8232UF3b2BMPSLxP6XFRD/rRbef5Eh7U07Sr6bQkBsEHKCxTAwXioABRseHo7wiIillSvLgzDfB/n0OOqHR6BXlMuPhuFRVM3chTDbAwN5MewZZL2Yz8jMzERSUtJyTP7%2b/jh2LB2xcfG4e2cY52OMMZEr4NYxAaVSAX62LFYDU1js2sHFkjwMtde1uoJaChB/qOfSmEwI8bmtrRUyeTXMfaWc7w43TyHoP40Q/6MOAf%2b%2bCsc7BRDtCYS2mxjbLKxhycwOUUBHRwe6zE/o0Somx0J4NAzdpir4XiqBt6wEvvIySGSl0GupgTDVhdB%2bRo0qOYKYAGZnZ3MhJQoQCikuMl/EaUtrG7SlaeC/HQLe1Av4Y7mAKE9dFJVUoqe7k7fjc%2bfOcQO12uqvWgBVGrS2tnJjIj10iIubT0wiNJwDYOATDpv6bLjPfcKLYSyRQrD3hUNIHOrratHY2IiWlhbOPzI%2bqQmJiMg4BsOFEQjjbah9%2bzUKmq/hnOIGKv/%2bFb9m/OkdFF9vRBp7do/7Xq4/vb29fBXpvGPHjh8Inp42M2siDRhv0sKG76FfVVXF22cxE1EqIKH3vRGw0mYeYkm3t7dzCxsQEICa6mrI2eEYytDBWqDIJRgi92Bo2PpBcPCDpYS5QMVNlF%2b8gDAGfWqH1LrIwEyzLjLD/IFPUT6E2wpofj4Gm0YZrBR10P7dFIRRBYIrS9Hb1o6LFRXwZO4yKiqKm65q%2bi7zDrT65ETV%2bQAbO0fWOlu40/Tz81s2T2TLfxQFVAtA4tHV1cVpQK6MVuEB68uEiqO5hdi85yBMvENhH5GA6KwzaG3vwPjYHcbROG6jCYbl5eU4ePAgFhcX8Rmzx16ubjD19sDegVbsnuyD0UALNItOQsfZHu6OTohhwtnR0cELR0KmLEB9fT2nQk1NDd93UHxEL5FIh1nuaOZRBjA8PMQ1h/YtFPcca6e0J/nJCKAOUFZWxgOiapJN/bioCEeZQvf39vDkmlmA1KfbmKdvaKhH5aVLvED0Hu0hSD9KS0u5sSFKFDBKmBsaIS8rG89evMCRpETeIcwMDFHIOFtXV8cLTe8kJCTw9wnKfX19PI7BwUFurqjX096ECkPuk0Sb9g%2bdnZ08VjrTb9KNHy2CqmPy/omJiZzLR48e5bs14lVQUDBOnz6NEydO8HYnkQTylmVra8stM9lgOhMfo6Oj%2bcaGIBwZGQlTVtgEpu5dzB3aft9pRGxOX4YUSorUnzoQ7RhpJ0q7R6IDiRqtMH2fVJ7uUeIk2FQQio1ipFgpZqVmrLV7FNb7w0E5Jgu6kncbmCFR%2bmxV/01nukfXSX1VfTldowSOHz%2bONAZxgvHKOVUVW/kujZVzqotBdX7VWNfbOgvv%2b6/LejuwtXZmKwOhoAlZ6uCp7vn1Yvgpsa9bgJ/zbzF1m5Vf6u%2bz/wFaONz4PQuqbgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"date":"February 3. 2021","timeToRead":16,"cjkWordCount":3911,"cjkReadTime":12,"description":"LSP 就该用 LSPosed！在韩版 Galaxy S10 5G 上使用修补 AP 镜像的方式安装 Magisk 最新版，顺便升级 Android 11 / OneUI 3.0 尝尝鲜。","content":"<p>最近 <a href=\"https://github.com/ElderDrivers/EdXposed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@ElderDrivers/EdXposed</a> 的新分支 <a href=\"https://github.com/LSPosed/LSPosed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@LSPosed/LSPosed</a> 进入大众视野，听说修复了 EdXposed 随机重启的 Bug。不知道手头的 Sumsung S10 5G (Exynos 9820) 莫名其妙重启是不是相关问题，咱得先试试 LSPosed 才知道。为了在不支持直接升级 Magisk 的《<a href=\"http://aurorarom.cn/archives/450.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AuroraROM Sumsung S10E/S10/S10+/5G G97XX-9820 - V17.0 Android-Q-TJA</a>》上使用 LSPosed，我需要自行集齐 Magisk v21+、Riru v23+。于是折腾了一下三星的刷机，本文介绍自用三星 S10 5G 的 Android 11 升级、Magisk in Recovery 安装、LSPosed 使用等。</p>\n<p>Android 11 的升级十分简单，刷最新的官方固件就成了。LSPosed 的安装只要解决了 Magisk 最新版本的需求也是小菜一碟。AuroraROM 不能直接在 Magisk Manager 中升级 Magisk，否则会无法开机，这一项只好自行解决。</p>\n<p>Magisk 作者 <a href=\"https://github.com/topjohnwu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@topjohnwu</a> 撰写了完整的安装指南在 <a href=\"https://topjohnwu.github.io/Magisk/install.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a>，包含了三星机型和华为机型的说明。以此文为主要参考资料进行尝试（我顺便翻译了一份简体中文的版本放在 <a href=\"https://github.com/monsterxcn/myBlog/wiki/Magisk-Install-zh_CN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Magisk Install zh_CN - @monsterxcn/myBlog Wiki</a>。还有一篇 XDA 论坛的参考文章是用来解决 Bootloader 解锁后开机警告信息的，《<a href=\"https://forum.xda-developers.com/t/boot-remove-boot-warning-all-exynos-devices-after-root-tutorial-14th-december-2020.4202627/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[BOOT] Remove Boot Warning - All Exynos Devices - After Root - Tutorial - 14th December 2020 - XDA Developers Forums</a>》。</p>\n<blockquote>\n<p>YOU are choosing to make these modifications, and if you point the finger at me for messing up your device, I will laugh at you.</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#%E5%87%86%E5%A4%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>准备</h2>\n<p><strong>重要的资料务必先备份</strong>，如联系人、短信、相片、下载等。</p>\n<p>我手上这台机器是韩版使用猎户座 Exynos 9820 的 Sumsung Galaxy S10 5G，正在使用的 ROM 是 AuroraROM Sumsung G97XX-9820 v17.0，进入 Download 模式后部分输出如下：</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">PRODUCT NAME: SM-G977N\nCURRENT BINARY: Custom(0x30e)\nKG STATE: Checking\nFRP LOCK: OFF\nOEM LOCK: OFF(U)\nSecure Download: Enabled\nCARRIER_ID: KTC\nWARRANTY VOID: 1 (0x0400)\nRP SWREV: B:4 K:4 S:4<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果你之前曾刷过 AoruraROM 等定制 ROM，那么一般来说 Bootloader OEM 已处于解锁状态。存在刷入官方固件后锁定状态改变的情况，具体要如何确检查锁定状态，可以将手机关机按住「下载模式组合键」连接电脑进入 Download 模式查看。</p>\n</blockquote>\n<p>请留意设备的各项锁定状态，不过刷回官方固件的话应该都没什么问题。接下来准备此次刷机需要的软件和固件：</p>\n<ul>\n<li><a href=\"https://developer.samsung.com/mobile/android-usb-driver.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Android USB Driver for Windows - Sumsung Developers</a>，不要连接手机提前安装三星驱动</li>\n<li><a href=\"https://developer.android.com/studio/command-line/adb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Android Debug Bridge</a>，参照《<a href=\"https://wiki.lineageos.org/adb_fastboot_guide.html#installing-adb-and-fastboot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using ADB and fastboot - Lineage Wiki</a>》提前安装</li>\n<li><a href=\"https://forum.xda-developers.com/t/tool-frija-samsung-firmware-downloader-checker.3910594/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frija</a>，查找并下载官方最新固件包</li>\n<li><a href=\"https://odindownload.com/Samsung-Odin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sumsung Odin</a>，三星专用刷机软件</li>\n<li><a href=\"https://github.com/topjohnwu/Magisk/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Magisk Manager APK</a>（Magisk Manager 与 Magisk 一同发布），修补镜像以安装 Magisk in Recovery</li>\n<li><a href=\"https://github.com/mcmilk/7-Zip-zstd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@mcmilk/7-Zip-zstd</a>，解压 BL 固件以移除 Bootloader 解锁警告</li>\n</ul>\n<h2 id=\"刷入官方固件\"><a href=\"#%E5%88%B7%E5%85%A5%E5%AE%98%E6%96%B9%E5%9B%BA%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>刷入官方固件</h2>\n<p>在三星设备上安装 Magisk 需要首先 <strong>删除所有启动镜像修改</strong>（boot image mods），由于 AuroraROM 已经预置 Root，所以需要用原厂镜像重新刷机。</p>\n<p>这里用 Frija 查找并下载固件。使用 Frija 前需要安装 <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft Visual C++ 2008 Redistributable Package (x86)</a> 和 <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=5555\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft Visual C++ 2010 Redistributable Package (x86)</a>。如果下载时卡在 <code>Checking CRC32</code> 可以尝试在 Settings 中关闭 CRC Check，下载完毕后另寻方式校验文件。</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">Model: SM-G977N    CSC: KTC    Method: Auto\nVersion: G977NKSU4EUA4/G977NOKR4EUA4/G977NKOU4EUA4\nSize: 5194 MB\nOS: R(Android 11)\nFilename: SM-G977N_4_20210120142634_acqegd7bb2_fac.zip.enc4<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果 Frija 实在无法使用，可以尝试 <a href=\"https://github.com/nlscc/samloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nlscc/samloader</a>。网站 <a href=\"https://www.sammobile.com/samsung/galaxy-s10-5g/firmware/#SM-G977N\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SamMobile</a> 和 <a href=\"https://samfw.com/firmware/SM-G977N\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SamFw</a> 也提供三星固件查找下载服务。</p>\n</blockquote>\n<p>上方用 Frija 查找到的固件 <code>G977NKSU4EUA4</code> 为 Android 11 版本，是目前此系列机型的第一个 Android 11 版本推送，暂无国行 ROM 支持；Android 10 的最新固件型号应该为 <code>G977NKSU4DTJ8</code>。下面就用 Android 11 的第一份固件尝鲜。</p>\n<p>将压缩包解压后得到 <code>AP</code> <code>BL</code> <code>CP</code> <code>CSC</code> <code>HOME_CSC</code> <code>USERDATA</code> 文件。<code>USERDATA</code> 不会用到。</p>\n<p>将手机关机，按住 <code>Bixby</code>+<code>音量减</code> 插入数据线将手机连接至电脑，直至手机屏幕亮起松开按键，按一下音量加进入 Download 模式。</p>\n<p>打开 Odin 软件，此时应该看到界面中提示 <code>Added!</code>。接下来点击「AP」「BL」「CP」「CSC」依次选中对应的 <code>AP</code> <code>BL</code> <code>CP</code> <code>CSC</code> 文件。保证数据线连接可靠，点击「Start」开始刷入官方固件。</p>\n<blockquote>\n<p>如果点击 <code>AP</code> 包返回 Odin 后卡住，稍微多等一会就好了，这个包比较大。</p>\n</blockquote>\n<figure><img src=\"https://rmt.dogedoge.com/fetch/tingle/storage/odin_fac.png?w=985&#x26;fmt=webp\" alt=\"Odin 刷入官方固件\"><figcaption>Odin 刷入官方固件</figcaption></figure>\n<p>接下来手机会重新启动。由于之前刷 AuroraROM 时已经解锁了 Bootloader，此时开机会弹出警告信息，略过即可，我们后面来干掉它。按 <code>音量减</code> <code>音量加</code> 键上下移动，依次选择「wipe data/factory reset」和「wipe cache partition」，最后「reboot system now」进入官方固件的系统。</p>\n<h2 id=\"官方固件激活设置\"><a href=\"#%E5%AE%98%E6%96%B9%E5%9B%BA%E4%BB%B6%E6%BF%80%E6%B4%BB%E8%AE%BE%E7%BD%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>官方固件激活设置</h2>\n<p>紧接着上一步，在几分钟的等待之后进入了系统激活界面。这次激活的设置 <strong>不会影响后续使用</strong>，因为待会刷入 Magisk in Recovery 时所有设置都会被抹除。</p>\n<p>从激活至进入系统设置启用开发者选项过程中如果始终未连接到网络，接下来你可能无法看见 OEM 解锁选项。可以在 <strong>无网络激活进入系统后</strong> 连接 WiFi，等待一会再进入开发者选项。OEM 解锁状态为 <strong>打开且灰色不可更改</strong> 时为正常状态，如果为可更改状态，那么可能需要另寻资料解锁 KG 锁（就是将系统时间调前 N 天解锁的那个玩意）。</p>\n<p>在设置中启用开发者选项时可以顺手打开开发者选项中的 <strong>USB 调试</strong>，方便后续使用 ADB。</p>\n<blockquote>\n<p>我自己使用的方法是在激活时将手机 SIM 卡拔出，连接到笔记本正在使用的同一无线网络，设置 WiFi 使用笔记本上的代理。因为一旦联网，激活时需要连接谷歌和三星服务器验证一些信息。</p>\n<ol>\n<li>我的笔记本连接到了一个 <code>TP-LINK_233</code> 的 WiFi，且本地使用 Clash 在 <code>7890</code> 端口全局代理。</li>\n<li>在 Clash 中打开「Allow LAN」选项，将鼠标放在该选项上可以看见「192.168.0.xxx  LAN」的字样</li>\n<li>在手机上同样连接 <code>TP-LINK_233</code> 的 WiFi，并在「高级设置 - 代理服务器」中填入代理主机名 <code>192.168.0.xxx</code> 和代理服务器端口 <code>7890</code>。</li>\n</ol>\n</blockquote>\n<h2 id=\"安装-magaisk-in-recovery\"><a href=\"#%E5%AE%89%E8%A3%85-magaisk-in-recovery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Magaisk in Recovery</h2>\n<p>将手机连接至电脑，使用 ADB 将预先下载好的 Magisk Manager APK 文件和刚才刷入的官方固件 <code>AP</code> 包传输至手机。注意在手机弹出页面中进行 USB 调试授权。</p>\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\"><span class=\"token function\">PS</span> D:\\Tools\\platform<span class=\"token operator\">-</span>tools<span class=\"token operator\">-</span>r30<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>5> <span class=\"token punctuation\">.</span>\\adb <span class=\"token operator\">--</span>version\nVersion 30<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>5<span class=\"token operator\">-</span>6877874\n<span class=\"token function\">PS</span> D:\\Tools\\platform<span class=\"token operator\">-</span>tools<span class=\"token operator\">-</span>r30<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>5> <span class=\"token punctuation\">.</span>\\adb devices\n<span class=\"token operator\">*</span> daemon not running<span class=\"token punctuation\">;</span> starting now at tcp:5037\n<span class=\"token operator\">*</span> daemon started successfully\nR3CM50460DD     unauthorized\n<span class=\"token function\">PS</span> D:\\Tools\\platform<span class=\"token operator\">-</span>tools<span class=\"token operator\">-</span>r30<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>5> <span class=\"token punctuation\">.</span>\\adb devices\nList of devices attached\nR3CM50460DD     device\n\n<span class=\"token function\">PS</span> D:\\Tools\\platform<span class=\"token operator\">-</span>tools<span class=\"token operator\">-</span>r30<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>5> <span class=\"token punctuation\">.</span>\\adb push D:\\SumsungFirmwarePath\\AP_G977NKSU4EUA4_xxxxxxxxxx<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>md5 <span class=\"token operator\">/</span>sdcard<span class=\"token operator\">/</span>Download<span class=\"token operator\">/</span>\nD:\\SumsungFirmwarePath\\AP_G977NKSU4EUA4_xxxxxxxxxx<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>md5: 1 file pushed<span class=\"token punctuation\">,</span> 0 skipped<span class=\"token punctuation\">.</span> 35<span class=\"token punctuation\">.</span>3 MB<span class=\"token operator\">/</span>s <span class=\"token punctuation\">(</span>4825702590 bytes in 130<span class=\"token punctuation\">.</span>538s<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在手机上安装 Magisk Manager，进入应用查看手机信息：</p>\n<figure><img src=\"https://rmt.dogedoge.com/fetch/tingle/storage/magisk-manager.jpg?w=600&#x26;fmt=webp\" alt=\"Magisk Manager 检查手机信息\"><figcaption>Magisk Manager 检查手机信息</figcaption></figure>\n<p>我正在用的这台三星启动镜像不包含 ramsidk，「SAR」状态为是，所以只能用 Magisk in Recovery 的方式刷入 Magisk。</p>\n<p>接下来要手动修补镜像，点击「Magisk」卡片上的「安装」，确保「安装到 Recovery」被勾选，点击下一步「选择并修补一个文件」，选中刚才复制的官方固件 AP 包，等待 Magisk Manager 完成修补。修补后的文件在 <code>/Download</code> 文件夹下，将其用 ADB 推送至电脑。</p>\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\"><span class=\"token function\">PS</span> D:\\Tools\\platform<span class=\"token operator\">-</span>tools<span class=\"token operator\">-</span>r30<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>5> <span class=\"token punctuation\">.</span>\\adb pull <span class=\"token operator\">/</span>sdcard<span class=\"token operator\">/</span>Download<span class=\"token operator\">/</span>magisk_patched_xxxxx<span class=\"token punctuation\">.</span>tar D:\\SumsungFirmwarePath\\\n<span class=\"token comment\"># [ 71%] /sdcard/Download/magisk_patched_xxxxx.tar</span>\n<span class=\"token operator\">/</span>sdcard<span class=\"token operator\">/</span>Download<span class=\"token operator\">/</span>magisk_patched_xxxxx<span class=\"token punctuation\">.</span>tar: 1 file pulled<span class=\"token punctuation\">,</span> 0 skipped<span class=\"token punctuation\">.</span> 43<span class=\"token punctuation\">.</span>3 MB<span class=\"token operator\">/</span>s <span class=\"token punctuation\">(</span>4891154944 bytes in 107<span class=\"token punctuation\">.</span>623s<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<p>将手机关机再次进入 Download 模式，可以看到刷完官方固件后输出发生了一点变化：</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">PRODUCT NAME: SM-G977N\nCURRENT BINARY: Sumsung Official   # Custom(0x30e)\nKG STATE: Checking\nFRP LOCK: OFF\nOEM LOCK: OFF(U)\nSecure Download: Enabled\nCARRIER_ID: KTC\nWARRANTY VOID: 1 (0x0400)\nRP SWREV: B:4 K:4 S:4<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打开 Odin 软件，将修补后的 <code>magisk_patched_xxxxx.tar</code> 文件作为 <code>AP</code> 包与官方固件中的另外 <code>BL</code> <code>CP</code> <code>CSC</code> 三个文件一同再次刷入。注意此处需要在 Odin「Options」中将「Auto Reboot」关闭。</p>\n<p>Odin 显示状态为绿色 PASS 后即可关闭 Odin 软件、将手机与电脑断开。</p>\n<h2 id=\"进入-magisk-in-recovery\"><a href=\"#%E8%BF%9B%E5%85%A5-magisk-in-recovery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>进入 Magisk in Recovery</h2>\n<blockquote>\n<p><strong>下面的操作请多查看几篇文章再操作</strong>。我反复尝试了很多次，但 Magisk Manager 都无法检测到 Magisk 环境，刷入了几个型号的固件也都无法解决。这应该是个极易出现的问题，不必着急，继续操作。</p>\n</blockquote>\n<p>紧接着上一步，我们将刷入修补 <code>AP</code> 完毕的手机断开连接，此时手机仍停留在 Download 模式。接下来应该需要一些连贯的操作以进入 Magisk in Recovery。第一步是长按 <code>电源</code>+<code>音量减</code> 大于 7 秒退出 Download 模式。接下来错误的下一步就可能导致各种问题。</p>\n<p>一般来说，这一步应该是长按「恢复模式组合键」（对于 S10 5G 就是 <code>电源</code>+<code>Bixby</code>+<code>音量加</code>）至屏幕闪烁时立即松开所有按键。</p>\n<p>如果时机不当或其他原因可能导致 <strong>手机陷入启动循环</strong>，这时要解救手机的方法应该是：在手机黑屏时按住「恢复模式组合键」，屏幕亮起后立即松开 <code>电源</code>+<code>Bixby</code> 只保留 <code>音量加</code>，直至进入真实的 Recovery 模式，然后擦除数据进行一次出厂重置。按下 <code>电源</code> 键确认出厂重置后如果没有其它动作，手机可能会再次陷入无限重启，所以理论上应该是需要在确认操作后立即按住「恢复模式组合键」，屏幕再次亮起时松开所有按键。</p>\n<p>另一个最常见的问题就是进入系统后检测不到 Magisk（我认为此时 Magisk 应该已经成功安装，只是进入了无 Magisk 的系统）。原因应该就在于进入系统的操作失误。今天花了一整天不断地刷机、修补、重刷、激活，都没有搞明白自己到底是哪里的问题。晚上吃完饭我又尝试了几个小时，在一次重启尝试无果之后，我在 Windows ADB 上连接着 <strong>无 Magisk 的系统</strong> 调试，键入 <code>.\\adb reboot recovery</code> 试图进入 Recovery 恢复出厂设置，接着手机重启像往常一样显示了 Bootloader 解锁的警告，然后 <del>我按下了电源键确认，</del> 等待了一会，手机成功进入了 Magisk in Recovery。在 Magisk Manager 中我终于看到了「当前 21.4(21400)」的字样。心情平复之后我将手机关机，按照官方说明按下「恢复模式组合键」，手机震动屏幕亮起时松开，手机也能正常进入 Magisk in Recovery。</p>\n<p>最终我多次尝试发现：</p>\n<ul>\n<li>只要打开 USB 调试，在 Windows 命令行中键入 <code>.\\adb reboot recovery</code> 并回车，等待手机开机即可，过程中不需要按下任何组合键。</li>\n<li>如果没有笔记本可用，也可以先将手机关机，然后按下「恢复模式组合键」，在手机震动屏幕亮起时松开所有按键，等待手机开机即可。</li>\n</ul>\n<figure><img src=\"https://rmt.dogedoge.com/fetch/tingle/storage/Screenshot_20210202-213410.jpg?w=600&#x26;fmt=webp\" alt=\"成功进入 Magisk in Recovery\"><figcaption>成功进入 Magisk in Recovery</figcaption></figure>\n<h2 id=\"移除-bootloader-解锁警告\"><a href=\"#%E7%A7%BB%E9%99%A4-bootloader-%E8%A7%A3%E9%94%81%E8%AD%A6%E5%91%8A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>移除 Bootloader 解锁警告</h2>\n<p>根据本文开头给出的 XDA 论坛 @Dante63 帖子，所有猎户座设备均可移除修改后 Bootloader 解锁的警告信息，方法为修改固件 <code>BL</code> 包中的图片再打包重新刷入。</p>\n<ol>\n<li>安装 7-Zip Zstandard Edition</li>\n<li>在刷机时固件解压后的 <code>BL</code> 包上右键使用 7-Zip ZS 打开压缩包</li>\n<li>解压其中的 <code>up_param.bin.lz4</code></li>\n<li>在解压出来的 <code>up_param.bin.lz4</code> 包上右键使用 7-Zip ZS 打开压缩包</li>\n<li>解压其中的 <code>up_param.bin</code></li>\n</ol>\n<p>接下来只需要用到这个压缩包中包中包 <code>up_param.bin</code>：</p>\n<ol>\n<li>使用 7-Zip ZS 打开压缩包 <code>up_param.bin</code></li>\n<li>\n<p>修改其中的 <code>logo.jpg</code> <code>booting_warning.jpg</code>：</p>\n<ul>\n<li>将 <code>booting_warning.jpg</code> 修改为全黑</li>\n<li>显示原有 Logo：将 <code>logo.jpg</code> 重命名为 <code>svb_orange.jpg</code></li>\n<li>展示自定义 Logo：修改 <code>logo.jpg</code> 为自定义 Logo 但不要调整大小和维度，复制一份名为 <code>svb_orange.jpg</code></li>\n</ul>\n</li>\n<li>将修改后的图片拖进原 <code>up_param.bin</code> 文件保存修改</li>\n<li>右键更新后的 <code>up_param.bin</code> 文件使用 7-Zip ZS 添加到压缩包，注意修改压缩格式为 <code>tar</code></li>\n</ol>\n<p>打开 Odin，将修改后的 <code>up_param.bin</code> tar 压缩包作为 <code>BL</code> 包 <strong>单独刷入</strong>。</p>\n<details><summary>懒人必备</summary><br />\n<p>我懒得修改，从旧的极光 ROM 包里找到了大佬修改好的 <code>up_param.bin</code> 文件，把它拖出来再单独压缩成 tar 包即可：</p>\n<figure><img src=\"https://rmt.dogedoge.com/fetch/tingle/storage/lazyme.png?w=985&#x26;fmt=webp\" alt=\"AuroraROM 中已经修改好的文件\"><figcaption>AuroraROM 中已经修改好的文件</figcaption></figure>\n</details>\n<p>这里我刷完自动重启后也成功进入 Magisk in Recovery，如果你不幸进入了没有 Magisk 的系统，可以参考上一章节重新进入。</p>\n<h2 id=\"完工\"><a href=\"#%E5%AE%8C%E5%B7%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>完工</h2>\n<p>在 Magisk Manager 中搜索「Riru」和「Riru - LSPosed」安装，再到 <a href=\"https://github.com/LSPosed/LSPosed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@LSPosed/LSPosed</a> 仓库的 <a href=\"https://github.com/LSPosed/LSPosed/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Releases</a> 中下载 LSPosed Manager 安装。</p>\n<p>如果需要重启，直接在 Magisk Manager 中模块安装完成后点击重启按钮，貌似也可以不用任何组合键直接重新进入 Magisk in Recovery。如果失败了的话同样参考上上个章节重新进入，问题不大。</p>\n<p>折腾完这些，手头的三星终于可以吃上 LSPosed 了，顺带还享受起了 Android 11 和 OneUI 3.0。官方固件自带谷歌全家桶，略显臃肿。</p>\n<figure><img src=\"https://rmt.dogedoge.com/fetch/tingle/storage/magisk-riru-lsposed.png?w=1280&#x26;fmt=webp\" alt=\"Magisk Manager &#x26; LSPosed Manager\"><figcaption>Magisk Manager &#x26; LSPosed Manager</figcaption></figure>\n<figure><img src=\"https://rmt.dogedoge.com/fetch/tingle/storage/mobile-desktop.png?w=1280&#x26;fmt=webp\" alt=\"软件信息 &#x26; 主屏幕 &#x26; 一加天气组件\"><figcaption>软件信息 &#x26; 主屏幕 &#x26; 一加天气组件</figcaption></figure>\n<p>目前还没看到手上这个机型的国行 Android 11 ROM，所以暂时就继续用官方的了，这是一些我在用的感觉还蛮舒服的解决方案：</p>\n<ul>\n<li>\n<p>三星支付因为 Magisk 修改无法使用</p>\n<p>三星支付，用处不大，直接卸载（逃</p>\n</li>\n<li>\n<p>国内软件的指纹支付不可用</p>\n<p>在 Magisk Manager 中安装 Jason Eric 的「Riru - 指纹支付」系列插件</p>\n</li>\n<li>\n<p>自带的天气组件定位不到我所在的村子位置</p>\n<p>在 Magisk Manager 中安装 MarcAnt01 的「Oxy-ify」，将一加的天气组件安装上去</p>\n</li>\n<li>\n<p>听腻了三星铃声想换一个</p>\n<p>「Oxy-ify」可以顺带安装一加的铃声。Magisk Manager 中还有其他系统如 MIUI 的音效包</p>\n</li>\n</ul>\n<blockquote>\n<p>我还蛮喜欢一加 OnePlus tune 的调调的，嘿嘿🤣</p>\n</blockquote>\n<p>如果你对本文后续三星设备上安装 Magisk in Recovery 的步骤有任何建议欢迎留言，我只是将自己的操作记录了下来，仅供参考，未必适用于其他三星设备！</p>\n"}},{"node":{"title":"从零开始的追番生活","path":"/tech/auto-download-bangumi-with-aria2-rss/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/aria-rss-bangumi.a209973.128ec450120ff0928e23c48d995c622c.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/aria-rss-bangumi.a67b0b2.128ec450120ff0928e23c48d995c622c.png 480w","/assets/static/aria-rss-bangumi.a209973.128ec450120ff0928e23c48d995c622c.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2c75bb926b7fe37cbc040287d420ee23'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2c75bb926b7fe37cbc040287d420ee23)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAHmUlEQVRIx7WXe1BTVx7HI3S2Ox07szPrtINu6TDb9VGqYi5hAR0eUh5ViRgICITk5t57zg2BICCEIIpvq8W11MXaldUdtlIe2mpX5FFZKyiUAj4ob0SQlyREIBDkIZC7JwkgKAjW7cz54/x5P/f7/f5%2b38NKxk6fxb78F/b3FCzxa%2bxEKnY8HTuWgX16ETt0Cdv/PRafhcVlY4o8TH4N23kdC7%2bB7biJhRZjISVYcBlGl2PwDgdW2MAqW1hrD%2bs3wEZH2OQMWz6GbW6w8xOo3ALVW2EPD2p8oNYPDvjDIQEcFsFRHI6RUEdBBr7WYSVjX57FTk0BnMeOpy0AoGgawN0pALtnAA8NACoPqN6sB%2bieBjAogCMi%2bNQAMP76AP80AJybAfDZNIC98yrwPICDHqDVBSrdQIOn5IEXreGC3m2wd5oCI5MKjP82CjwDuIztvcLefZWNAKLzscjZAaxnWOi%2bI3zoBJvd4VeCiERR%2bGd4ZLIwUs2DfT6w3w8%2bMSgw/ALAOKR1kGYgQAddxvX3/5OFsjmKXE50DluRu1bxXyyiwDrsJiabHcCgQIMj7HAC5/zDJTHHvku5kHYmVRxxOFUYPugN%2bpACARMKTFlobOJzxeMQaKF0AEp1egxCtzCG5y1kCLFRgYPfsQ9kcXap8Y/Uoo%2bafRzuufkU2IRet9p5yxopIJ1LAWShB650pCjqb0lfqzWapta2uIOnokl5ty8cmAkwSkKGInUUzgBxFojfBFLMqUvvg0ueICUHxDOQ1C1MgdOzKXBED4AduMKJa/Gz7xGvGpS8Nyw1eyyy/MXVu5C9o2huCyGAZheoEMtj95%2boqastLS%2bVRu7bQ8X28IF2EmDYAMAQ4gY6%2bkro0aiQZBOQzyKvsagfDCefRV1LAAlIh3m9tKAMoBAX2Esbtrr1A4vB4GVNXhuL2KElmHRWC6EMtDtSl33DeETY%2bX1HzsTu9RSF5AWFD3lTRgsZp5AOp/bIzv4%2b5h5LUcNS1JnIK96Q3jAls02p3DepHFMqbxH1w48gDukw9lKGWRV4ZiGkQBPf4T5v48/OwjyrmOL1oCto7XCIWbOX80/rQqcAfpm5B5qdYZsLuMKXFW8NKuTh2QFhmm1AYwgxAhgQ0EwQfiLkFGvXAxNF9SJFlYmikhVbvSi22mRHsSmZY0Jk/47IYhH5InCGoQRjAOpecYwem56BbvGHQ9Jlw9KlnYHYLTtJoXWoOmgN0qHW1avEKuS2Nbg7%2byKju1xo5SZJ1xZJP3faIguAIwKgFUlWRBWxYutM9Z9exVJUsWIqWdGVrJhqk51lb8puvCUvWby/0vzQ3ZOx5wZpCQOouTI91xQ6Mmmh%2bNy/RhU5ks18x6HgZb3E8mI7ULpe3A8tukWW5RyqHKMRwAwFHGg9gCvV7hnYuUWs9BJ08UTdXhIjgDaAHhNQbeLwxYoKFvr9csN3K6reiK95%2b2jju0kPLVI6PzivNDvdtuSLlj%2bebGUlqagDVxHArxyjKAPfr9t7dd3urLV7qjZxkRTKQPYNq4imrRuHQpbWu3JLrULuccAEgB1dv4FudAStXF7r5sB2D0LJ91IKPlb7BGrogD5c2I8GkT89Egh6cKm5vIQVV7v4UP2SxGbz5I7lqapVGWrLC49XZXShy4o01bKv2pacaHonsentk21F4YcYSjxroOeaQpMA7H33PvHpEq254%2bqXs3ZXC38DCkCFs1%2bZvfhJ8J86fGzL2MEGALrKlq5zFDU4kI1OZDvfvcUDb3ejlb5cVYD7Y1%2b8L4LXJxZqKcGTML8BIc0EiA/vTv1DutYyXbUms2t1hurDdNXKNHS6VqbrD8JYma5%2b/2zHO583vfVFW6o8iSGFY8hLr2KhiQxoyL%2bMhL7bJVyNQlzmGDQkXdrCc7jFlvUSK3rwVbc54K41XWlH1joJ7rv6Nbr5NzoTrZ7erR6idq5/J1eo4vP0ClCB/TJfrcx3MMp7EKdGKXyIkMoTr/05s3vphX6zi9r3LmosMns/yHi8Il2tB0hTWaYpV6erLFKUS5JaK8LiGUC8kgJ6AKMC1dzNiKFyk1feOnmhTUiPeGU73w4BPNpuYwAg77Clda7edS7b65yEDzz4jU5UkxONQtzujtqoRLmFVnNpfYj5UIuLnsj80B4YivIdpYXjOFUiP/qPw%2bcPHv%2bPNKlgW3KF3b8frvnm0fJ0tfkFjdm3WgRmfrE/4dNMhhTraPolY3TOOm3cA3mcnbnsGGOZu2kjLeIEo0VWyoG3bchya3gHk9S6%2bNZswGtsJfXrJSjEzYY6bQCAKmOd3maYQr70QBCpX2Rh/k8BMUbQDIEzuIAhRCimTyXBfdIdjRG7CxUJmfvOJB7NPJJw%2bfquzxlAGjoS/DVTyFinr7JjczF5vh4g4kd2%2bE22TF8l2MGlbIlhDyALEVW2oMZ%2bRp2eDjBRp7dPtlGKGCXAGAHHAD1KS8aN5gZAP20ogiFFDBGkP2Ihuuvm60J6Bc69FCAbi5mq0wVz1OnKFx40MxSY%2baAZEU6UuRcfNGjeI7egvBrP%2bGzBXWAGnn/Q5M/7Hpi2iecBEM0J8LrvgckMLBTg9mwARgU63OGj5yz0Gzxo/gelw9FNLTSQwQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"date":"July 28. 2020","timeToRead":11,"cjkWordCount":2574,"cjkReadTime":8,"description":"使用 FlexGet 实现服务器 Aria2 RSS 订阅，自动下载番剧到 OneDrive，在本地通过 Windows OneDrive 文件夹同步实现追番「自动化」流程。","content":"<p>最近觉得为了偶尔看看电影动漫而续费腾讯视频会员太吃亏了，一个月四集的《斗罗大陆》水得不行啊喂！哔哩哔哩大会员也是如此，有的时候我在这头，想看的番剧在那头，每次都要科学上网才能解锁，属实费劲。</p>\n<p>想了想自己闲置的服务器和最近开通的 Microsoft 365 E5 开发者订阅，我决定自己动手，部署一套更省钱的追番流程。最初是这样一套笨笨的追番流程：「bangumi.moe 等种子站找资源 -> 服务器 Aria2 下载 -> Rclone + Aria2 联动将内容转移到云盘 -> 云盘网页下载」。但是这样一来科学上网工具的流量开销比较大，而且也完全称不上自动。后来我发现 Windows 系统打开 OneDrive 文件夹同步就可以免去手动登录网页下载，于是我从之前的 Google Drive 迁移到 OneDrive，这样一来流程的后两步就合并了。如何让前两步合并呢？一番搜索之后我找到了 FlexGet 这个 Python 编写的工具，众多插件使得 FlexGet 在 RSS 订阅下载上大放异彩。本文便记录这一部署过程。</p>\n<h2 id=\"rclone\"><a href=\"#rclone\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rclone</h2>\n<p>Rclone 用于网盘挂载，从 <a href=\"https://rclone.org/downloads/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方</a> 下载安装，按照命令行提示输入后得到配置文件 <code>rclone.conf</code>（后续使用），路径一般为 <code>~/.config/rclone/rclone.conf</code>。</p>\n<p>注意使用自己的 Secret ID &#x26; Key，据说能极大的提高文件传输速率。公用的 API 想想就知道肯定比不过自建。参考文档《<a href=\"https://rclone.org/drive/#making-your-own-client-id\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GoogleDrive: Making your own client_id - rclone.org</a>》《<a href=\"https://rclone.org/onedrive/#getting-your-own-client-id-and-key\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OneDrive: Getting your own Client ID and Key - rclone.org</a>》创建即可。</p>\n<p>Rclone 挂载 OneDrive 时需要在运行图形界面的系统上完成。Linux 服务器由于一般不带图形界面，所以需要配合本地机器：在 Windows 中下载 Rclone 相应版本文件，Power Shell 进入解压后的文件夹中键入下面命令后复制 <code>Paste the following into your remote machine ---></code> 和 <code>&#x3C;---End paste</code> 之间的 <code>SECRET_TOKEN</code> 到远程服务器命令行中。</p>\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\"><span class=\"token punctuation\">.</span>\\rclone authorize <span class=\"token string\">\"onedrive\"</span> <span class=\"token string\">\"Client_ID\"</span> <span class=\"token string\">\"Client_secret\"</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>OneDrive 更详细挂载过程可参考文章《<a href=\"https://p3terx.com/archives/rclone-connect-onedrive-with-selfbuilt-api.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rclone 进阶使用教程 - 自建私有 API 挂载 OneDrive - P3TERX</a>》。<strong>后面均使用 OneDrive 部署</strong>。</p>\n<h2 id=\"aria2\"><a href=\"#aria2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Aria2</h2>\n<p>Aria2 是一个强大的下载工具，这里使用 Docker 部署 Aria2 后端服务和 AriaNG 前端页面。参考文章《<a href=\"https://p3terx.com/archives/docker-aria2-pro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aria2 Pro - 更好用的 Aria2 Docker 容器镜像 - P3TERX</a>》。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># 建立 Docker 映射文件夹</span>\n<span class=\"token function\">mkdir</span> /data /data/ariapro /data/ariapro/config /data/ariapro/downloads\n\n<span class=\"token comment\"># 复制 Rclone 配置文件</span>\n<span class=\"token function\">cp</span> ~/.config/rclone/rclone.conf /data/ariapro/config/rclone.conf\n\n<span class=\"token comment\"># 部署 p3terx/aria2-pro 镜像</span>\n<span class=\"token comment\"># 修改 &lt;TOKEN> 为自定字符串</span>\n<span class=\"token comment\"># 若支持 IPv6 则开启 IPV6_MODE=enable 否则需要关闭</span>\ndocker run -d <span class=\"token punctuation\">\\</span>\n  --name ariapro <span class=\"token punctuation\">\\</span>\n  --restart unless-stopped <span class=\"token punctuation\">\\</span>\n  --log-opt max-size<span class=\"token operator\">=</span>1m <span class=\"token punctuation\">\\</span>\n  --network <span class=\"token function\">host</span> <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">PUID</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$UID</span> <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">PGID</span><span class=\"token operator\">=</span><span class=\"token variable\">$GID</span> <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">RPC_SECRET</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>TOKEN<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">RPC_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">6800</span> <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">LISTEN_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">6888</span> <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">IPV6_MODE</span><span class=\"token operator\">=</span>enable <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">SPECIAL_MODE</span><span class=\"token operator\">=</span>rclone <span class=\"token punctuation\">\\</span>\n  -v /data/ariapro/config:/config <span class=\"token punctuation\">\\</span>\n  -v /data/ariapro/downloads:/downloads <span class=\"token punctuation\">\\</span>\n  p3terx/aria2-pro\n\n<span class=\"token comment\"># 部署 p3terx/ariang 镜像</span>\ndocker run -d <span class=\"token punctuation\">\\</span>\n  --name ariang <span class=\"token punctuation\">\\</span>\n  --restart unless-stopped <span class=\"token punctuation\">\\</span>\n  --log-opt max-size<span class=\"token operator\">=</span>1m <span class=\"token punctuation\">\\</span>\n  -p <span class=\"token number\">6880</span>:6880 <span class=\"token punctuation\">\\</span>\n  p3terx/ariang\n\n<span class=\"token comment\"># 配置 rclone 自动上传</span>\n<span class=\"token comment\"># 根据实际修改网盘名称 drive-name 和网盘路径 drive-dir</span>\n<span class=\"token function\">nano</span> /data/ariapro/config/script.conf\n<span class=\"token comment\"># 修改下载完成后执行的命令 on-download-complete 为 /root/.aria2c/upload.sh</span>\n<span class=\"token function\">nano</span> /data/ariapro/config/aria2.conf\n\n<span class=\"token comment\"># 重启 Aria2 容器</span>\ndocker restart ariapro<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"nginx\"><a href=\"#nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nginx</h2>\n<p>由于使用 IP 登录不太方便，所以继续部署 Nginx 服务反向代理 RPC 端口、绑定自己的域名。简便起见，直接使用 Ubuntu 仓库中的 nginx 包。如果服务器中已安装 Nginx，则直接新建配置文件。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y nginx<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>安装好后 Nginx 配置文件位于 <code>/etc/nginx</code>，于 <code>/etc/nginx/conf.d</code> 文件夹下新建 <code>.conf</code> 文件：</p>\n<details><summary><strong>Nginx 配置文件</strong></summary><br />\n<pre class=\"language-nginx line-numbers\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">listen</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\"># 若支持 IPv6 则启用</span>\n  <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">listen</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token number\">443</span> <span class=\"token keyword\">ssl</span> http2<span class=\"token punctuation\">;</span>            <span class=\"token comment\"># 若支持 IPv6 则启用</span>\n  <span class=\"token keyword\">listen</span> <span class=\"token number\">443</span> <span class=\"token keyword\">ssl</span> http2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">ssl_certificate</span> <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>crt<span class=\"token punctuation\">;</span>        <span class=\"token comment\"># .crt 证书文件路径</span>\n  <span class=\"token keyword\">ssl_certificate_key</span> <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>    <span class=\"token comment\"># .key 证书文件路径</span>\n  <span class=\"token keyword\">ssl_protocols</span> TLSv1 TLSv1<span class=\"token punctuation\">.</span><span class=\"token number\">1</span> TLSv1<span class=\"token punctuation\">.</span><span class=\"token number\">2</span> TLSv1<span class=\"token punctuation\">.</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">ssl_ciphers</span> TLS13<span class=\"token operator\">-</span>AES<span class=\"token operator\">-</span><span class=\"token number\">256</span><span class=\"token operator\">-</span>GCM<span class=\"token operator\">-</span>SHA384<span class=\"token punctuation\">:</span>TLS13<span class=\"token operator\">-</span>CHACHA20<span class=\"token operator\">-</span>POLY1305<span class=\"token operator\">-</span>SHA256<span class=\"token punctuation\">:</span>TLS13<span class=\"token operator\">-</span>AES<span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token operator\">-</span>GCM<span class=\"token operator\">-</span>SHA256<span class=\"token punctuation\">:</span>TLS13<span class=\"token operator\">-</span>AES<span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token operator\">-</span>CCM<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">-</span>SHA256<span class=\"token punctuation\">:</span>TLS13<span class=\"token operator\">-</span>AES<span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token operator\">-</span>CCM<span class=\"token operator\">-</span>SHA256<span class=\"token punctuation\">:</span>EECDH<span class=\"token operator\">+</span>CHACHA20<span class=\"token punctuation\">:</span>EECDH<span class=\"token operator\">+</span>AES128<span class=\"token punctuation\">:</span>RSA<span class=\"token operator\">+</span>AES128<span class=\"token punctuation\">:</span>EECDH<span class=\"token operator\">+</span>AES256<span class=\"token punctuation\">:</span>RSA<span class=\"token operator\">+</span>AES256<span class=\"token punctuation\">:</span>EECDH<span class=\"token operator\">+</span><span class=\"token number\">3</span>DES<span class=\"token punctuation\">:</span>RSA<span class=\"token operator\">+</span><span class=\"token number\">3</span>DES<span class=\"token punctuation\">:</span><span class=\"token operator\">!</span>MD5<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">ssl_prefer_server_ciphers</span> on<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">ssl_session_timeout</span> <span class=\"token number\">10</span>m<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">ssl_session_cache</span> builtin<span class=\"token punctuation\">:</span><span class=\"token number\">1000</span> shared<span class=\"token punctuation\">:</span><span class=\"token keyword\">SSL</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span>m<span class=\"token punctuation\">;</span>\n  ssl_buffer_size <span class=\"token number\">1400</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">add_header</span> Strict<span class=\"token operator\">-</span>Transport<span class=\"token operator\">-</span>Security max<span class=\"token operator\">-</span>age<span class=\"token operator\">=</span><span class=\"token number\">15768000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">server_name</span> www<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>          <span class=\"token comment\"># 域名</span>\n  <span class=\"token keyword\">access_log</span> off<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$ssl_protocol</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">301</span> <span class=\"token keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token variable\">$host</span><span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">proxy_redirect</span> off<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">6880</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\"># 修改为 ariang 端口</span>\n    <span class=\"token keyword\">proxy_set_header</span>  Host                <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span>  X<span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span>IP           <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span>  X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span><span class=\"token keyword\">Ssl</span>     on<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span>  X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>For     <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span>  X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>Proto   <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span>  X<span class=\"token operator\">-</span>Frame<span class=\"token operator\">-</span>Options     SAMEORIGIN<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">client_max_body_size</span>        <span class=\"token number\">100</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">client_body_buffer_size</span>     <span class=\"token number\">128</span>k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_buffer_size</span>           <span class=\"token number\">4</span>k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_buffers</span>               <span class=\"token number\">4</span> <span class=\"token number\">32</span>k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_busy_buffers_size</span>     <span class=\"token number\">64</span>k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_temp_file_write_size</span>  <span class=\"token number\">64</span>k<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">location</span> <span class=\"token operator\">^</span><span class=\"token operator\">~</span> <span class=\"token operator\">/</span>jsonrpc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">proxy_http_version</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">add_header</span> Front<span class=\"token operator\">-</span>End<span class=\"token operator\">-</span><span class=\"token keyword\">Https</span> on<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Connection <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>NginX<span class=\"token operator\">-</span><span class=\"token keyword\">Proxy</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span>IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 修改为 p3terx/aria2-pro 容器 RPC_PORT</span>\n    <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">6800</span><span class=\"token operator\">/</span>jsonrpc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_pass_header</span> X<span class=\"token operator\">-</span>Transmission<span class=\"token operator\">-</span>Session<span class=\"token operator\">-</span>Id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\"># 多个 aria2 后端示例</span>\n  <span class=\"token comment\"># location ^~ /googlejsonrpc {                # 修改</span>\n  <span class=\"token comment\">#   proxy_http_version 1.1;</span>\n  <span class=\"token comment\">#   add_header Front-End-Https on;</span>\n  <span class=\"token comment\">#   proxy_set_header Connection \"\";</span>\n  <span class=\"token comment\">#   proxy_set_header Host $http_host;</span>\n  <span class=\"token comment\">#   proxy_set_header X-NginX-Proxy true;</span>\n  <span class=\"token comment\">#   proxy_set_header X-Real-IP $remote_addr;</span>\n  <span class=\"token comment\">#   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span>\n  <span class=\"token comment\">#   proxy_pass http://localhost:6802/jsonrpc; # 修改</span>\n  <span class=\"token comment\">#   proxy_pass_header X-Transmission-Session-Id;</span>\n  <span class=\"token comment\"># }</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>修改上方例子中的域名、端口即可。多个 Aria2 RPC 端口时可以参考注释掉的部分。最后重启 Nginx。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">service</span> nginx restart\n<span class=\"token comment\"># nginx -s reload</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h2 id=\"rss\"><a href=\"#rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RSS</h2>\n<p>部署 FlexGet 之前当然是先找支持 RSS 订阅的站点！目前我个人觉得萌番组的体验还不错！<a href=\"https://bangumi.moe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">萌番组官网</a> / <a href=\"https://bangumi.moe/lite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">萌番组 Lite 版官网</a> / <a href=\"https://bgm.ptr.moe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">萌番组 Material Design 版</a>。点击搜索图标添加 Tags 搜索后 RSS 图标链接地址即为可用订阅地址，切换标题搜索同理。</p>\n<p>比如 添加标签「Lilith-Raws」「租借女友」「1080p」和搜索标题「Lilith 賢者時間 1080p」分别可以得到这两种 RSS 订阅地址：</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">https://bangumi.moe/rss/tags/5d8b3245306f1a0007bd7aca+548ee2ce4ab7379536f56358+5efffb4f3d656e43622cacc9\nhttps://bangumi.moe/rss/search/Lilith%20%E8%B3%A2%E8%80%85%E6%99%82%E9%96%93%201080p<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>除了 bangumi.moe 之外还有很多平台，部分资源相同，罗列一些包括但不限于二次元的资源站：</p>\n<ul>\n<li>\n<p>BT RSS 订阅</p>\n<ul>\n<li><a href=\"https://share.dmhy.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">動漫花園資源網</a> 动漫、日剧、游戏、特摄等</li>\n<li><a href=\"https://acg.rip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ACG.RIP</a> 动画、日剧、综艺、音乐等</li>\n<li><a href=\"https://bt.xfsub.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">旋风动漫分享站</a> 漫画</li>\n<li><a href=\"https://nyaa.si\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nyaa</a> 侧重于东亚（中日韩）多媒体资源，被日本政府确定为主要的数字盗版网站</li>\n<li><a href=\"https://yts.mx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YIFY</a> 以 BitTorrent 分发大量免费下载的电影而闻名，国内很多电影资源源头</li>\n<li><a href=\"https://eztv.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EZTV</a> 国外电视节目等，「TV Torrents Online Series Download」</li>\n<li><a href=\"https://thepiratebay10.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Pirate Bay 10</a> 据称是「the galaxy's most resilient BitTorrent site」</li>\n<li><a href=\"http://f.cili001.com/home.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MAG 磁力站</a> 侧重影视剧集，可以搜人人影视专用链接</li>\n</ul>\n</li>\n<li>\n<p>字幕</p>\n<ul>\n<li><a href=\"https://bbs.vcb-s.com/forum-37-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VCB-S 分享论坛</a> ACG 字幕分享</li>\n<li><a href=\"https://subhd.tv/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SubHD.tv</a> 资源+字幕站，找字幕体验非常好</li>\n<li><a href=\"http://www.zmtiantang.cc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">字幕天堂</a></li>\n</ul>\n</li>\n<li>\n<p>漫画</p>\n<ul>\n<li><a href=\"http://www.animetox.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animex 动漫社</a> 最近找进击的巨人漫画发现的</li>\n<li><a href=\"http://mangabz.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Māngabz</a> 在线漫画阅读</li>\n<li><a href=\"https://www.dmzj.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">动漫之家</a></li>\n<li><a href=\"https://www.omyschool.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">木马漫画</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"flexget\"><a href=\"#flexget\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>FlexGet</h2>\n<p>以上部分搭建了基础的下载环境，接下来利用 FlexGet 实现 Aria2 的 RSS 订阅下载。</p>\n<blockquote>\n<p>FlexGet is a multipurpose automation tool for all of your media <br />\nSupport for torrents, nzbs, podcasts, comics, TV, movies, RSS, HTML, CSV, and more.  <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n</blockquote>\n<p>由于是 Python 编写，需要先安装 python3 pip3 包。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3 python3-pip\npip3 <span class=\"token function\">install</span> --upgrade pip setuptools\npip3 <span class=\"token function\">install</span> flexget<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<p>安装完成后新建 FlexGet 配置文件夹并编写配置文件。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/.config/flexget\n<span class=\"token function\">nano</span> ~/.config/flexget/config.yml<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<details><summary><strong>FlexGet 配置文件</strong></summary><br />\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">schedules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">hour</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*/2\"</span>\n\n<span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">KanojoOkarishimasu</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//bangumi.moe/rss/tags/5d8b3245306f1a0007bd7aca+548ee2ce4ab7379536f56358+5efffb4f3d656e43622cacc9\n    <span class=\"token key atrule\">accept_all</span><span class=\"token punctuation\">:</span> yes\n    <span class=\"token key atrule\">aria2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> localhost\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6800</span>\n      <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> &lt;TOKEN<span class=\"token punctuation\">></span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /租借女友/\n  <span class=\"token key atrule\">YahariOrenoSeishunLovecomewaMachigatteIruKan</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//bangumi.moe/rss/tags/5d8b3245306f1a0007bd7aca+548ee2ce4ab7379536f56358+5e822875657e22f4195cc78c\n    <span class=\"token key atrule\">accept_all</span><span class=\"token punctuation\">:</span> yes\n    <span class=\"token key atrule\">aria2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> localhost\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6800</span>\n      <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> &lt;TOKEN<span class=\"token punctuation\">></span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /我的青春恋爱物语果然有问题.完/\n  <span class=\"token key atrule\">DouLuoDaLu</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//bangumi.moe/rss/search/GM<span class=\"token punctuation\">-</span>Team%20%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%201080p\n    <span class=\"token key atrule\">accept_all</span><span class=\"token punctuation\">:</span> yes\n    <span class=\"token key atrule\">aria2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> localhost\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6800</span>\n      <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> &lt;TOKEN<span class=\"token punctuation\">></span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /斗罗大陆/\n  <span class=\"token key atrule\">Japan4KAnimeYTSMX</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//yts.mx/rss/0/2160p/animation/0/ja\n    <span class=\"token key atrule\">accept_all</span><span class=\"token punctuation\">:</span> yes\n    <span class=\"token key atrule\">aria2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> localhost\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6800</span>\n      <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> &lt;TOKEN<span class=\"token punctuation\">></span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /YTS.MX.Japan4KAnime/<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>注意修改 Aria2 后端端口和 Secret。保存后手动运行测试一次，选一种模式设置定时任务，查看状态。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">flexget --test execute\n\nflexget status\n\n<span class=\"token comment\"># Daemon 模式定时任务</span>\n<span class=\"token comment\">#  -d                     后台运行</span>\n<span class=\"token comment\">#  --autoreload-config    执行前重新载入配置文件</span>\n@reboot /usr/local/bin/flexget daemon start -d --autoreload-config\n\n<span class=\"token comment\"># Crontab 模式定时任务</span>\n<span class=\"token comment\"># 删掉前面配置文件中的 scheduler 块配置</span>\n<span class=\"token comment\"># 使用偏好的编辑器进入，添加一行</span>\n<span class=\"token function\">crontab</span> -e\n*/30 * * * * /usr/local/bin/flexget --cron execute<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于定时任务，上方示例中开头 L1-4 的配置使用了 scheduler 插件，只有在 Daemon 模式下才可用。使用 crontab 定时任务不需要该配置。</p>\n<h2 id=\"local\"><a href=\"#local\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Local</h2>\n<p>最后一步，在本地登录 OneDrive 账号设置同步文件夹。右键将本地文件夹标记为「始终在此设备上保留」即可，当云端存入新的文件时本地就会自动下载同步。删除本地文件夹时，默认会将 OneDrive 云端文件一同删除，只删除本地需要右键选择「释放空间」。</p>\n<p>白嫖的开发者订阅 OneDrive 服务器位于境外，从服务器 Rclone 上传文件速度很好，但是有人说本地下载速度太慢，这无法避免。如果使用世纪互联版 OneDrive 本地下载速度肯定会好很多，但服务器上传想必会慢些，自行权衡吧。我使用几周以来尚且满意，睡一觉起来想要看的东西就会自己出现在那里，宅の生活质量提升了，人也变得精神了呢！</p>\n<h2 id=\"end\"><a href=\"#end\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>End</h2>\n<p>关于部署上面流程的服务器强烈推荐使用国外的，国内的服务器网络带宽、Docker 部署、BT 下载环境一言难尽。我用的是 Digital Ocean 新加坡服务器，体验良好。如果就看看新番、一集一集下硬盘需求不是很高，20-40 GB 应该就可以了，要拿来正儿八经下东西硬盘还得越大越好的，这几天下的紫罗兰 4K 版全集就有 43 GB 了。本想着部署「省钱」的追番流程，结果下载服务器一个月就花了几十刀，害，钱还是得花！</p>\n<p>另外安利一个微软收购的文件转移工具：<a href=\"https://mover.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mover</a> 安全、强大、快速的文件转移工具，Microsoft 365 用户福音，可以实现 Box，Dropbox，Google，Amazon，Office 365（原 Microsoft 365） 向 Microsoft 365 转移文件，并且支持定时任务！</p>\n<ul>\n<li>现成的 OneDrive 文件：<a href=\"https://monstx-my.sharepoint.com/:f:/g/personal/storage_tingle_dev/EkM5OfD1nrZBr_214_JmLtgBNz05mQMNqIEFsZOb9FIMBg%EF%BC%9Fe=EM2tX5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Anime</a> / <a href=\"https://monstx-my.sharepoint.com/:f:/g/personal/storage_tingle_dev/EozDcDrM7edEpnZmeL1dDQABZg0xhZNUvnj7IvBlHKM6YA%EF%BC%9Fe=M944ih\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Movies</a> / <a href=\"https://monstx-my.sharepoint.com/:f:/g/personal/storage_tingle_dev/ErcXo0q92thGqrbkpzurmI8BOXwGMJgP0AiwB5lZa_cvuw%EF%BC%9Fe=SM2cWU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Series</a></li>\n<li>部分境外服务器可能禁止 BT 服务，选购前请仔细阅读用户条例</li>\n<li>有条件的话下载完毕后请做种一段时间</li>\n</ul>\n<center><span style=\"font-size:30px\">微软赛高！</span></center>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://flexget.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FlexGet Official website</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>\n"}},{"node":{"title":"照葫芦画瓢 · 编写 Actions 打卡工作流","path":"/tech/modified-github-actions-4-heu-checkin/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/github-actions-checkin.a209973.5d7dca422dbc10301e4b28618b71683f.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/github-actions-checkin.a67b0b2.5d7dca422dbc10301e4b28618b71683f.png 480w","/assets/static/github-actions-checkin.a209973.5d7dca422dbc10301e4b28618b71683f.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-812d81964b261e06f6e45adb1ade60dc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-812d81964b261e06f6e45adb1ade60dc)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAYAAAA9djs/AAAACXBIWXMAAAsSAAALEgHS3X78AAAJ7UlEQVRYw41YaXfURhbl984vmDOT%2bTzzARhySEIWYoIhsYHBbLHBSwwdjGMMXrBjY2MWY2y3e5Nae2mpunOrqtUtEyDp0/eUuiS16r37lls6oZSSAJT%2b6LGKcs5%2bpJJSqkIqAnYslMqJjEhzIlNKaKRSCVEYJEkVuRJxqkSSqjQRKosTlWsksUGRRKoQkZJpxD8jslghT/iQWGUiJGKVCl6f52YtXF1/rWauyFW52mM2vWdb5bw80Zv85EdfzwcSCjTeIC80FNIcEHxunBGpQiSIRCJOCsRxjjjKEUUZolAjNYjDBCKMkWoEEbIgRB4FKGIi8lGIGLLIIDMBOsGAF/B3iCIlMt6TaiTIs9RAFoILLWD4NJyW1lp8zLQTPW/0HIe%2bVwe/S/YHzJesixwqIeNRqlQopAqEUkEslR8VyguJIDfw/VT5XqKCHiIvUnE3VEk3UGnXV5nnqdzrGhRxZNjN%2bJCMrBYMsyLPVJEJghFRaERmZMiQdUaIpNcVFyG5GMVQVEUlotUHI7q0uRoBqvTUIGL0R5Jx2WNeGdZpPBIyr1mn8Qg04xngc21eJNENC3S8DI5fwOHouim6boyuE8FzQgROgLDjI%2b50ITouRwdpp408DNFngWBYm8jTy9HRZ8cCRU7Gc0FEJDvhZMox5ZIZBTLjdYVZt16nz6mjQPWNs/89sLnvgHKy5xtjbDsE/8SUCBPyJMM4oAx5bXworDP2Gx46AQ2n0W2vACMdzU6CRjtBsxWh3QrhEG7Lh9vsImh1EbUcdI/acOiMIIh74frHeE3TtH%2bsyTC05Alt9fVZGi8slLCOQI5GIPG6o1DnJbsOSRJ/4oBqBHQThYktYPalQu2VghMpc5XJec0%2b2S6Z5xdTs3P4dugSRv93G4srW5h9%2bBSPl57j%2bs172DvwsL7xGncnZuF2BLxWgNpMDXMzD%2bDTeLftcbnA6NVrqNVq5vm%2bzzpQFNjc2MD29jZ2dnb68/rjOQ3WkAaPYvjukYkESNGPApFlWDuU8PT6SNSLlnWCcVzJ8IciQPamF/cUJl8AMzsKj94ozO/aE6z0ZB9kV3tUItLM06CvvvkeB%2b2IjpjHjTvT%2bOLcEE7%2b90t8%2b/2PuHDxCr47fxmnT32BBzz/dGEFZ06ewVdnzuLSd0Nwmi24XQ9nz57F9evX0Wq1cGl4GDPT0zh18iSuj41hZmYGExPjuHJlFNOTE/hh6Gtcu3oJU3dvYej819jb1Q4qWAgT44AjP8c7t6AdEs8bCi/bwE77L6RA6YCFtwoPXgF3NhUe0gGP92xN0A7Q7OvcYrtDQIcfdiKcPXceGzsHNPx7nP78HIaGr2Ls9jTOXxjF5NQsxscn8e//nMLVkTH8fHMCn/39n5ibfoAfvjmP50tL%2bJXGfn7qJL459yWGabyOBN8PMDIygkeP5nH69Gncun0b62tr%2bOyzf2Bt%2bSl%2bGZ/A6OgwLv5wHo/m7tv0yONeBKR40SzIvDRRu7gH3Nu2tassfp9MAV00xtaBR7uW/ZUD4E3H/oEuCdqrOy1lQ4y/F5%2buYujCZbI/hdpvzzB5fxGj18bJ2jSEEKjX65ifn8fNmzcx8tMoJn4ex6ULFzF68RL8dweYGruBg811rP/2ELMTdzA2chlT43fw4P4sDf8Zcw8f4h7nr1wZwdLCEyxuPcXfpv%2bFM3fP4cbIKJaX5o0Zkg6wNUCgFeSGyFdtS6Y%2blgNZ8PEiKHsp0giAL%2bYt%2b7/s2GiYM9EAjD9XuPJMYVOnIXuuviWOU6RaCzBCXBYgtn2URVX2CtfxVkPGshyCTCedDsThPrLGHmTrHdLGW%2bTtPSjvkOc4361z3IXf2kUROmh091FrL6Dj7vP%2bhi2ERdwrhLYOSHaDUFCLZLoboGr8x2vAQDTY9jGxpTD1QuGnFeDX1wrX1hSGl8DoULi7DdReUNREMbyAYZcWZDs30JGSs7WJR4vsUGxZ/dxTfVFVCg59LmwcIT46QB5T3PgucrdBB9BwOkG6dESXY3gIFdV5ntcFNNp3qI1Y3aRPGUi22A61A6gHemNmWmbF1mqH%2bXgKlA5gxzLFUC%2bxxhC6taGdYluejgbtmBZbXsMVOGCbO2gGOGoHzN0Iia7Yt%2b7BPfU1vK5P52R9402o9nq6rvTe4RFCpggVj2m5gv2WIojhnFEFa4XYpeFNMl%2bHjI6ovDq00aEidNiWuoRv2S%2bSXju0KeBShb7rSjSZzk5sO1iFhA87oKoDSCqmaWSXSV4j%2b5Pbtg5QyGGtrrBOsP6ZQkh9Y5whBL1PgULNjigIaIxmIz/W04uy0rJqB40WMscxv3KJY6o8Sgdpk5gYZk7pKp%2b7HHmP7HKKLTQbsF9CR0GTmuR1R5q0XdoH3rpWw3yyCKKvnS1Tu3zO8JLC8r52BFOCuf/knXWO9qx2gu4MXmyjYeGlj42DCE9e%2b5j83cXKro%2bteoK1/dgUpYD7gyMvxx71wOpWA7XVIzx7F2PPSbGyF2GNx6scn9dj3N/y8eRNiKfEL5se5l%2bFWH/rYvnlETb2mlh%2b08L2QQdvKao047KiA4oiN8bXfWmiWBftuq/6zv%2bkA8rDnmAwjE%2byhUw8B7aaVhStHio8O7RO0EJDt8ZD9t3LCw5GH3dwc9nF5JpDdDC60ML07w7eUhG%2baQl06b3VF21MLLVwY8VFbdvH7VWXjoiM0ZMbHqaIuZ3AjBrTdMDymw5%2b3TzAvWd1zG018eRVm2MLu02rBmWF/YwO2GxYJfiqA2O8Fne2DvylCCidYMeElbTTU4P6Xi1/tbQ0xY55q3M5Zsg2ye6Bk1EOZzQ0R5eCpM19gMfw8b2Y0phSuMPUoOzV95X7CoeKSvAZsiKDC2kZi%2bhghxU5DHS%2bBwYqZ4Fi3gsRsfNUCp%2b0Kaf3Arr660KuSdM1qxRC8lNSuNqqBltp9Gq17G%2bDdVfThcyChnBSO8Fcx7ZY8HfKBSRsQwn7ot0O662wsPBjJH6INKYjUs1c8YE9ANOLbTLg1tl1XdaVwGyJDUzOW9U3qPoD4%2b122P5fQNWqa9h%2bt6oEKxFQ3Roef2lQ3T5qlWhfiDDcFdNCJbl674WJ3jQrs20ut6H6enMP8ySOc4MkFkoQacQxjAxi3%2bcYqjRJVJam9sULd15JxO1y5NEuhp9MzPbXQlhIDVpY2QbDrEJV1q%2bO2XEsxt/bDv/pR4etDn29F4iT1GxX3yOtX0RLZGQxYe9MqRM0MuqEVGQEc5XIqRRlyp2dSMyLkIJhnSeE0L2LzBYsbLntLqpILUyoZ6bX0/AB6xXmB9H86Xc9J/7slVg1EjQzbHVkMlHcov4hAo7frxSNVxRIKs8lUVhkPOZ8RtmoIXnMCbLM/yuY8Bq5hSrBOfOyQ48Fr5flS4/CxJ3Zxai%2bjOkfV5Z2LAqqr8T%2bD9cnHEPe4u/6AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"date":"June 30. 2020","timeToRead":11,"cjkWordCount":2702,"cjkReadTime":9,"description":"赶在上半年的最后半小时发布了 6 月唯一一篇更新：利用 GitHub Actions 定时执行 Python / Ruby 打卡代码。","content":"<p>昨天逛博客看到了使用 GitHub Actions 定时调用 Microsoft 365 E5 API 以帮助续订的文章，我转念一想这是不是也可以用来跑定时任务打卡呢？说干就干我开了一个小的坑：用 GitHub Actions 跑之前写的 Python 打卡脚本。无意薅羊毛，只是希望通过一点学习将自己的想法实现。</p>\n<h2 id=\"照葫芦环节\"><a href=\"#%E7%85%A7%E8%91%AB%E8%8A%A6%E7%8E%AF%E8%8A%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>照葫芦环节</h2>\n<p>参考项目 <a href=\"https://github.com/wangziyingwen/AutoApiSecret\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@wangziyingwen/AutoApiSecret</a> 的 <a href=\"https://github.com/wangziyingwen/AutoApiSecret/blob/master/.github/workflows/autoapi.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">autoapi.yml</a>，搞懂了这一流程：</p>\n<ol>\n<li>将私密信息存于仓库 Secrets，以 <code>name=value</code> 的赋值语句格式定义</li>\n<li>将 Secrets 内容写入脚本复制来的临时文件</li>\n<li>执行填入了 Serects 的临时文件</li>\n<li>删除所有临时文件并提交历史记录</li>\n</ol>\n<p>「定时」这一特性是 GitHub Actions 提供的，在触发条件中定义 <code>on.schedule.cron</code> 即可！呐噜吼多！将 Secrets 写入文件是通过 Linux 命令 <code>sed</code> 实现的，比如使用 <code>sed -i '10 r tmp.txt' tmp.py</code> 可以将 <code>tmp.txt</code> 的内容写入了 <code>tmp.py</code> 的指定行 <code>10</code> 的下一行。对 Linux 命令的认知水平停留在 <code>rm -rf</code> 的我大吃一惊，呀，又学到了新知识！</p>\n<h2 id=\"画瓢环节\"><a href=\"#%E7%94%BB%E7%93%A2%E7%8E%AF%E8%8A%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>画瓢环节</h2>\n<p>此刻，白嫖是第一生产力。了解了这样的流程部署自己的自动打卡（让 GitHub 定时执行 <code>python checkin.py</code>）就不是什么难事了。</p>\n<details><summary><strong>照葫芦画瓢 python.yml 第一版</strong></summary><br />\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Auto Checkin\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">release</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>published<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># Coordinated Universal Time (UTC)</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0 0 * * *'</span>           <span class=\"token comment\"># 定时任务实现方式</span>\n  <span class=\"token key atrule\">watch</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>started<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.repository.owner.id == github.event.sender.id  <span class=\"token comment\"># 仅自己点的 star 触发</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Python Setup\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.8</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Pip Cache             <span class=\"token comment\"># 按照官方仓库 @actions/cache 添加</span>\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ~/.cache/pip        <span class=\"token comment\"># Ubuntu 的缓存位置，不同系统不同位置需要修改</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>pip<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/requirements.txt')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>pip<span class=\"token punctuation\">-</span>\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Addons Install        <span class=\"token comment\"># 安装脚本必须组件 lxml requests</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pip install lxml requests\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Secrets Get           <span class=\"token comment\"># 获取 Secrets</span>\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span> \n          <span class=\"token key atrule\">SECRET_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_PASS</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_PASS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_BOUND</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_BOUND <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_DATA</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_DATA <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># 先复制一个临时文件，然后写入 Secrets 到文本，再将其写入临时脚本文件指定行</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"> \n          cp checkin.py action.py\n          echo $SECRET_ID > action-id.txt\n          echo $SECRET_PASS > action-pass.txt\n          echo $SECRET_BOUND > action-bound.txt\n          echo $SECRET_DATA > action-data.txt\n          sed -i '19 r action-id.txt' action.py\n          sed -i '20 r action-pass.txt' action.py\n          sed -i '21 r action-bound.txt' action.py\n          sed -i '22 r action-data.txt' action.py</span>\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkin Action\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai         <span class=\"token comment\"># 设定时区为北京时间</span>\n        <span class=\"token comment\"># 工作流过程中新建 log 文件夹存放待会发布到另外一个分支的内容</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"> \n          mkdir log\n          echo `date +\"%Y-%m-%d %H:%M:%S %A\"` >> log/time.log\n          python action.py >> log/time.log</span>\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Secrets Delete        <span class=\"token comment\"># 删除临时文件</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> rm <span class=\"token punctuation\">-</span>f action*\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy Log            <span class=\"token comment\"># 发布 log 文件夹下的记录文件到 log 分支</span>\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">:</span>//peaceiris/gh<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">:</span>v2\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">PUBLISH_BRANCH</span><span class=\"token punctuation\">:</span> log\n          <span class=\"token key atrule\">PUBLISH_DIR</span><span class=\"token punctuation\">:</span> ./log\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">emptyCommits</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>第一版的工作流程看起来有点臃肿，不过管他呢，能用。</p>\n<h2 id=\"润色\"><a href=\"#%E6%B6%A6%E8%89%B2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>润色</h2>\n<p>写完第一份工作流文件之后，我开心地将文件提交到了 GitHub 仓库，又煞有介事地写了份文档。但是坐下来反复看自己的代码之后，我越发觉得这过于粗糙。在博客的文章收到了大佬的指导，于是我有了新的思路并开始不断地给自己的代码「润色」。</p>\n<h3 id=\"round-1\"><a href=\"#round-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Round 1</h3>\n<p>简单地实现定时任务似乎并不值得记录，于是我顺便给这个工作流引入了 pip 模块缓存、发布日志文件到分支这两个小功能，算是补上了之前折腾工作流学到的。</p>\n<ul>\n<li>\n<p><strong>pip 模块缓存</strong></p>\n<p>这是从苏卡大大《<a href=\"https://blog.skk.moe/post/deploy-blog-to-cf-workers-site\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录 - Sukka's Blog</a>》中学到的。Node.js 项目构建时需要的依赖挺多，没有缓存的话每次 GitHub Action 得跑很长分钟，于是他给出了缓存 node_modules 的办法： <code>uses: actions/cache@v2</code> ，通过检查缓存特征 Key 是否存在，比如 Node.js 就检测是否存在 <code>package-lock.json</code> 文件，进而处理缓存。</p>\n<p>GitHub Actions 使用这一特性其实很简单，只要按照 <a href=\"https://github.com/actions/cache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@actions/cache</a> 中需要缓存的类型确定好监测的特定路径和文件，编写类似上方 L26-31 的步骤在安装依赖前即可。之前尝试是能将用于构建并发布站点的 2 mins 工作流优化到 1 min 多，提升还是蛮大的。</p>\n<p>在这个项目中缓存 pip 模块需要做的就是照葫芦画瓢检查 <code>~/.cache/pip</code> 目录下 <code>requirements.txt</code> 文件。</p>\n</li>\n<li>\n<p><strong>发布 log 记录文件到分支</strong></p>\n<p>这是从 Typecho-Theme-VOID 二次开发过程中学到的。它的 Actions 将编译好的文件存放在 build 文件夹然后发布到 nightly 分支。仅需在 workflows 中给 <code>uses: docker://peaceiris/gh-pages:v2</code> 添加两个环境变量 <code>PUBLISH_BRANCH</code> 和 <code>PUBLISH_DIR</code> 即可，v3 版本这一配置从 <code>env</code> 改为了 <code>with</code> 字段，具体可以看 <a href=\"https://github.com/peaceiris/actions-gh-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@peaceiris/actions-gh-pages</a>。</p>\n</li>\n<li>\n<p><strong>邮件</strong></p>\n<p>启用 GitHub Actions 后我将 Python 中的 SMTP 配置删除了，这原本是用来在服务器部署时完成任务后发送提醒的。我想只要开启 GitHub 工作流的运行提醒就好啦，后来意识到虽然 GitHub Actions 自身有邮件提醒，但它提醒的是工作流执行状况，并不能等价于打卡脚本的执行状态。这一点还有待优化。毕竟配置起来如果像上面一样一条一条添加 Secrets 的话就太繁琐了。</p>\n</li>\n<li>\n<p><strong>微信提醒</strong></p>\n<p>由于 GitHub Actions 部署邮件提醒不方便，我找到了微信提醒的工具 Server 酱，在 Python 中使用 requests 库发送请求即可触发微信提醒，结合程序执行结果可以更加完美的推送打卡提醒；Ruby 不会写，我就直接从 Actions 执行时由命令行 <code>curl</code> 发送请求了，这些代码十分粗糙，放在了仓库 personal 分支下。</p>\n</li>\n</ul>\n<h3 id=\"round-2\"><a href=\"#round-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Round 2</h3>\n<p>也许看官早就想说了：为什么引用 Secrets 而已，又是设置环境变量、又是将环境变量 <code>echo</code> 到 <code>.txt</code> 文件、又是将 <code>.txt</code> <code>sed</code> 写入 <code>.py</code> 的，不能简单点吗？确实，在朋友 <a href=\"https://xyenon.bid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@XYenon</a> 的指导下我得知 Python 可以通过 <code>os.environ</code> 读取环境变量，所以简单的办法来了，将 Python 脚本中原来的赋值改写成下面的格式直接读环境变量</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\nmyid <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ <span class=\"token punctuation\">[</span><span class=\"token string\">'SECRET_ID'</span><span class=\"token punctuation\">]</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<p>直接读入环境变量 <code>SECRET_ID</code> 的值并赋给 <code>myid</code> 。如此一来，上面 Secrets Get、Checkin Action、Secrets Delete 三步合并为一步：</p>\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Action Execute\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n    <span class=\"token key atrule\">SECRET_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">SECRET_PASS</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_PASS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">SECRET_BOUND</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_BOUND <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">SECRET_DATA</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_DATA <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> python checkin.py <span class=\"token punctuation\">|</span> tee <span class=\"token punctuation\">-</span>a checkin<span class=\"token punctuation\">-</span>python.log<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>心情顿时舒畅了不少！</p>\n<h3 id=\"round-3\"><a href=\"#round-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Round 3</h3>\n<p>上次那篇关于调试 Python 打卡的《<a href=\"https://blog.monsterx.cn/code/heu-auto-checkin-covid19/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mark 并调试 HEU 自动打卡代码</a>》下 <a href=\"https://xyenon.bid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@XYenon</a> 给出了仅需用户名和密码的 Ruby 版本 <a href=\"https://gist.github.com/XYenon/79317d63e7f769e5bdff5b595d709b65\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@XYenon/checkin.rb</a>。</p>\n<p>代码仅 60 行，第一次看完我觉得很赞，看起来只要脚本代替人执行「确认信息 -> 提交表单」两步就完事了。现有的 Python 打卡每次都将事先定义的表单数据提交一遍，不考虑打卡系统中表单在服务器的缓存。如果表单数据在服务器上一直都有缓存，那部署这个 Ruby 版本我觉得似乎会更好，毕竟仓库里可以少写两个 Secrets。</p>\n<blockquote>\n<p>与 Python 类似，Ruby 也可以在代码中使用 <code>ENV['SECRET_ID']</code> 这样的语句直接获取环境变量。</p>\n</blockquote>\n<p>实际调试的时候，我发现这看起来简单的代码部署起来也不容易…… Ruby 使用 webdrivers 库来在终端驱动一个 headless Chrome 浏览器，然后执行动作。抛开因为不熟悉 Ruby + webdrivers 这套环境使我在 GitHub Actions 工作流写法上花的时间，这个脚本跑起来效率也比较低，Python 直白地提交表单整个工作流程需要 30 秒左右，而 Ruby 模拟 Chrome 操作花了三分钟多。是为了更快的 workflow 选择 Python 打卡呢？还是为了更快的部署选择 Ruby 打卡呢？</p>\n<p>经过多方搜索我使用了这样的 GitHub Actions 环境跑 Ruby + Watir + webdrivers 代码，不知道有没有更好的方式，贴在这里供大家参考：</p>\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token comment\"># 运行 headless chrome 的服务</span>\n    <span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">hub</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> selenium/hub<span class=\"token punctuation\">:</span>3.141.59<span class=\"token punctuation\">-</span>gold\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">SELENIUM_HUB_HOST</span><span class=\"token punctuation\">:</span> localhost\n      <span class=\"token key atrule\">chrome</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> selenium/node<span class=\"token punctuation\">-</span>chrome<span class=\"token punctuation\">:</span>3.141.59<span class=\"token punctuation\">-</span>gold\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">HUB_HOST</span><span class=\"token punctuation\">:</span> localhost\n          <span class=\"token key atrule\">HUB_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9515</span>\n    \n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.repository.owner.id == github.event.sender.id\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Ruby Setup\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>ruby@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ruby-version</span><span class=\"token punctuation\">:</span> 2.5.x\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Addons Install\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> gem install watir webdrivers\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Action Execute\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n          <span class=\"token key atrule\">LANG</span><span class=\"token punctuation\">:</span> zh_CN.UTF<span class=\"token punctuation\">-</span><span class=\"token number\">8</span>\n          <span class=\"token key atrule\">SECRET_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_PASS</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_PASS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ruby checkin.rb <span class=\"token punctuation\">|</span> tee <span class=\"token punctuation\">-</span>a checkin<span class=\"token punctuation\">-</span>ruby.log<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>也许 Ruby 版本的打卡程序更适合写成 JavaScript 用户脚本交给浏览器插件执行。</p>\n</blockquote>\n<h2 id=\"结语\"><a href=\"#%E7%BB%93%E8%AF%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>结语</h2>\n<p>GitHub 仓库地址 <a href=\"https://github.com/monsterxcn/HEU-Checkin-COVID-19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/HEU-Checkin-COVID-19</a>。如果仓库说明仍未找到你需要的部署过程，可以参考以下我的另外一篇文章《<a href=\"https://blog.monsterx.cn/code/heu-auto-checkin-covid19/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mark 并调试 HEU 自动打卡代码</a>》</p>\n<p>我原以为在 GitHub Actions 中实现定时任务要很复杂的配置，毕竟每次工作流都是相当于在一个全新的服务器上执行。现在发现原来定时任务只需要在工作流的触发事件中写入 <code>schedule</code> 即可。在查找文档时我发现这点在官方文档中有详细说明，害，都是不会看文档惹的祸。</p>\n<p>榆木脑袋的我在看到别人的代码之前总是从没想过可以这样实现。比如：将私密信息以赋值语句形式写入仓库设置，执行 GitHub Actions 时将赋值语句插进文件头部继续执行。甚是高明（虽然到后面我发现这也挺笨的）。剖析了我的不足之处，浅层来看最重要的两点估计就是：</p>\n<ul>\n<li>我对仓库 Secrets 设置的认识是死板的，我一直将其当作 GitHub Actions 执行时传递普通变量值的纽带，仅此而已</li>\n<li>不熟悉 Linux命令，虽然日常 Copy 到命令行的 Linux 命令中也有用到过 <code>sed</code>，但我并没有积极的学习</li>\n</ul>\n<p>深层次的原因嘛，大概是怠惰吧！</p>\n<p>GitHub Actions 妙用多多，之前关注过一个博客 <a href=\"https://p3terx.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@P3TERX ZONE</a> 里写了挺多关于 GitHub Actions 的文章，有时间的话要去学习学习！</p>\n"}}]}}},"context":{}}