{"hash":"e8b353b2ca9703e8f4d015acaca05f979017da81","data":{"category":{"title":"code","belongsTo":{"edges":[{"node":{"title":"过时的 NoneBot2 插件编写心得","path":"/code/outdated-tips-4-nonebot-2/","cover_image":null,"date":"July 16. 2022","timeToRead":29,"cjkWordCount":6965,"cjkReadTime":22,"description":"使用基于 NoneBot2 和 go-cqhttp 的 QQ 机器人已经有一年多了，分享一些插件编写的入门心得。","content":"<p><a href=\"https://github.com/nonebot/nonebot2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nonebot/nonebot2</a> 是一款跨平台 Python 异步聊天机器人框架。我已经不太记得第一次使用它是出于什么缘由了，当时凭借着薄弱的 Python 基础，跟着 <a href=\"https://61d3d9dbcadf413fd3238e89--nonebot2.netlify.app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alpha 版本官方文档</a> 的示例就开始编写插件…… 就这样一直到了今天，动手实现的功能估摸着有十数个了。这些插件有很多共同点，实际上一个模板就能批量生产出许多类似功能的插件。我觉得也许记下来是有价值的。</p>\n<p>由于我疏于学习 NoneBot2 的新特性，一直停留在 <code>2.0.0.a16</code> 版本（NoneBot2 Alpha 阶段的最后一个版本），编写的插件也只保证了在此版本的可用性。而 NoneBot2 进入 Beta 阶段以来，在适配器、依赖注入等诸多方面有了很多新的特性，导致原先 Alpha 版本插件的一些写法过时。不过这对本文的大部分内容应该没有影响。</p>\n<h2 id=\"利用-httpx-获取数据\"><a href=\"#%E5%88%A9%E7%94%A8-httpx-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 HTTPX 获取数据</h2>\n<p><a href=\"https://github.com/encode/httpx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@encode/httpx</a> 是 Python 3 的全功能 HTTP 客户端，提供了同步和异步 API，并支持 HTTP/1.1 和 HTTP/2。其 <a href=\"https://www.python-httpx.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a> 提供了详细的使用说明。</p>\n<p>HTTPX 是获取数据的工具，数据的源头则是应用编程接口（Application Programming Interface, API），如 <a href=\"https://github.com/mixmoe/HibiAPI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@mixmoe/HibiAPI</a>、<a href=\"https://tenapi.cn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ten▪Api</a>、<a href=\"https://github.com/genshindev/api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@genshindev/api</a> 等公开可用的 API。一般来说使用诸如「应用名称+API」的关键词搜索就能找到现成的接口，如果没有，那么也可以尝试通过抓包等方式获取 API 地址。以上所说的 API 通常是通过向固定的网址发送 HTTP 请求获取返回数据的。</p>\n<p>获取数据的函数一般定义在 <code>data_source.py</code> 文件中，比如我经常这样写：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> AsyncClient\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n\nresPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/monsterx/.cache/bot/\"</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    api <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"https://api-static.mihoyo.com/common/\"</span>\n        <span class=\"token string\">\"blackboard/ys_obc/v1/get_activity_calendar\"</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 请求 API</span>\n        res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"app_sn\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ys_obc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        resJson <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将 API 返回缓存到本地文件</span>\n        cacheThis <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">raw.json\"</span></span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cacheThis<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resJson\n    <span class=\"token keyword\">except</span> json<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>JSONDecodeError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"解析 API 返回出错 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个例子在网址中携带查询参数 <code>app_sn=ys_obc</code> 向 API 发起了 GET 请求，并将请求结果缓存到本地文件。如何从 API 获取数据需要根据 API 说明修改 L17 的请求方式、请求头、请求正文、是否跟随重定向等，常见情况在《<a href=\"https://www.python-httpx.org/quickstart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">QuickStart - HTTPX</a>》中均可以找到示例，HTTPX 的具体用法也应该从该文档查阅。</p>\n<p>HTTPX 除了像上面这样从 API 获取字典格式的数据外，还常结合 <a href=\"https://pillow.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pillow</a> 库用来获取图片：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Union\n\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\nresPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/monsterx/.cache/bot/\"</span>\n\n\n<span class=\"token comment\"># 获取图片 Image.Image</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">pic2Image</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span>Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    localPic <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">material/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">.png\"</span></span>  <span class=\"token comment\"># 根据输入 name 确定本地文件路径</span>\n    <span class=\"token keyword\">if</span> Path<span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>is_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果本地文件存在则直接打开</span>\n        userImage <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 本地文件不存在则使用输入 url 下载</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 将请求返回的数据作为图片保存到本地文件</span>\n                userImage <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>BytesIO<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                userImage<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">,</span> quality<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"下载图片 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 出错 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                userImage <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token comment\"># 返回 URL 图片的 Image 对象</span>\n    <span class=\"token keyword\">return</span> userImage<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>绘制原神角色卡片时，有些新角色的图片本地并不存在，但是通过相关接口可以获取到该图片链接。这时我就会使用上面这段函数，在第一次用到这张图片时将其从远程下载到本地，后续直接使用本地文件。</p>\n<h2 id=\"利用-playwright-获取数据\"><a href=\"#%E5%88%A9%E7%94%A8-playwright-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 Playwright 获取数据</h2>\n<p>有时，数据的提供者采用复杂的加密手段阻止接口被第三方调用，<del>亦或是插件编写者懒得查找接口从源头处理数据，</del> 那么 <a href=\"https://github.com/microsoft/playwright-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@microsoft/playwright-python</a> 库是一个不错的选择。Playwright 是一个跨浏览器、跨平台、跨语言的自动化测试工具，在编写插件时可以利用其模拟浏览器操作来获取数据。</p>\n<p>Playwright 之于 Python，就如 <a href=\"https://github.com/puppeteer/puppeteer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@puppeteer/puppeteer</a> 之于 Node.js。在著名 RSS 生成器项目 <a href=\"https://github.com/DIYgod/RSSHub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@DIYgod/RSSHub</a> 的《<a href=\"https://docs.rsshub.app/joinus/quick-start.html#ti-jiao-xin-de-rsshub-gui-ze-bian-xie-jiao-ben-huo-qu-yuan-shu-ju\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">参与我们 - RSSHub</a>》文档中介绍了三种获取数据方法的推荐优先级：</p>\n<blockquote>\n<ol>\n<li>使用 got 从接口获取数据</li>\n<li>使用 got 从 HTML 获取数据</li>\n<li>使用 puppeteer 渲染页面获取数据</li>\n</ol>\n</blockquote>\n<p>其中使用 HTTPX 请求 API 返回数据的方式与上面的 1 类似，是最为推荐的。而使用 Playwright 则相当于上面的 3，这种方式性能较差且消耗较多资源（因为需要额外的浏览器进程），一般来讲是最不推荐的。</p>\n<blockquote>\n<p>通过 <code>pip install playwright</code> 安装 Playwright 库后，还需要执行 <code>playwright install-deps &#x26;&#x26; playwright install</code> 安装浏览器必需组件。</p>\n</blockquote>\n<p>抛开性能不谈，使用 Playwright 获取数据的代码从某种程度上来说可能更直白，比如像这样：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> playwright<span class=\"token punctuation\">.</span>_impl<span class=\"token punctuation\">.</span>_api_types <span class=\"token keyword\">import</span> TimeoutError <span class=\"token keyword\">as</span> PlaywrightTimeoutError\n<span class=\"token keyword\">from</span> playwright<span class=\"token punctuation\">.</span>async_api <span class=\"token keyword\">import</span> async_playwright\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getChim</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    url <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"https://www.laohuangli.net/zhuge/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">.html\"</span></span>\n    <span class=\"token comment\"># 定义所需内容的 CSS 选择器</span>\n    contentSelector <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"body > div > table:nth-child(5) > tbody > tr > td > div > table:nth-child(5)\"</span>\n        <span class=\"token string\">\" > tbody > tr > td > div > table > tbody > tr > td:nth-child(1) > div\"</span>\n    <span class=\"token punctuation\">)</span>\n    fortuneSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > b\"</span>\n    trigramSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(2)\"</span>\n    poemSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(4) > span\"</span>\n    intpnOneSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(6)\"</span>\n    intpnTwoSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(7)\"</span>\n    detailSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(9)\"</span>\n    <span class=\"token comment\"># 使用 Playwright 获取数据</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> async_playwright<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> p<span class=\"token punctuation\">:</span>\n        browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p<span class=\"token punctuation\">.</span>chromium<span class=\"token punctuation\">.</span>launch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打开浏览器</span>\n        page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>new_page<span class=\"token punctuation\">(</span>viewport<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1080</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 新建标签页</span>\n        <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>goto<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> wait_until<span class=\"token operator\">=</span><span class=\"token string\">\"networkidle\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打开网址</span>\n        title <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 页面标题</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\" 诸葛测字算命 老黄历网\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 等待内容加载</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>wait_for_selector<span class=\"token punctuation\">(</span>contentSelector<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> PlaywrightTimeoutError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"获取内容失败\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获取内容的 ElementHandle</span>\n        content <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span>contentSelector<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> content <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># 断言内容存在，阻止类型检查报错</span>\n        <span class=\"token comment\"># 定义结果字典和其中各部分对应的选择器</span>\n        result<span class=\"token punctuation\">,</span> dataMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> fortuneSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"fortune\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"诸葛神算第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">签\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> trigramSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"trigram\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> poemSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"poem\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> intpnOneSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"intpnOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"解签一：\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> intpnTwoSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"intpnTwo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"解签二：\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> detailSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"detail\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"详解\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 循环填充结果字典</span>\n        <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> dataMap<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 获取内容的 ElementHandle，确保其存在</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> content<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">assert</span> value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>PlaywrightTimeoutError<span class=\"token punctuation\">,</span> AssertionError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"获取</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">失败\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token comment\"># 将元素的 innerText 填充到结果字典</span>\n            result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> value<span class=\"token punctuation\">.</span>inner_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 根据需要对直接取得的结果额外处理，比如去除空格</span>\n            <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"trigram\"</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 关闭浏览器，释放资源</span>\n        <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 返回结果</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是我从 <a href=\"https://www.laohuangli.net/zhuge/1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">老黄历网</a> 获取三百八十四诸葛神算签的数据时写的，稍微改造一下就能抓取所有签文信息（所以说拿 Playwright 做小数据爬虫其实也可行）。代码看起来长了些，但实际上按照注释解读一下是没什么技术含量的。如果安装了 Visual Studio Code 的 Python 插件，将鼠标放在函数名称上就能显示出所有可用的参数和意义，对代码的理解应该会有很大帮助。</p>\n<p>这段代码中首先启动浏览器进程（L23）、然后创建新标签页（L24）、最后在新标签页中打开网址（L25）。后面则是处理 HTML 内容，需要有一定 CSS/JavaScript 基础，Playwright 的许多方法名跟原生 JavaScript 一致，对于吃前端饭的大佬应该比较容易上手。总之利用好 <a href=\"https://playwright.dev/python/docs/intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a> 会对写代码帮助非常大。</p>\n<p>这一部分的最后是我写了一些 Playwright 的代码后的心得：</p>\n<ol>\n<li>在打开网址时根据需要选择 <code>page.goto()</code> 的 <code>wait_until</code> 参数，这里用的 <code>networkidle</code> 即等待所有网络请求结束，适合有大文件需要加载的场合。</li>\n<li>在使用 <code>page.query_selector()</code> 类似的函数获取 ElementHandle 对象时，经常出现无法获取到对应选择器的错误，导致程序将很多时间花在等待上。可以尝试利用 L28-32 的异常处理、合理选择 <code>timeout</code> 等待超时参数来搞定它。</li>\n<li><code>element_handle.scroll_into_view_if_needed()</code> 可以将元素滚动到视图内，在一些采用了懒加载（Lazyload）的网页上可能有帮助，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/api/class-elementhandle#element-handle-scroll-into-view-if-needed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>如果 JavaScript 对你来说更加熟悉，那么 <code>element_handle.eval_on_selector()</code> 是个好东西，它能帮你模拟在控制台执行 JavaScript，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>很多时候一个 CSS 选择器对应的元素不止一个，这时可以用 <code>element_handle.query_selector_all()</code>，对应 JavaScript 里的 <code>Element.querySelectorAll()</code>，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector-all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>使用定位器 <code>page.locator()</code> 也许可以简化对具有相同 CSS 选择器的一组元素的操作，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/locators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>及时使用 <code>page.close()</code> 关闭标签页，使用 <code>browser.close()</code> 关闭浏览器进程。</li>\n</ol>\n<p><del>在 Gist 我还存放了一些关于 Playwright 有趣的用法</del></p>\n<h2 id=\"利用-pillow-绘制图片\"><a href=\"#%E5%88%A9%E7%94%A8-pillow-%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 Pillow 绘制图片</h2>\n<p>使用机器人高频发送大段文字可能导致封号、直接发送文字消息排版不易，所以很多时候发送图片是更好的选择。Python 绘图的一种方法是使用 <a href=\"https://github.com/python-pillow/Pillow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@python-pillow/Pillow</a> 库（对于数据统计之类图表绘制来说推荐使用 <a href=\"https://github.com/matplotlib/matplotlib\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@matplotlib/matplotlib</a>）。</p>\n<p>Pillow 绘图一般至少需要两个参数，其中一个是坐标，另一个是待绘制的内容（可以是文字，也可以是另一张图片）。将一张图片的左上角作为原点，以水平向右为横轴 x 坐标轴，以水平向下为纵轴 y 坐标轴，便可以确定图片中每个像素点的坐标。下面列出一些常用的代码，更多的绘制方法就需要根据 <a href=\"https://pillow.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a> 学习了。</p>\n<ol>\n<li>图片基本操作</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageDraw<span class=\"token punctuation\">,</span> ImageFont\n\n\n<span class=\"token comment\"># 设置 Pillow 绘制字体</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">font</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/font/zh-cn.ttf\"</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>size<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 新建颜色模式 RGBA、宽 500 高 600、背景颜色 #393B40 的图片</span>\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#393B40\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 打开现有图片</span>\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/pic/avatar.png\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将图片颜色模式转换到 RGBA</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 使用抗锯齿重采样过滤器（resampling filter）将图片缩放到宽 70 高 70</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 从图片 img 中裁减坐标 xy(20, 30) 到坐标 xy(80, 100) 范围内图像</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将图片顺时针旋转 45 度</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将图片左右翻转 / 上下翻转</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>Transpose<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">)</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>Transpose<span class=\"token punctuation\">.</span>FLIP_TOP_BOTTOM<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 在图片 img 上粘贴图片 anotherImg，粘贴后 anotherImg 左上角位于 img 的 xy(30, 50)</span>\nimg<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>anotherImg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> anotherImg<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>常用几何图形的绘制：</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 使用颜色模式 RGBA 在图片 img 上绘制</span>\ndraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 在坐标 xy(0, 0) 到坐标 xy(100, 100) 范围内</span>\n<span class=\"token comment\"># 绘制边框宽度 1 边框颜色 #000000 填充颜色 #ffffff 的圆形</span>\ndraw<span class=\"token punctuation\">.</span>ellipse<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span> outline<span class=\"token operator\">=</span><span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 在坐标 xy(0, 1) 到坐标 xy(100-1, 200-1) 范围内</span>\n<span class=\"token comment\"># 绘制边框宽度 1 边框颜色 #000000 填充颜色 #ffffff 的矩形</span>\ndraw<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span> outline<span class=\"token operator\">=</span><span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制圆角矩形，和前面矩形只差 radius=20 的圆角</span>\ndraw<span class=\"token punctuation\">.</span>rounded_rectangle<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span> outline<span class=\"token operator\">=</span><span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>字符串的绘制</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 使用颜色模式 RGBA 在图片 img 上绘制</span>\ndraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 以坐标 xy(20, 30) 为待绘制字体的左上角绘制颜色 #ffffff 字号 26 的字符串 Hello</span>\ndraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 字符串居中绘制时，需要根据显示位置和字体尺寸计算绘制起点</span>\n<span class=\"token comment\"># 如下表示需要在坐标 xy(30, 20) 到坐标 xy(100, 60) 确定的矩形范围内居中绘制</span>\nfontW<span class=\"token punctuation\">,</span> fontH <span class=\"token operator\">=</span> font<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>\ntextCenter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fontW<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fontH<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\ndraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>textCenter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"4\">\n<li>\n<p>矩形图像添加圆角</p>\n<p>只要随便一搜就会看见这样的代码：创建透明正方形图片 A，在 A 上绘制不透明正圆形；创建与待添加圆角图像等大的不透明图片 B，将图像 A 分割为四角分别粘贴；将 B 作为待添加圆角图像的 Alpha 通道。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 图片圆角处理</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">circleCorner</span><span class=\"token punctuation\">(</span>markImg<span class=\"token punctuation\">:</span> Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">:</span>\n    markImg <span class=\"token operator\">=</span> markImg<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n    w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> markImg<span class=\"token punctuation\">.</span>size\n    <span class=\"token comment\"># 创建透明正方形图片 A，其边长为 radius * 2</span>\n    circle <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 在 A 上绘制不透明正圆形，其半径为 radius</span>\n    draw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">)</span>\n    draw<span class=\"token punctuation\">.</span>ellipse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建与待添加圆角图像等大的不透明图片 B</span>\n    alpha <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">,</span> markImg<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 将图像 A 分割为四角分别粘贴</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>\n        circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>w <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">,</span> h <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 将 B 作为待添加圆角图像的 Alpha 通道</span>\n    markImg<span class=\"token punctuation\">.</span>putalpha<span class=\"token punctuation\">(</span>alpha<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> markImg\n\n<span class=\"token comment\"># 在图片 img 上粘贴图片 anotherImg</span>\n<span class=\"token comment\"># 和前面粘贴区别在于 anotherImg 四角为 radius=30 的圆角</span>\nanotherImg <span class=\"token operator\">=</span> circleCorner<span class=\"token punctuation\">(</span>anotherImg<span class=\"token punctuation\">,</span> radius<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nimg<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>anotherImg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> anotherImg<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这些代码基本搞定了我的插件 Pillow 绘图需求，还有很多高级功能我都没有用到。如果有相关需求，我十分推荐前往 <a href=\"https://github.com/MeetWq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@MeetWq</a> 开发的插件中学习，比如 <a href=\"https://github.com/noneplugin/nonebot-plugin-petpet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@noneplugin/nonebot-plugin-petpet</a>、<a href=\"https://github.com/noneplugin/nonebot-plugin-memes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@noneplugin/nonebot-plugin-memes</a>。</p>\n<h2 id=\"利用-playwright-渲染图片\"><a href=\"#%E5%88%A9%E7%94%A8-playwright-%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 Playwright 渲染图片</h2>\n<p>Pillow 的功能已经十分强大，但是我觉得它的代码写起来有些枯燥且繁琐，于是对于稍微复杂的图片绘制我都会逃避使用 Pillow，而是选择 Playwright。Playwright 作为自动化测试工具，除了前面介绍的用法也可以用来渲染本地 HTML 文件并进行截图。</p>\n<p>Playwright 提供了全屏截图和元素截图，用法如下：</p>\n<ol>\n<li><a href=\"https://playwright.dev/python/docs/screenshots#full-page-screenshots\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">全屏截图</a></li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 对标签页 page 打开的网页进行全屏截图</span>\n<span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"screenshot.png\"</span><span class=\"token punctuation\">,</span> full_page<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li><a href=\"https://playwright.dev/python/docs/screenshots#element-screenshot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">元素截图</a></li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 对 CSS 选择器 .class 对应元素进行截图</span>\n<span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>locator<span class=\"token punctuation\">(</span><span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"screenshot.png\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 对一个已有的 ElementHandle 进行截图</span>\n<span class=\"token keyword\">await</span> element_handle<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"screenshot.png\"</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述代码都将截图写入文件，有时不希望如此，可以使用缓冲区（buffer）：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n\n<span class=\"token comment\"># 截图为 Image.Image 对象</span>\nscreenshot_bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nimage <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>BytesIO<span class=\"token punctuation\">(</span>screenshot_bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>利用 Playwright 渲染图片前，还需要创建渲染的 HTML 文件。我经常先创建一个 HTML 模板文件，其中待显示的内容用一串占位符代替；然后在 Python 中利用 <code>str.replace()</code> 将模板中的占位符替换为需要的内容，另存为临时文件；利用 Playwright 打开临时 HTML 文件，执行截图，完成后删除临时文件。这种完全手动编写 HTML 模板渲染的方式学习成本较低，但是在一些复杂的场合可能代码就不那么优雅了，这时可以考虑使用 <a href=\"https://github.com/pallets/jinja\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@pallets/jinja</a> 来创建 HTML 模板。Jinja2 是现代的、设计者友好的、仿照 Django 模板的 Python 模板语言，采用 Jinja2 创建模板并渲染的代码可以参考这份 <a href=\"http://docs.jinkan.org/docs/jinja2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非官方中文文档</a> 和一些 Nonebot2 插件。</p>\n<p>下面总结一下完全手动方式的代码流程。</p>\n<ol>\n<li>新建一个 HTML 模板文件 <code>tpl.html</code></li>\n</ol>\n<pre class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./tpl.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  <span class=\"token comment\">&lt;!-- 相对此文件的 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GenshinCN\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./zh-cn.ttf\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/** 相对此文件的 */</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GenshinCN\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#f0f0f0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\"><span class=\"token class\">.container</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">360</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token unit\">%</span> <span class=\"token operator\">-</span> <span class=\"token number\">150</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#e3d8aa</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token unit\">px</span> <span class=\"token number\">2</span><span class=\"token unit\">px</span> <span class=\"token number\">2</span><span class=\"token unit\">px</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>/<span class=\"token number\">20</span><span class=\"token unit\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        {{content}}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>\n<p>在 Python 中替换模板中的占位符，并另存新的临时文件</p>\n<p>注意临时文件命名最好具有唯一性，否则一段代码被多个 QQ 消息同时触发时，截图调用的临时文件错乱，最终消息响应结果就会出错。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 待显示内容预先处理</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token string\">\"what you get\"</span>\n<span class=\"token comment\"># 打开模板文件</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/tpl.html\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    template <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 替换占位符</span>\ntemplate <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"{{content}}\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 另存临时文件</span>\ntmp <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"/path/to/tpl.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>flag<span class=\"token punctuation\">}</span></span><span class=\"token string\">.html\"</span></span>  <span class=\"token comment\"># 最好使临时文件命名具有唯一性</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>\n<p>在 Python 中调用 Playwright 截图</p>\n<p>这里 <code>element_handle.screenshot()</code> 产生的截图不保存到文件，而是直接被转换为 Base64 编码字符串。发送图片时直接将图片 Base64 编码字符串传递给 nonebot2 的 <code>MessageSegment.image()</code> 即可。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64encode\n<span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n\n\n<span class=\"token comment\"># 运行 Playwright 截图</span>\n<span class=\"token comment\"># browser = await get_browser()</span>\n<span class=\"token comment\"># tmp = f\"/path/to/tpl.{flag}.html\"</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>new_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 新建标签页</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>set_viewport_size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设定视图大小</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>goto<span class=\"token punctuation\">(</span><span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> tmp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打开模板文件</span>\n    <span class=\"token comment\"># 使用 CSS 选择器指定截图对象并保证其加载</span>\n    card <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span><span class=\"token string\">\".container\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> card <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n    <span class=\"token comment\"># 截图并将图片转换为 Base64 编码字符串</span>\n    picBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> card<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"base64://\"</span> <span class=\"token operator\">+</span> b64encode<span class=\"token punctuation\">(</span>picBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关闭标签页</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"生成图片失败 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"生成图片失败！\"</span>\n<span class=\"token comment\"># 删除临时文件</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># 发送消息时</span>\n<span class=\"token keyword\">await</span> Matcher<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>\n    MessageSegment<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 为 Base64 字符串时调用 image</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"base64\"</span> <span class=\"token keyword\">in</span> res\n    <span class=\"token keyword\">else</span> MessageSegment<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 为普通字符串时调用 text</span>\n<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里 L7 使用了名为 <code>get_browser()</code> 的异步函数来获取浏览器对象，其具体代码可以参考 <a href=\"https://github.com/HibiKier/zhenxun_bot/blob/main/utils/browser.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@HibiKier/zhenxun_bot</a> 和 <a href=\"https://github.com/SK-415/HarukaBot/blob/master/src/plugins/haruka_bot/utils/browser.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@SK-415/HarukaBot</a>，其作用是：创建截图时，总是尝试在已有的浏览器进程中新建标签页，而不是另起一个全新的浏览器。这也是本段代码只在 L19 关闭了标签页而没有关闭整个浏览器的原因。</p>\n<h2 id=\"利用-json-缓存数据\"><a href=\"#%E5%88%A9%E7%94%A8-json-%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 JSON 缓存数据</h2>\n<p>为避免不必要的网络请求，浏览器通常都会使用 HTTP 缓存。如果一个网络请求存在匹配，则从缓存中读取响应，从而消除网络延迟和传输产生的数据成本。网站如此，机器人亦如此。除了从成本角度考虑，很多时候机器人频繁地请求 API 可能导致机器人 IP 被 API 服务器封禁、无法正常获取响应。此外，诸如米游社之类的某些接口本身也存在缓存，1 至 2 小时才会更新，没有总是实时请求的必要。</p>\n<p>为了合理地使用缓存我通常使用这样几个函数：</p>\n<ol>\n<li>\n<p>实时请求</p>\n<p>和第一部分利用 HTTPX 获取数据的函数相同，只是在写入缓存前添加了一个 <code>time</code> 字段记录缓存的时间。注意，如果后续单纯使用 <code>getData()</code> 不为空作为继续执行的条件将引起错误，可以根据需要使用 <code>Dict.get(\"data\")</code> 之类作为判断是否非空的对象。</p>\n<p>这里自行添加 <code>time</code> 字段其实感觉并不十分优雅，如果原返回包含时间信息，应该优先使用原返回中的时间信息。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> AsyncClient\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n\nresPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/monsterx/.cache/bot/\"</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    api <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"https://api-static.mihoyo.com/common/\"</span>\n        <span class=\"token string\">\"blackboard/ys_obc/v1/get_activity_calendar\"</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 请求 API</span>\n        res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"app_sn\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ys_obc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        resJson <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加缓存时间戳</span>\n        resJson<span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将 API 返回缓存到本地文件</span>\n        cacheThis <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">raw.json\"</span></span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cacheThis<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resJson\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"请求 API 出错 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>\n<p>缓存检查</p>\n<p>第一步缓存的字典内容具有 <code>time</code> 字段，判断其是否失效就好办多了，只需要将当前时间与缓存时间比较即可。我通常让缓存有效时返回缓存内容、缓存失效时返回空。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token comment\"># 检查缓存是否有效</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">cacheChecker</span><span class=\"token punctuation\">(</span>cacheFile<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> cacheTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 缓存文件不存在，返回空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Path<span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>is_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\"># 还存文件存在，判断时效</span>\n    timeNow <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 当前时间</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cacheFile<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        cache <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    timeCache <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 缓存时间</span>\n    <span class=\"token comment\"># 当前时间与缓存时间差值在指定范围内则缓存有效</span>\n    <span class=\"token keyword\">if</span> timeNow <span class=\"token operator\">-</span> timeCache <span class=\"token operator\">&lt;</span> cacheTime<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> cache  <span class=\"token comment\"># 缓存有效返回缓存内容</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 缓存失效返回空</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>\n<p>获取数据入口</p>\n<p>获取数据的入口需要合理地决定何时返回缓存、何时重新请求。我通常会传入一个 <code>force</code> 参数决定是否需要强制刷新。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 获取数据入口</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">dataEntrabce</span><span class=\"token punctuation\">(</span>force<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 缓存文件的路径，与第 1 步实时请求后缓存文件命名规则相同</span>\n    cacheFile <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">raw.json\"</span></span>\n    <span class=\"token comment\"># 检查缓存，要求强制刷新时与缓存失效效果相同（返回空）</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> cacheChecker<span class=\"token punctuation\">(</span>cacheFile<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> force <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\"># 可以通过判断返回字典的索引初步确定数据是否完整</span>\n    <span class=\"token keyword\">if</span> data <span class=\"token keyword\">and</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data  <span class=\"token comment\"># 缓存数据完整直接返回</span>\n    <span class=\"token comment\"># 发起实时请求，同时产生了成功请求的缓存</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"暂时无法访问数据接口！\"</span>  <span class=\"token comment\"># 实时请求数据不完整视为失败</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data  <span class=\"token comment\"># 实时请求数据完整直接返回</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上实现缓存与刷新的函数将数据写入 JSON 文件，在实际运行时需要重复进行文件读写。如果有高级需求，采用数据库可能会更好。</p>\n<h2 id=\"利用-github-actions-代替直连\"><a href=\"#%E5%88%A9%E7%94%A8-github-actions-%E4%BB%A3%E6%9B%BF%E7%9B%B4%E8%BF%9E\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><del>利用 GitHub Actions 代替直连</del></h2>\n<p>在境内服务器上部署机器人时，某些网站的直连访问效果不甚理想，通常大家会选择使用配置代理来解决。其实我觉得某些场合使用 GitHub Actions 也不错，GitHub Actions 的运行环境不仅访问境外服务速度不错、还能在某些方面分担机器人服务器压力（指把吃性能的代码一股脑丢给 GitHub Actions 执行）。</p>\n<p>我之前尝试制作原神抽卡模拟功能，需要获取角色、武器的抽卡图片。我选择了利用 Playwright 定时抓取 <a href=\"https://genshin.honeyhunterworld.com/?lang=CHS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Honey Impact</a> 的数据，将图片下载并上传到 CDN。这样机器人请求 CDN 获取图片等数据，要比直接从 Honey Impact 获取快的多；而且 Playwright 定时抓取感觉还是比较占用资源的，和机器人本体分离之后也不用考虑相关影响了。</p>\n<blockquote>\n<p>感觉此部分内容其实不太推荐，只是提供一种思路，姑且就写这么多吧。</p>\n</blockquote>\n<h2 id=\"利用-cos-发送私聊文件\"><a href=\"#%E5%88%A9%E7%94%A8-cos-%E5%8F%91%E9%80%81%E7%A7%81%E8%81%8A%E6%96%87%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 COS 发送私聊文件</h2>\n<p>向机器人提供接口的 <a href=\"https://github.com/Mrs4s/go-cqhttp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mrs4s/go-cqhttp</a> 只实现了 <a href=\"https://docs.go-cqhttp.org/api/#%E4%B8%8A%E4%BC%A0%E7%BE%A4%E6%96%87%E4%BB%B6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上传群文件</a> 接口，在私聊对话中无法发送文件。暂时只能曲线救国，采用发送文件下载直链的方式间接实现私聊文件发送。我部署机器人的服务器为腾讯云机器，所以就顺手采用了腾讯云对象存储（Cloud Object Storage, COS）储存文件。</p>\n<p>腾讯云官方提供了 COS 的 Python SDK <a href=\"https://github.com/tencentyun/cos-python-sdk-v5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@tencentyun/cos-python-sdk-v5</a>，也提供了 <a href=\"https://cloud.tencent.com/document/product/436/12269\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">快速入门</a>、<a href=\"https://cloud.tencent.com/document/product/436/65820\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上传文件</a> 等文档。根据文档说明，开始使用 COS 前需要前往 <a href=\"https://console.cloud.tencent.com/cam/capi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API 密钥管理</a> 创建用于 Python SDK 访问存储桶的 <code>SecretId</code> 和 <code>SecretKey</code>。创建 COS 存储桶时如果选用公开读权限，则文件链接不需要签名即可访问，但是这样容易造成流量超限，建议采用私有权限，发送文件时可根据 <a href=\"https://cloud.tencent.com/document/api/213/30654#Python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">签名方法 v3</a> 生成链接签名。</p>\n<p>我将初始化 COS 客户端、上传文件、计算链接签名的 Python 代码整理了一下：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> hmac\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> sha1\n\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> qcloud_cos<span class=\"token punctuation\">.</span>cos_exception <span class=\"token keyword\">import</span> CosClientError<span class=\"token punctuation\">,</span> CosServiceError\n\nbucketName <span class=\"token operator\">=</span> <span class=\"token string\">\"name-idnumber\"</span>\nbucketRegion <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-shanghai\"</span>\nsecretId <span class=\"token operator\">=</span> <span class=\"token string\">\"AKIDz8krbsJ5yKBZQpn74WFkmLPx3*******\"</span>\nsecretKey <span class=\"token operator\">=</span> <span class=\"token string\">\"Gu5t9xGARNpq86cd98joQYCN3*******\"</span>\n\n\n<span class=\"token comment\"># 计算 COS 文件链接签名表单字段</span>\n<span class=\"token comment\"># https://cos5.cloud.tencent.com/static/cos-sign/</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">toBytes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># SignKey = HMAC-SHA1(SecretKey, [q-key-time])</span>\n    signTime <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">60</span>\n    expireTime <span class=\"token operator\">=</span> signTime <span class=\"token operator\">+</span> <span class=\"token number\">3600</span>\n    timeStr <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>signTime<span class=\"token punctuation\">}</span></span><span class=\"token string\">;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>expireTime<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    signKey <span class=\"token operator\">=</span> hmac<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>toBytes<span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toBytes<span class=\"token punctuation\">(</span>timeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sha1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># HttpString = [HttpMethod]\\n[HttpURI]\\n[HttpParameters]\\n[HttpHeaders]\\n</span>\n    httpString <span class=\"token operator\">=</span> <span class=\"token string\">\"get\\n/{}\\n\\n\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># StringToSign = [q-sign-algorithm]\\n[q-sign-time]\\nSHA1-HASH(HttpString)\\n</span>\n    httpStrSha <span class=\"token operator\">=</span> sha1<span class=\"token punctuation\">(</span>toBytes<span class=\"token punctuation\">(</span>httpString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    strToSign <span class=\"token operator\">=</span> <span class=\"token string\">\"sha1\\n{}\\n{}\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>timeStr<span class=\"token punctuation\">,</span> httpStrSha<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Signature = HMAC-SHA1(SignKey,StringToSign)</span>\n    sign <span class=\"token operator\">=</span> hmac<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>toBytes<span class=\"token punctuation\">(</span>signKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toBytes<span class=\"token punctuation\">(</span>strToSign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sha1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"q-sign-algorithm=sha1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-ak=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>secretId<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-sign-time=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>timeStr<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-key-time=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>timeStr<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"q-header-list=\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"q-url-param-list=\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-signature=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>sign<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 初始化 COS 客户端，一个 Bucket 只需一个客户端即可</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">initCosClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> qcloud_cos <span class=\"token keyword\">import</span> CosConfig<span class=\"token punctuation\">,</span> CosS3Client\n    <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> pip<span class=\"token punctuation\">.</span>_internal <span class=\"token keyword\">import</span> main <span class=\"token keyword\">as</span> pipmain\n\n        pipmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cos-python-sdk-v5\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> qcloud_cos <span class=\"token keyword\">import</span> CosConfig<span class=\"token punctuation\">,</span> CosS3Client\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"安装 XML Python SDK 失败 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        config <span class=\"token operator\">=</span> CosConfig<span class=\"token punctuation\">(</span>\n            Region<span class=\"token operator\">=</span>bucketRegion<span class=\"token punctuation\">,</span>\n            Token<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n            Scheme<span class=\"token operator\">=</span><span class=\"token string\">\"https\"</span><span class=\"token punctuation\">,</span>\n            SecretId<span class=\"token operator\">=</span>secretId<span class=\"token punctuation\">,</span>\n            SecretKey<span class=\"token operator\">=</span>secretKey<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        client <span class=\"token operator\">=</span> CosS3Client<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> client\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"初始化 COS Client 失败 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n\n<span class=\"token comment\"># 使用高级接口上传文件到 COS</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    bucketDomain <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"https://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucketName<span class=\"token punctuation\">}</span></span><span class=\"token string\">.cos.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucketRegion<span class=\"token punctuation\">}</span></span><span class=\"token string\">.myqcloud.com\"</span></span>\n    fileName <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>upload_file<span class=\"token punctuation\">(</span>  <span class=\"token comment\"># type: ignore</span>\n                Bucket<span class=\"token operator\">=</span>bucketName<span class=\"token punctuation\">,</span>\n                Key<span class=\"token operator\">=</span>fileName<span class=\"token punctuation\">,</span>\n                LocalFilePath<span class=\"token operator\">=</span>filePath<span class=\"token punctuation\">,</span>\n                StorageClass<span class=\"token operator\">=</span><span class=\"token string\">\"STANDARD\"</span><span class=\"token punctuation\">,</span>\n                EnableMD5<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件上传 Etag：\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">[</span><span class=\"token string\">\"ETag\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">except</span> CosClientError <span class=\"token keyword\">or</span> CosServiceError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"上传文件 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fileName<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 到 COS 失败\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    urlSigned <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucketDomain<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fileName<span class=\"token punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>getSignature<span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">return</span> urlSigned<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>修改 L9-12 为指定的腾讯云 COS 配置，在需要发送私聊文件的项目中，我使用了这样的结构：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>upload_cos <span class=\"token keyword\">import</span> initCosClient<span class=\"token punctuation\">,</span> uploadFile\n\n\ncosClient <span class=\"token operator\">=</span> initCosClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfilePath <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/file/example.xlsx\"</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> cosClient<span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"未成功初始化腾讯云对象存储，无法发送文件！\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        fileUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> uploadFile<span class=\"token punctuation\">(</span>cosClient<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> fileUrl<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"文件已上传至云存储，有效期 1 小时，请及时下载：\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fileUrl<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"上传文件失败，请稍后再试！\"</span>\n        <span class=\"token comment\"># 删除本地下载文件</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">return</span> msg<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<p>最后是一些自己觉得效果得还不错的插件展示，能公开的插件代码我基本都放在 GitHub 里了，没有公开的大概率是因为代码写得太粗糙，不好意思公开。</p>\n<details><summary><strong>使用 Pillow 绘制原神 UID 查询结果</strong></summary><br />\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 950 2592' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7ba3dcce41f029cf8f3c5855fbf4ee03'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7ba3dcce41f029cf8f3c5855fbf4ee03)' width='950' height='2592' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAACvCAYAAABNe9iJAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42ty9Z1RVy7Yuuv%2b%2bX/e1F26755y794k7rL2yEiRIzjnnnDOIIDkjQUGJSg6SgyAmMgbAAGIAQQUVFXMkhznH6P1VHzCV5XK5zmnttfvj/ihHqlGjqldP31c18Q9yCiq4rcAueWXhuHUOkvtbBf93K3/40uDlPw1Wcr5dMP97CkAyQDrulFVCaTkVkFVQpSPKfnwm1PsoBHlFKqr46Vr14/HzZ5/uq368v/XNX5Xt9z%2bvI7ne3tbn5Zd1VL76vV9pgMJuVbAx1BYnu%2but%2b1ior3tZaK1rqKrzm0IQBg8yu3aDtKwiSsko4E5peaRz6V27hXOZraOUjOLmkZ5tq/vzTrmP9b42QIVtg/l8YHSkdn6WkhOOO6Tkt46b51Rnp7SCcE3font0LXl3%2bzd/IQBZNsOKCop8orflSmdV4fqFzjMblTkZqwq75DkZOaEjQAMxt7BFVzcv9PELwn0RMejCznV0jTAkNBztHFyE4urujV4%2bAWhl44BmFjbo5OyOwSFhGLo3AgMC9wjPZOWUvjh4uv/jzzJC5%2bl6c2ByH58pqWhidHQ07tu3D9P2pwrnwjEqCmOiY5jAd2NgYJDwnI7h4fvQx8dXuP8FDVAm1RZmlho31jMUd3ec5JYXl/HDy%2bfY39mNRVkHxaq7VTg5RTXqGLDOQ0HhUczJzce6%2bkbMPpQrDPpYTT0eOpyHZeVVWFJageUVVexenVDnaFEpFh4pwlOnzmBtXQPm5R9BZVWtXwmBrncra6CvfxCaW9oKnba2dUR7R1dBQPRchb2XdfAAHsjMwMOHsjE1JQXz83IxIz1NuEezHR4ezq7TMTY2FiMjIjFsb9gvtOijAMiuSQhM5eAHJvV9IaHiualbcGOoH07WlcDpplpcfPMaooOC1pnKCfbPOg4mZlaoq28idM7Q2Fxo2MLKDg2MzFBNQ1c4N2V1qJ6pubVwX0VNG/UNTYV7xqaWv%2boQXZOG6RmY4t1705ialslUexd2dffiiY5TH9VXlmnj9z9KC3XJlOhI12QSP%2b3YJbRFYyGz%2bOEnGcEEqM5vmMCmBijsVmOVpSA5KUU0dfMqnj9eAhdqj8C18124%2bPYt72pnL/6ZNUQ%2bQkp2NxPWLsHOf2RHKtK7lITj5scUhY78tEMOfxQKu7/lFzbtcbNst%2bntGkCasTcsUhAUDdDPP1gws%2b11/f0D0MvLB4OCgoXzkJA96OLiht7evkhjcXZ2ZYK3Eu7r6Rt/1LRdv2ECgn0n%2b//rWlG85cpoWQn0xwXCPlMjqIkPwOK0xHVlud0b9ILMLiXQ19MFPw9btLIwRitzYwz1d0QDfT30drNBc1NDtLcxZcVMeO7qaCHUsbUyFe77uNsIdcmn/JbHp%2bOPO2QF50nXpAUSH8C%2bj6rq2ph1IBPj4%2bKwqb4GU1NTsKqiTPADhfl5gonk5R4WhFFdWY5ubh6C4D%2bPSh8FQM5PWVkJXGx2rOZZK4vPWClis40iNgbq4svOWAy3NORkpBRE8ruZirLZZ4MEGrSNpTE62plhiJ8DmhgbCEdPFyv0ZYMM9rVHL1drDPS2Q0dbM3RxMEc3J0sM8LJDTU0tYSBfC4E0i5Lrz0OnwtY5aYeyqqbwbLeyuvCO5D3JUVGJ7ql%2bLQ/YNAGW8OBPssp8srWW%2bKy9Bl%2bsIcvvN1cXZ%2b2xE7uZGYtlWej7FC2U2QwqfezQTpndgl3%2b0p5VPn6YzIOuhU6z97bP9G/lAp8EovJFDZHdaofMigRB2kJHKpLnVEjQsp9980tOEOVYgiPLbqjK7%2bYNd8pyCjKK3M5dyszW5WGHjKLkZfh8trZniPR8q%2bD28qXB/l4SJP9ZHvB5GzTDdJ/MQYlFDVJ7Co/kPzbzmU1tIA2g55/nEb/SAME5UOdZRRlSn92qH2eRIgT5iF/jgk%2b4QW4bhhAGQGn05nufZYu/LYDtecBPzAd8ygM%2beXEhDKpp4ZGCfCEElpcWYzYLiaXFR4Xr3JzDQt34%2bHg8lJ2FiQkJQniMYjmCJPn6VSYomTlBXWUUQVpGAdjHWbYnZHyU/ACFFPZx2Mka38zsFLfPyiZeoE5uqqOQMO3YCkv0rpAtsphO78tuM5/PBUF1NLX1hXwiMHivIIjomAQhiaI2qL6ikjr6%2bvoLHj4sLIwlO8EYHhYuRAN//0ChDScnV%2bHaw8MLHR1dhEIa8SsT%2bDwJcXF1h6DgYKDw4sRCCXlSHx8/3LMnVJA8ey6EHxsbe4lENwfPzhVtnTZkNHTFriwcsc6Bl7cP7AkNZdlZNFqz%2bkYm5mhn74habIBfmg1JHqBvaIYXB4cwN69QEGJ%2bwVHMPJj9MSrQICi%2bb4baTQF/x/IAihw//iwr1KGj5FqSCv%2bGCXzqAM0qhZbio4UsszqMoaF7MSIiAtPSUrEgPxeN2QBSUpIxICAQff38PwmAdVyaJR76GVlrqkGhayHsWVrafmChCIqLCvFEW/PWTAVh0dECYXZIE%2bR/wwfQTGlpG6C6pt6Wh9cQkqjtzzMz0jEpMZGpfZag4sVFRwQ1T09LE%2bonMNV3ZeEvPzcHbWwdBEzyxUzwc/ujlym0COdM1TbvqX/UEPKq273wVnIh%2bADmS3h2zm%2bpOEULwRR2bzkhKqS%2b5Fe%2bNBvb70m8uuRbEo2hc1UmjD1M/d3dPfEgywd8fP0wNiZWuBcZGYnKzBmSSdjZOWJKcjJaWdt99CG/5QN%2bEXOpkyQE6igNnu4pqWh87Ax51l9CzM1kipyoPCsK7H3WBpD3pcHvFq4/eeUvzcTvRYfPfYYEhUqSI9JeiZ/ZLkDSNMm4vgqHyTtTuppzOBtLS44y71okAI6EhHghw6osLxEkSaqXkpwkPKcUkxyegqIK/CytjKkBOosxbkrLIXsjWTtZUFiQC8eqyrGn8ySSL/BjpkHmRT7lSz7g93KC7fWkt2C2RBASAUics/S23ECCGb6YB2xvlGxSyKd9fAX46OnpLTg9wfF5%2b6CunhHLywOEOuRdKQZTZKCQJ71LGa1NNNfN9FQ3rGwcabBg7%2bAEVI9gqbmFNQNNZsyp%2bqC%2bgclv8gDbzetz9ZfcI00yY3m%2bsYkF2js4C%2bc0OXS0sLQR6tDkGBiZCkcTBrx0dA1/EX1%2bZQKSm9/9IIXfUvl%2b56ZnZV70e%2bZxv/luhyDJv7P75HnJw25HWCSEn6UZCBJIj11A71Kh9/76958ET/wTy%2bnpWkJafClRkoQ5ScpLJqiqrrMt81MQBF9RViKUupoqQasa62qwrKQIy8uKBa0gZ1jKrslHZGcdxOSkpN9lhAT1cWWzTRpAs0az7eHpJcRc8rAkTV/mcLR1DATpW1rZCiZACY/0LkU01LMSWxm6rds7OFIEAVYXQpnqE2FBdSkUUjgllPYl30Mxn5Df8bYTmJSShu3tHZiyPwPb2DEyOg7j4pPQ0MhcEAZpI2kS9cOQQW066rB7dJ%2bea7AIQv2le2oaOkJu8dUoIKGRKMxRaKFwRfZOIYZ8QXVlmaBmh9gziZlQosHeISgNP8vIYLRX7nqAbep6ZPQ%2bqg%2bsHaDZOdXRKoTA4OAQrKwoQU8v71%2bpInWOZo4EUHikGCOjYgUChVimgsIijI1LEvICYqOon5paeoIm0MAkWrMZLrUEU1baimZkLhqs7m/hgV%2bFwe3OiTw/qaDQ6Jb06KPUqODdldW3YQHCE6o888I8vcfiNkgACb1DHaQ2JCH2t0KgBNBIuEVJVJLwinSkNkitKd0l%2bEvJGjnr3MOHhHyA2iGVj46KFgRP6TJpwddS4Y%2bdoIEpsgHSRxS3wtZ2QCIBIpuD%2b8Qkywl44mMuD5J8gQp9WIIWtzu4L/mBr4U%2bilSbs60mmKqZubWgleT4HBydBROjDJXq2NjaMwfpJJgH8QESv/JVH0AdpTBIIOJIYR6WsVBXVVkqkAtHC/MFT1qQlyOERYVP9vTLdQN5le2g6XfD2X81BErqSmAwCVpylIS%2bTUyhuCV4pV8kQb%2bLBci2JaGPbJzSXgqBlMNrMwFQ9kVcn2Q2/lcuYmzXFIokhBMoGkm4wK/T4vK/TYtvv0lhjghGKnROYYvCGYVCkurf2TUBke1o8H%2blECSsMSFBAmzE%2blJkoShF9wi/0Mx7sByGJo/yEDo6M8f9mz5gOxQlp0EJkBubaTonEGPLcmq6JhRHH3Nz92D2ZvfFBv//muXtqfZ2TkHCB%2bQzUyTsX8KcHjlEygmIDyATptkmweSx54QFJA7xd8MgzWp62n7mAw4KCJAaPlZdzo7EwaejkbG5EBaTkxKFPIHU7AtEI3zRN/wXBk%2bDJCJUYs%2bUQNH19nqk9hIbp3pUh/ovsXfJyhE9I4p8O5T%2bahSgQhFAXVNXCF/qGrrCNakdgSMJQtsWAn8xaAk5sr38V4RAg9BjCU56xkH09PYX7DiZJUVRLBH6lMqqCFwFeX7ySaTmfn4BQhQgVac6lHhRIb9FiRwhSJmvpcKSo%2bImkhNCoGQ2NlGc%2blZMVvsYBj9fVP3loD9y8PCF518cPLVPM21r54wXLgxiUvJ%2bQQA9vf3Y0NgszK4kr6D4n7Z/PzY31ApaWVNdIaS/lHjRJJEm57C8gIR0vLmBaa%2bZ8L7811aHqVSxjI/yacoEqZD6k0lQJkgxNZOZAi07bY8CnwlBWE3W19XeMNDVFm1fVP3PaMLWAi1q6RgKWkjXdE6rTZIcQpKbENTV2kpxaVIoAZPAdgrTxAsIxCmbfdnfyDd%2biQZZ5ZCQEMG7EnQNDAoSjuQAKafX1TcSrilEUifkPpthFTUNERPMupam5npUmPtCRKjbopaG5jolQRKS5GtC%2bBIhsj2mb6%2bzmf%2bbs5BsKeAAQoIGhqbCfXpO54QVSCB0NDA0%2bSIk/lUY/Obbn4XQJwmBEmRIiI5oJQlCFGLrpwRDyPw0tbXFsdE%2bC62NaYuPHzSuUuk5c2g5Ic5vjT3jtxZD4PdIj69dS6IAoUAqbS2NQqp75mQb1lZXYu2xKgEHUDikCEE%2bgaIBJW%2bUK3zutH8VBin5IYqJ8ms6J2dDcXTPnj0CCnRg%2bJucCwEiOienx2YdpGR2o6W5kejFTK34/kSVeOFZMzdyoWDtTFvmamn%2bvkVnB4uNndLEy33dD/z%2bQskmH2DIsD4hP%2boLzT6lvZQSU2pM5klIkK4JA5gwLSEu4vOV6M8YIVWBESJAQWkw2XxuziEBGRJBSk6GGqHrOBZjiW939/AktRIEQB1TU9MQH0rxW81NC1zOiPd5l7DP482BRN/ltFjvJQ11DU72l5HiK2HwE4aQ4IjP0dzH9FfCDDFtlNoCTBLMIbVFo9PEfk6qfDEK0EskMfKydCQHQ3CTVE51i5WVRASJI9q%2bkWoHm2HZXbs5Qz3tZV8X82UfVozYuZy8Eie9mbPD5w7zS/YviThEhBAbLIG62%2btupsKfdpz8vJX2SvKAncK6xKeV6K8sj/96UVL44BZ6ooHSOTmTz9njz0MgMxEggRkYGHEOtpYbzvY2G4aGRrwqEyZrBzQ0dWELlcHXwmBAUCieP3%2bROeFQ3J%2bWiRGRscImC2MTS2EwtAxGUJiYYIG3ZOe0MYLukWbSjFNaTEQMHaMio4Q8QfprqTDFbVK1IhZHjx4pEFJNwtgZGWnCOZGixOuRM6HlaPIJkoGTetHgCvJzIT19P2SyzqSmJAORItQWyxzB3sFZIEnJp7BZg%2b3OaHv6S3GfBHDy1Blm1y4sAnmjt28gVlYdE9gdyj5JABTnKQ%2bgbDWJZaaUAtNOESpUh5wg9ZUwAmWtlML/bipMNkVhjvJ/Orq6uQsS9GdOMCwsnMVjA8GrEhaXZFySpTWaWQqPtnYO6OjoDBSeKAlxdHIRzomVoWvmuASiRLKD63P1l7S5Ywu9SVLYbRr3kRuUhG4J5JX4DElGSYIQjuQfvmYCn5OiVCgMEuojFPjt91IsPO4QOiNBituIzY8rwz/8LAss1AiFttOweh/v0foia4vOSY1hc9eYwseNS18jSH61ELPlBIW1RskutW1l%2b/K4hFWWlVP%2bfT6AHtIs2dk7CbNOM03hhXh8umZqLsy8k5OLkKVJNjlIZmLv3r2C5lD4JO0hDpDqE5dASQtxDUSL07Ia8YLEM9D97ajyPxMG6VsC4cnyfHMLG9RnSQ5pmSQ5ojqkcdq6BoIjp0RIfSuT/OraIA2IbItsn9b09jNbp3SYwmJTQ43QOKXFiYkJwgclaFDiuSlsZjKfQe/Hx8cJaTVllQLEZgMm30FtkuMi8pUcFwn8c6T2pa0skr2DkkSI0nVaEqfwfKQgT0iCjhYWCD6MVJ7sv4j5Hwmpm5iY%2bPU8YHsIIo8vya0pJBIapI9ukqHqXwxdEkqNPiJZAt%2b%2bsCGh0CR1Pt/0sL0NSdiSkKCSVJjMTmhra2GE0B9pKB2Js6DEhxIjqkOpL13TROkZGAup8fY1ya%2buDUq2lwrC2GJ/JU5IAjy%2bJABykmQapHYClGbnGluFwikJkfILEuzn5KgkDyHgY2ltL2yrMzS2YPjDWIDHmtoGLMtzEFaMJbZN70omS6KJn7cnyRwl73x9eZxJmlSGhTIh9JG6JicnYV7uIYEgJWmSGpMJECKkGaGZJYnTgCl7JDjKwp1gDhI1JXMiVad1Bmo75FMI/UV6S043Lf2AAH1pTaChoVlYC6B1gcSkVLxz566QG9D36FuxMTFCmCP2p/ZYpQCRyQxIg2jpnMhcYoRodSguLu4jH/BVVphUiTZA0L4AwgAUT8mGadmZHAuhRXJy5Nykt9bcJTwd0c/2zIGSGtI%2bPYr55OgIV9C79A7lEuSUvuTwSOVdXD1xX2SMQIZEx8SjX0CwsGfQw8sPwyOihW231E8iOUio5AzpexSuicqjb9Fz2hNAfoe%2bSaGZaHLF39ohsl11KMR9uxUG6ZyFMQEB0jU1LNmBuT2uSvJ3QolETX0vWVPcCpk/bBGqkl0d0lus0pfMSGorhZVsrt4MlZt%2bgNqUMFJ0Ts8lO0S%2b/2nzm5t1lIQ8gtqha4Ee20qZP//erzSApEozSavDhPjIyRDlRAiRdmFZWdsK4WY7IbKpAepCGKRZIC2h90hzKGOkSEArtdQuhcSv4YAvbYXfviAjoePIyxPZSRskWdYpqDzBXyp0jzZIk1kSS0ThmEJ5IYsWpKnbo8Ev9geQhMjeKe2lUpCfI4RBarS1uV6It4QMyaYoBktMgASnzpwbkaVkkxR%2byHwoPSWmlkIeCZY6Sjs3fm%2bT5O/R4hSVyP4pOyUbJzOlVJd8Fm2NoSPlGiQwekYLvCR42v5Djl2SFP3G0tjmWiAVmnGSIp1TIiHZLkPIcPuOq08ASf0X3OH2GSRvLVnj%2b89ukvwaYyQJkwSeJFCYzE/YOCUwxAof2WOJGdH5F01gO5O7S16JcvVtZTdsxXIBx0vuy229I7/tJza7tp5t2zC5hf0/nUsIEfnPmOPfKtu28P2ibO1BBIWPexFVJOewbV/jx/Ot5yjpi0QIf/h0wXyAPEN2mwXp5zKy8ps/mZHepQwyciofd1tTHWn2HtWTYvk4YX1puc09x/KSHEFhW3tyKsLmaOGeHL3DZnCXRAOE7e%2bsjhJQO1L0cx1WpIS1vl8kTJK%2bAf2cR0ZOZeu7KsLPe6g92Y%2bkrPAd2rUitCkrryR8jxU21o87UOEXGqDIJKOxWwm1VVRRS1WZV92twKspKXAGmmq8gZYG6mio0W5SYROUlqIyaiupoNpuJdDX0QVdLS1eR00F1VVVOSkp2XWmRTzNsIaiEmoqq6CGKmtbVY1TUlTe0NZQ4Q10NEFPUw0Udwv0Oagw09FQ00Q9LS3Q09HhdbS1WLua7KgB0jJy67K7FMXUT1VqT4l9W1kZNVVUeF1dXV5PXRl01VVQT0OVtaPKM0GDkuJuUFdWRC11VdTW0ORUlbV4fS010NdiWayc4oa0jLxIIoQ/SLa4Bdpbbhw6nPY2Psx7MdrfYb2z7dhGXfGBtTBXw41jMeZwMt2KdzXV4NzsLMWxWWGv4vYHfKhJC%2bJmr5zgJ/vrxa1prrDPXmne2sLsvuJupXf2Brp8Vkb8%2b%2biwoHfhxmbi4sr2jYKqk0vhFraiFBtVrjPLFmI99Dh9DS2uONBysdjP6L2ezA5RcrA95CV6gp2KDL9XT2bFVFv9vpKS0lM9VRV%2bf1TI4sGDSW/TIv02IguLOIe4VC41I46rTXHbaMr0XjkSZsjpamjwGX6BawV7Ml4fS45aDbTZI9aRjeU8jAK4kjBTzlRL7pGBnu6jnVK7NkgIf5BlAtgtp4jxMXs/lM49f3zw9OlHN2/eFnOIuMr%2baamvXiuPMBQN5NpjpJMW7tnntxZ6q%2bFJ7KWaZ4/He8WLDy7j%2b5lLeLuzFFK8tBaSI3xfGGkqffB1tFkvvX37cfq54cetp66sDU99wLHZJew6dwcd1A35hlhD/mikKdob6omn0ixe3knSe/rtP/7DiuqO79HOkNnsP/0Ji6S%2bW/U01pw101d%2baa2jLi7q7Xqae2d6tmJ45EPewAjquYdAaE4ZnurtWm3NcF07nmqC9iZ6WJfQ%2bKIv%2b8ODvMSuD6pygagsG4XSP0ZgoLWrOMBW%2bbm7tf4zuV271uUEATAV3M1UOiXIWZRbnPWqsb35w6sFHmeffYDpJx/w/uMX3KlDrvyFAnuI8tTHEDtTPj075H1RQfSHB4Ot8OxGFz4eOYVT/bX88XQHce9hGz7FXx/8bU0h/WDC84KO8y%2bvPVyC8zdeQO/IExh/KsKDR9tFaZ46SyUxZuhsaoCtMXbzUYYyb0x2K4OnqRW66ZuBpaoWBv3wI3fUT2epMtEcnE10sSAzaqHqVOurnnsPRacm7%2bPwkxdw6tY9rDvZIT57wJrvOGgDdkZaeDjYe7n5YP9Te7OUNXfXVPzxGzf45m8uqClvy53MtOFOHbDiTfTUgXzRH8hxkC2m%2b1piWbg11uyPFTc3d%2bLkxDh0dvVj5/EuvivHXXy11AljPHVhn7MZVkY44MnDofxo93F%2bpLMJL3e24qUTlXxXrqv4apkrZgYbQKCtEZaE2YiP1pwTV9efw/raLjje3AuVVZ1YcKxfdKHQYb0kxgQ9zPWxPNYV7XW11xM8fLAiKR7i3Dxhn6U1mmqZckVRpmvtB6zQxUwXj%2b6x4k621i%2b3jk5iXm07NPYNQfOJs7i/tIFrTbUV9%2bTaoL2RNhzdZ48H9risZCdm4bHceqwuaAJn42iU/dmFO80m8%2bIROzTVU/skgN0MJmb6m0Ndmic27fVbu9RUL8b1l/hmbhL70jLXBnI8xTdrXDHeWxciXYyhLtkVjueGr4x2NXEw/xxXX87i%2bZYSce9R341bx9wxa48%2bBNsbYn2CPZdZ0Lxcf/wSvrl7HRYfjkN96xAeLqhcuVnpxJfFmqCnpS7kh9iuuuvqi5Lc3fDl2DmcGRnAupRY1JNR5Q/6W65UxRmJWD2sirKFgpTgpZT6Du7J9CTiyivoPDeIe/PLltoz7RfPFdgwjdKGglBbPsrdZTkmMBImLl5hxszDhROd%2bLe/OkNKYIToaqkNkAB2yjInuCkAFTgcbAF1ibZwIjNuLT25SDw%2beBbrK6vgSOrR9ctF3uKJGgdM8tWDOHdjrE90EHlFRK567g3H7pPN0NZYiU5hsRARG7J6u9qeywkzxFBHI2hNsoLMxMT1fTk9cGVgAO6MXIbwQ72QlxKxcbfWDirijSHYwQAP%2bhsvqn37w4aTpjY32lm/%2bv7e8Eacl8ua5vdSfLS94vu2THORr7UuE6gtNKU4il3Co5cKSsrh/uUuDD5Sj6WFMYvXSu3EAwVW6GGpjXl7rMT%2bVtaLf/oHQ9jrn8otPLgFLjbh3P/534zQz8pl7Va1HW%2bmr4YfBaDEBFC4zxpOZDhhVYr7ipN9sKgpLQgTfH0xPCh4dbTcTnyvwR5TA3Qh2dccTx505RICLBb8wiL4YzXHsKi0FF18/cVHY80X7tbZ8/kR%2bhjhagzdOR4Y62644RKSx59pb8XOE8fRMygbkjy112dbnbE22Qh9rPXATk1apPPDTrDX1OICf/g3UeJP/8a7qKuIzJl/MpP/ZvVwiCbva6PLhTi5L1tZ%2b6zKyGmKfpbXQQMDc9Txj4WKihTuZrkVDBZboqeVDlbFOXJpAU7vDZTM52X/RUvs/I0W/vAvBtzOv5svFUS6Ll6vsABLQ/UtAbAERUlJFcpjbfHsYQ8%2bp7iUKy8th7czo3jvaj8kHS7ErkPpH56HOs8lmBku5kTYYFW8HaejIM1X5mXA6bZG7D3VCgeTwrHY22bpSVTAXI6FwfsEfws8nWHNj3bki%2brOTEJnfR6ersqA4o7beP9szfKDIIe5Rjfrd2oK8hvmCjLv9aVlxYbSu1D2T/%2bCcn/8Z9T8cQda/CwjqtE1n03YrffC30pzw8LEf8khrBKV9W3AyCEEncOyQMPKA62i0kTDof5PR7xtnntZ6vONKbb8%2beOnN6rym7jKjDymEZmQFJ6NTcWtouGoA8%2bHvR2eWaqrbeyU2/QBwASAFfv0oDjNSxxZ2gOy0qoYEuQLjlZWoG7liy1ZbW/ehybNpJo7fMgM0EF1qb%2bJv/nmO2yqLsbBrna42NkOxQUZmG9j/uFVStFsjq71y0RPVWzKill/%2bug5l5%2bcBpby6mC/WwNSw6NxfuzmylxQ%2bvRxF/%2bXhiq7lq0VZBYUvv0R//Lf/wEUfv4O9FUV4I//9/%2bLmn/6y%2bq9sMzHZ9zDnnoaq636OruuW9gHYl1HC2QXnwJT7zKobj%2bLBw%2bXiF8erp0bcQx94G6ozPWWJ3BP7ryEiUsP8Nn0S2isOgUdTZfwVv8UXPVKfnIrPPOJyS7lVSnKBOl3gKoM7Ax31sHt8Stw494D7O05C2OXuvDS%2bTPQPzSI02M3199dHFjMjoneqKvIgzMdrdDX1YF3p27B1UsDODYyCLdvX8e%2blkbR84H%2bxeKUlPWKwnR8cn%2ban5l%2bAJf7z/JDPT042NMNg72d8ODGqPjt0PBiWwTwQa4AACAASURBVH7uWkJMFH95oJM/296Mp9ua4PL5Trw5cg7OnmzB3rYm7lFPz9KZo0WrMZER3AjzISfaO/Dh3RswNTWFfRdvwPMn0/h0Zop/OTy0fLO9fTk80Id/9mACFj%2b8hScz0/B6bg5vXL0OE2O3cHZqEh709q7cOX162crEgtspo0gC2E08Hdy9M47PH9/Fh5MjMHvvJj68Nw5PHkzii0dTMH3nGq6sv8O8wjzs6%2b1E5BZw/u0cvHv5EB%2bwzjyaGcf3rx/Bh/dPUcQvYFVNJba0NMH68kt8/Wwa5x7dwYfTN%2bHJwwl8/uQuvGbvrYs/4OnOk1hSfBRBPI%2bLH57Bq2f38dHMBNy/cwOfPLgNiyzCrIne44WhfjzMoDVsvMPFd0/gxdw0zkyOwrOHt/De7VF49fw%2bzi%2b9wOkHE5iYlIxvWVSaGBuEmTtjeHfiKhvHOE6zcc1MXcO5p/fw1ZvHaM/g%2bQ4pOSABAEHee5NjcLq1DsrzD2Hhgf1wrCgPKwoOwbHifKw%2bmgcvHt0RfgLTebod5t8%2bgadsUG9ePBTqtdVVwrvXj3FudgqW3z%2bFitIiaKw/xjr7FN68nIUL3SehvuwIFh/KhKaqEmQDhSX27GR7MxTk58ACa4/Vw7NtDVCQkYKluQehLDcLXz6dgfk3j6G/5zQcPJABi6ztF09n8NrwABRlZ2BrTQU0VBSxibvHJmMWpm6NQEJ8HLCJhCMH06C5uhRZPTheWwmlOQfxGBtHc1UJUH1bWwcgxuijBkyyl5nUkUmfNXQVp25eYVIew/tT13HmznX6OBEc0HW2A5Y%2bPBM69%2b7VI6YBpC23kARA95bZrFWUFUNTQw0ss3qvnz8Q2r3D2hTaY7MrqXfyRIuwXkj1XrF6bPZx/NoQTt%2b%2bxmZsTLjHhIgDvWfh4MFMWJl/DuxdZMKHO%2bNXcZL18R6rSwJ9z74/NTEK8UwAdD12%2bRz1De6OjyCV%2b3euUz%2bBaSw%2be8IEYPdJAEBU9cTNq/CWzSi9ODM1Jnyo7/RxHOg8AeNjw7i29ApoUaTrzAkkDRgZ6qNBMRu8h1cu9CBpD727uvgSiEFuYBrABincu339ElPTB3j1Yi92tjcJ7zIhQgfTAGKfqe3rVy8wtR0WvnuDnVNkYZoj1OtjGkDb9NaWXsL4tWHmIy4K32Xqj6db6mCo/ywT6jTcuX0NYmNj2GQ8gtnpW3j9ynl4OnsHSJg9J1vgfHcHPmPaQYWIUiYAwQSIv4dpNtMf2ItDfWfgYs8pmjW4erEHBs60wS32QZ75ANZZpo5nYG3xBV4a6GR1T5NEgQbYdaIRrl8%2bBxyrd6yqHI63NIBo5Q0yAQhtPJi6DlOsXu%2bpFhgZ7IV1Nmgyp6IjBazt9zRoOM%2bEzTQPppldD5xtE0xnfeklXjzXTRszhHqTNy7DOZqU0UF4cn9CaG%2bo/wybvAfMz4xjUmKCoKHULzaBcJO1y4TBnO9p6GfXz5npvmU%2biH7NQivRf5AscZ/sOM49eXwP7965BdP3xvE%2bU%2bvZB1M4M30bpu%2bO46OHdyEwMIgrLirkXjAVu3fnJswI9dgzVu/h/Um8xxzp3ONpiIuL49PS9nPPmapPMxO5z1T73vQEzjCn%2bvD%2bFE7fuYVk88yn8Hv37uWezk3Dvbu3NtubpjKBD1h79N25xzNQXVXB%2b/j6cbMPp2CGPZ%2bZnoCZu7fY81v4aPYe1YPH7Nh5poN3dHTmJm%2bP8feF928ia1co1B61T9%2b/cukCr6NryBM7/YetHzeDlqoG72VtDj425ujrZAOO1pa8u70lH%2bhmgwGuNujlYM7L7FLklZXUeUdLG3C1tUVvJ1twsrHkbC3MOE8HKz6A1fV1tuQVFAVChLdneYSLrTV4WpiJfI2NxYEmxpyfiw24OVlxujo6S7vklUS7mAk6mJjyHtZW6G5rxdlbW2x4Odqw79ryvs7WEORuAzqamtxOaQXextCI97RhwMjSDH3cXDb8PVzEbtZG4OdijUHutmCkp839LKUA1gYGPI3Dw8aOC/ZwF/s52fIhHm5iT0d7PtjDBi2N9TkpGcVNRoj4AEW53eju7rQhVX9y3vxw9oqpiiL3L3/ewX377U5uv5cO1xBnCh2pTDi2OpybqSFXn2I0XxZtsOhmpMap7drJ7ZbewXmbKa83xpsJ9fa56vFWujqipr0WC2We2i%2bq5X5aPCf9HfTt%2bJbv0peDZGuFRW1NtWkFefnntiaGEJ297%2b2%2bvIgX/q4mK3//21/WZXb%2bwJtoyGyURxhzrD3MDjbkzXV1%2bISD4R8CD4c/L84MWb/ZWb8%2b0X9cfK42W1QVbSFqSTDBsmhT3kxdlbdNSFz5tr5jPjSlZO3l0Dn%2b4VAPN9PTy2ftiRI1xRtgXbwZr6OhxktTJkgcG1FNrkH%2b8/%2b9e%2bb%2b/9M8/OrPu4z4b2X08Y/faaCyspa4Lc2O7ztsC%2bEuehjlaSJ6MaD3ordU9ZWmkhyvKi%2bLKnIyqLpLmjvgr79xLtceUv0N0NvcYP1hptnzmXj9ZxM6CqJbGvI4pr4L7qjJYo3Cz4s%2b9jqPLXUU37nbmXMJw5UvgkfrHuu72q//8S/f4P/489/wX77/GYMdtNe7s%2b24smgTdDE34FP7S195jR57PHajY3nj%2bV0GBmdwjYXJS6054vZUMzieZgWOhlpoeLDw6R965x5GXrm7gMsfkMVmEL17hx2lpeKWJBP%2b9AEbBocFPkAAQ8DQICZ6WXF%2b2emvpFz85/%2b%2bUxN/lDcEGRUz/ElOl69JtOYuFTtjpIce7HEww7aDdvNWmn9f%2bPc//gk1FGTAUk8TFKR2opOezPKVEhd%2bf4AB%2bNuaYH2EzYdLlsrzl9RkcEhFBq5qK8CI1i7slt%2bBXdHGfGmCBboa6%2bKheK9FmwDXd3Lq2hAYE41pBTkgbWWHyjZWopMH7MTVSRboYqyDB6Pdl4sj7F4/6m7gX8%2bO47sHN2DhyW2cvXSK78lx4U4csAYnIy1MDvdetc068HJ85MI6PhzHZeZUOeb87vXUiE%2bmW/DdOQ5g%2bgtCRFEF0nwtsSXBGe1MLMRqxh70V18gMzsfLeyDoPmAp/hahQtGe%2bpAuJMpVid48VZKPy15GqliTkIY1OenYra/DZ/pqbZ0vdoTMgL1IMjeGI/udRDVKkqtntBVxWMmOlBrZQytJtpY/O1fRU1hBstl8aboaaGPR8LsN4xNjFZ3a2pgV%2bMReDl5Afb4OqKqrSN3JMZypWW/Obqa6WJJhCNfb757%2bWZ9Adw4UQWTXQ0w3laGF6pzVs4edlvqOmyFDsbaUBRuj/UxzjB5toO7fLoLH7JoNnyyC6%2b3HxP35TnxA/l2aPYLQoShwQwfY2w9HLrh5ndYXFRYh4jz8Hp2Erz8s7AgI3N9staZj/fWw0hnI2hO94Qcf6Ol87WHlnFtDvHDfejIj1o4m%2bu2dqvGA7NDDSDYzgAa09z5fHeD9yeCPdYWH1/Hp7fOQ5ezFTab7V4cqfXcqIg1Ri9LPWxIdOIcrQ3mzWytYOnxVcS1WSw7FI/a%2bnrLfYWuK63pZuhhoQtV0XZQEum4cLW5aH1%2b4jyuPBjBmYHjopO5oYvDpe5cb66VQIiURNhhdbKH%2bHx99frMzXHAjbc4fmkUBmvz14dK3fjBo3Zgri8QIhI0qIYHfA3gXHPRRkpWN6Qd6sLpW9fgyvBViM9swTOn%2bsQTzYHiZF8tjPUwheYUJ2xJc9koSvBcHDlTD2eqGeRNd1kYO%2baF48ccMSfcAMKdDbEu0RFd9VVE3//j/xSfbyrFwY5jEPLNXzBQ7se1C0dt%2bYZUU/S20oWWVCcsDLdctnC2%2btBSW7x%2bc%2bA4r%2b3guJYeZTc/UePIt2SYgY%2b1Lh6Lsea6i5PWB2uPbAy3Fq3MXeuG9sK410PlPhs3qp3wfKEluJprQVWMLdYmO/Nj3W1rtztq10e6TuLUqYa1Gz3168PFtnC1zBYtDNQljJAKKCupYO5eG/H96Rnx46fvMCgwAzz99oCDcwicPHkO3y5wMHH26Fqylwqf6meGZ7NdoC7VlVPdJc8rSyuj9A/y6GCoIb5S5s7drbbh8sP0INLdhPc2Vlr993/%2bM/7xH/8ZdZWUwFZDDVT/9V/x//pv/wP9jWRWq2INxMGOhtie4QKdWS5YkeazZGWouu5gpgXWzhbLBeUxS/2NqWsnDnls%2bNtqYccBd74wwmspzEB11VXhJ1Gulixej3HmTh/2FQ0e8VobKjDjPZhAm1KdsXG/i/h0U%2bNyTmwyZ%2bYYgeUZWaLu5vLlq8V24rFiC97SUF2iASQAZSyOd9%2b4NT4jmn/zAk11rKCipBKdrD2hrKQc3527Mn8/LPlhkonhQsIeF2g5ul9sYWDE//U/fkJLPWXQUFCAf/rjXzHWxGLheVz048MmJu9CnA1EJipyi/I/fIeKUjKw69vvQJaVHTt2oKeqylqnseN0sbnFy3A3QzyR4cCfPlMgbqw%2bykDOQTyak4ne3p5orKG6PhqZ8bjdxf15gI02fybdjo91NV/XkP4RLX78M3r/2z/AsTg/rE6KEJ%2bwcnl61cPliae5Lt%2beboPVaYGioqKzMDzEYPPAdejpncAjeS38kJ/3s7t7fZ%2baKqmuS9HSGC0hqamoYFaIpWhi7Bp3Y%2bg8mqmYQtWJPkiIOwihPnvw1fGT717HH36YYecy7x%2bwB7MysuGv//FXVJbaCZmxgRjgbAXf/PnPaPE36fkP%2bc1Pso1dX2urKIC6rCx%2b/%2be/oraaGhh9/y2q/Mu/grezNR5wsl29E5AyW%2bYQ%2bCrcURNbqveJhyf64Malcwz4XIDCw0UwNnoZj0aEr84k5jw54x/9PMhKQ9yR4cVVhHhhc1URBtiZwjf//EdwYV6/PHafuMct/OmgW8QjLzNN7mz1IS48OJ7frRSK0UmjcCh3GALCLqKagjvf7Rw%2bN3eo7KmJnPKalILyJiGirq6FF3rahXx6%2bvZ1uHR%2bAMeuDuG1S4NwZegCzt26Jvowenk5Oz5eVHOsAhk4gq7TbQzo9OPTh7dh9t4NGL7QhUNnO8SvrwwvF6VnbGSzmSRscJ5hi5sMTF0c6IJBViYZihs91809H7q43JCXv34oMwnnnt2GJyxcfXj1RCA4HjDU9uHtHL55dId/PXJ5pbOibG1/Ygy8f/kAphmye8nQ3Nz9CRxmWGSSga3H98bh0YWB1dG246tRYXvg6ZNHcOXSVbx4/jLcvHGXId0bMDlxj10Pwv3BwbW5oQsr1uZWPK0qfyJEpm4gg7dAZMLM1DUBNt65dQVfPLkLr17N4trGO8zNz0UCQwRyFt7NERQVoDNDXTj3YBIWGAhZF73HKiakttZGANE8Pp2dQgGQMGzBQJOA5B7OjKOYW8AzZzvwyJFCBnhe4wuGBwgxErC6wdp7MXdPwP4rq2/w/MU%2bzD6UTegSR4cH4PaNy0I7BMWJx7jLUOGzZzN4/%2bEkxicksH5fxru3LsP0xBUGhS8xlDmEj2duwIsnd/Du1DW8c2cM7Z1cPhEiAhy%2bcYUGL7AyxYcPCMTFKQY12YcETE8ERg5DZJ0MDrPBExyFutJCpHqZcVFwqqUW3zIBLrJnFaXFUF9bhevLr4HgdEpEKJ493oC9DI3VFOdjP0OHG0uv4cTxJtpfzJK1Z/D00V2cZ%2b/WlhbCwYRoARaTUBbePIH%2b7tMExeEFg7HsGVYfzYWCzBQ81VwLLcdKsaGiSECSM1M3ICY6GsrzsyFnfyLkpSdjef4hKMvLgvb6KjzX1QHVhTlQxYqjkyvtZv2kAbcZtn/HZp8GyzA0Pr5/m4gHoRMCgcFm93NChDpJuJzqEn22nRBpbKghAoOeCYQICfbD2ydCfVZXePaREGHnJFAiWOaYxpD2vXnxUGhPQohkHcyEpffPgMiXRwwGU5tzbMYZtheYKOoL8QFEiFD71MZjVm/u4WZ71O5jBvHZPSJbwM7e8VeECOvkDAz2ncHxa8NEGmBH4zGmBbUwOtz/kRDp3CJEqB6pIQmLzSieaKiCa8yJ0ayXlRzF%2brrqTaLjygUcGexjmHyc6guzRYTH2uJLONHWJGzHIxKF2B3WJhvgTYENqis9Auw9Qdv6ek4Lu0qpPWKnhgc6BZJjZuo6ttaUw8Xe00K927dGhB9zvH/9GNhg8dK5LmpX4BCp3rnOE4JQn7NJ/SUhoqHLGr5B6ovXhvrgyvkuePboDkzdvEzn5AsANj4QewM0GxvLr3HsUj9cvdADD9h7Y5cGsPdkC0yzGeA33sMmIVJP7%2bC9iRG4NNCJd1hbMywnP3e2He4zHwMb75kw26HoaCF754NAhhLJMj46JJAsA6ze3fERoEEPnu8R/hYB1WMzKtQjkoa%2bPcgGf2tkkLQIyHkmJSXC4vtnguaODrE%2bXuxlWjApkCs3r14UzJy4zI%2bEiOTn7rW1Vdw0U6/JiTG4c%2bcmTowzZzF1Eycnb8KdyRs4wxyOu4cXn5V1kLs/cxvo%2bb07N/DB9E18OHMLJpljuT1xjZ1P0HZ7Pjomhpth3pnqTU1eF2jziYnr7PwGjt9i794dh9TU/Zyvry83fYc5U%2baw7pGDmhzFqYmrrO0xnLo9go/YTB49UgBOzi7c5PgVnp5N3b4KrODt8cvC%2bSR7d5Z9t5UJ3dzCmrt6eYC/y55PTo7AXWqPRZ67U6M4yeo%2bmL6F/b1nQF1TV/gR1x%2b2/sIbqO1W5a30DRiy00VrPQ1wMNbh7Q01eE9LHTTWVl3buWPne2lZBU5FURmsdLR4R4bOTLT0%2bX//t13w/V%2bU0VvbFqz1Ndd3ycp%2bkJKRFynKK4G1rjZvq6%2bFdsb66Gyiw7uZafMulvrgaa2HPrZ6oKFCP6VRBV0dF15P15XX03ECEwNX3tTQnTc1cAdjXSdOUV5tXlpGcVVmlzJoaljzxgauYGrogdamAWBj6s87WASjtbEPyO1Snd8pJb9Mf/5LR9OGNzLxAktdV6S2DI3cWObnCXbGvqggp77A6i1Ktsr9QfLHD2LdzcWnD%2bu97akKne9pOroxNdzIjZ%2bvFZ/M8sAwe/W3gUHBD6R27HwX6GgjLmyofJmYmf5a9lsjTk/HAnfvNgOtf7ZAq28U3/p4uzxQUlJ%2b425uzOVVHH2VXZr/qtRff%2bNCuDJ/YY8i1xyqI66Lt4DOTGs4GKTHa2l5iSv3JswX%2bzq/UNL0WTKy2geGFmGcvmmYSE7O4b2Rvvl9FWW1J9oaduKcyLPzZbHnnyUFHls3lLfktHdqce5GezeCbVOXHazdHjk4ujxVkzMQ66WfXPqPjqm3ponNa0Z%2bWZyCZwJntqeQi/QqF/s4Bz%2bzs3Oc/eln2TXaz/SHXQr0x48YrN1nvvbwrNrTmStx754%2bmYC1hUlcej%2bFTye7%2bKxgo6XMfU6vzbTkV/Z4u66U3Lv3KKTu9FxH%2b1nx6sI4Ls6LIGl/GX73F6mVnFjP17aGSku%2bDlYbRdevP86/evVRd6TZ6vU0B7yS7IADYYZ8a5IV133IHgvCDNgMBXDXkt1eTCTqzTm7BK/q2e5Ffdt9qMeKiob7kqfl3pfWBq7vjPXcudrEkWfdmXMPHLSc53/60z%2bh7J//gtL/9h8g99dvV4I9PB77ubo90VWz5rVS2p79H%2beezP697MyCYkAaqu05gIqBKajrtX8j2C3hTbBr7FsFeQ0R/cULYZcY8QH7fW2wJNby3cWB1uVnc5P4%2bvEVePd8DN%2b/uA4Xq8L4wXwrjPM2wHAXS8hODHrf2NazIF5jYevRLXj2XATPn77FqqIjG305Vlx2qDH6WxtDcVb00pFYj/nJylR%2b%2bc4VpDLdlMufiDUSXyxyxaORhmBuFIw5YUUrgY5h83Ye4RCyLxXMHSNAzzYUra3jxbWJA5gZXIGm%2bt6YHd2wVrm/7b3Sd1Ii%2bW%2b%2bR6W//wQyf/sOv/%2bf/yra7394/nBozZqZniuGBlWsmyXUv5X1SRIFpB1FBf902OEYiaqeieKciDauLOoMGmhbofQuhU/7AzL8LbE4ynVjqK9lbeB4Cd7qq4fLHaUwdek4DLVmrgwfteNivfVgn6M%2blseH8n3dEzg6dAWvDU/B%2bNV7MMLS577Tl/mRSn8%2bM0gXAm0MGVBxxtpYF26gOI2f6W3E2QvteLE4DbqzPERXyt2gNFofLAyD4GBEGzo5HuAsHQLg3Mk6nBw5B0GBwWhiGcc1pZ3j0gNKGH73w9L9BQvZ0cnvTJV1RfG%2bXmjP7N1NShbN1Q3Wi2NOiUqjT6KJnhskB1ZjYmAJt8MqSFR6JAuPVFSBgV8YylvvEZcmnOIqYs6AnqYlMAF83CECWYHmtK4uvtiWu3b3QhOK3kzj%2b5mrONZVwXWWhi3dqHaFBF89iHbVx7LEvavVx%2b5udJUP4/KjOVyYvIMd7Lyk5PracFnQRs5ePQyxM4T6FHe%2bzltZfDbSDsVTlwDvj0J/kie2eMtxt2q9%2bco4fbA2DoHs8BYM9jy0bG0fLFp%2bMYOIa5iYkMY72CQudWRd4g8GlYONUQAmhFetH0o9vuZh4imevXoG1x9cg8pwP7RSN%2bDqUnv5sqgTYG7gAfH%2bVXg4plns4Br34VJfG4c4j0UVJbyDS8pCa%2bYAXx3XCQZaVtsFoAK5e8yxIdmJuz3UsDHaX716d%2bA4N9RWtDzSU7rc23J4aaTcYWN/gC7Ge5piQ4KNqDQnfa2j/pzowcQkf/fGXb4mt36%2bKtXr/c1jDlxehAGGORthc7w11%2bcnzR8z%2bw%2b8VpoCY/WF0GD7HfZ57%2bSvF1nxdfsN0c4kFLL2NmP6vhbREae9Sx3xodB2OBlr7VxWSmI7VlszLuHh0GPoYBSIURENG%2bmpbWuG8kZ8lJcjXm%2bvQltLc3Ay81iuS%2bznKmPOoKWhF6QEHYND%2b9qwIKZotbawamF8uAuTE4%2b8r03rFzWlXcDaxD401LZGKYkJ0AaJkmg7bEpxEI90Fa2Ojw2sj1y5xF8buyK%2bM3pqva0ma/7yMe%2bV9GB9TPGzgNOH3LEpy28hL/Dwoot9Kng5ZXF1YUlLN8psuXvltuL8UD0u2ssMz6bYiLsjjCDffjcOnGmB25d6oNpJFk8H6vAjacZrDYl6nLNlBBREtUNOZAfWpKat5gYYiONdjaAp2X%2blJrWH60joF%2bcHlIkdTIOxtaRv49aVaxt7TG3ggKoRltg4Q4prCNY3nRRNnLq8diyqZcPGyAey97VAXlQznxx4YNlMy1gkJf0jmmk7rVYnn%2bJaEjrFTZGnxUba1iAl0QASQFm0Jbbvt%2bInBurE0wxB9fX34tjoEM7du4wjzXEr41VmaxkhBpAWYA4DuXYQbm2wHrK3kndzL8ag4Fp08ziA5fZG7xfiYx9l6xq/TvAxwIZAfe5ssjNW2kmBc9lZ9KvtgmJ7KbwSZbV61yX4Qb215Qs36wjM3tMOo/0T4vMdedh9LBVv9lRDc%2bk%2bfDx4aWXSL%2bdRq1XocwdDr40n07P829kZ3KtlAHXRcTDS1Qg1AQF4KjaVe320dm7IMXzWzsCDyw4/ATGefuKECDdITdoD8jt%2bRCV5aXQ31%2bR67EPnbvkeemIkp7kupaC0KQBlJoCaFGduoDpePDZ6Ge5P34a5R3c31/0mbsLtK2f5p6d9%2bANhZvzhMCs4lR8gtjbex/t4MQdT1gzF5cfB2nY/RukFza8Vl8/lWTq/3R9oyud56omqgnSxOcEDbK0dwMnRBUqT/HAw2mr1YVTWbItvwGtP%2bzisDC/lXl2/yGckx%2bNBVzNoCLIFT3sbfHSxd%2b19YePc2aDEVw467htNBTWi6Ruj6OfoCGmpCXiu%2bwSEBvnjsYxM8cvC%2bmfDPjGP3S0C%2bf17ijhjLRU%2bMcQeC1P9wdfOCOwtDFFRagdfb%2bH1dDa75pmxvOaalLySQIigqpoW3Lo2xL8goPD0Abx99QReMvRG5fXLR0wY92D%2bzSx/KPsAf/p4DYOu92D8xjhO3mQY%2b9lDFgqnGRC5iXevX%2bc%2bTN1cLz2cLa6rLsZXT%2b/x98av4MN7N%2bAxC4FP7l4DSp1nJ67y71i99qoy0aHsHHzD0NscS11vjl2CuwwUPZgYhbGrF2Du/m3%2bw93b690NDRtpqWl4f5yl6TeuMOB2Ge6wtPs%2bS7VvXBumZXJ4fnN042Zf90ZMZAzcu30dRhkIe8hS7Nk7o3CbPb914ypcu3IRHo5e2nh45dK6jZUd0K9KttCgLk4yJEUkBy11EwojpDd%2bbQiG%2b88KcJKBEuEHEN1dp3F14QVDXA8ZcrtB6%2b7AAA8%2bnb0Nb149xNXVN1hZVYZNDbUoWnsndO5810kcYx0aZG0R4htlqHGDgaFTp9roN4mwuvxKEDR95woDL2NXziMBrNcMEi8tvsBz57sxK%2bsAa%2b8tLaoCkSz0nIEhYYme9gZ8%2bPAU7zEsE58Qhx/ePBZ2sBAUvsEA0PjoII4N9zO4PYvvGCR/8eKB8AOKj2iQ%2bAAiRGgHxrGiPFbyBejIEBnSTgtatydURois68wJIOj55sWssHfgEkOOXR3NDOJeZHD6weYOkbJiaGBweGPlDVzoOSXsDDnTWo9NVcXQWFGEtOxOcLijrVkgROi7xEb1MwRIOzlYHWHnB6E22j0y0HMGDh7IJB4CXj9/gLdGBwUy5vL5biDILmzWoB0i46MQH7e5QYLevX3jkrAv4ERjNdQUFwi8wRbf8YsNEp8IESYhIjCIXHj26C4rd4S9OsTWEGkhIURot8jLp/cF9oj4AOIOqPxqh8gW0SEhTmjmqB6bWYFg2U6IEHylQiTMk4eTQrvUHmmlsEOECWBl4YXAGVI9Ijio3a0ikCnMLAQB0ODpPgmCuAD6Jn2f3iMBbm6Q%2bIwQGWe2RVh5sP8MEuFAH%2bg/0441JQVA21AIb9NfjxAIkTdPoPf0cRwZ6oNH9yfwfPdJYZ/QeTbbpCm0Q0QgRJZfwdXBXmRaADNTDN7euootx8pgdHhAqHfieJPwx9mIEKFdKKQB9C2qR1TW8LmuTUKke4sQYfXujI9A35k2YXsMF8KpQgAAIABJREFUbZNhMwu9p1qJbaJJxLi4WGYmD4kvFDSKdonQWGqK86GzvUkYPAn5F4QIacDMnZtMLV/B3fGrRErS7guknRpjwwPwikkYRB%2bETVI0G9zae4G4YAWfMI25zZwXEQ8zk9cAxfMg2SGC4gUiQ4X27k%2bNweOZceGcSA0UzYNAiDCsz%2bqRtsGNy%2bfJnxCBgSOsPXpXtPoGhi70CpwgtfdybkZo4974CFFicJ35AuonCfTh9DgkJiTAyvwLYbvPxLVhgTihTVOjg330DtDkvWfm9pESk/yfAfl52dzwYA8OXuwTSm/3WejtOYPnz3Xi%2bYFOHLzQSz%2bq5OPjYrjLw2xWz3fi0GAXXLxAx24cHurBYeY8L7PZ9fH144OCArmhi91w/txZvMjqnuvvwvP9Pew9dmT3rjJHGBkZCU7OztzghU5W74xQr7/3LLLvsuutepfP069NwcLKhuvrOQkX2L3z53qwj9Whv1Y70N8t1L3CvltcVAgGhibc6ZMtPLXF%2bgaDF7vwAhvDpeE%2bdt2Nl4b6hR%2bC0/%2bSQZzAFiOkCEq7LXgjPQ%2bxurzSorWxyXr0Xj9MSYzlAz2jeANt%2bxWpnfJvdkrLixQV9cFQ14OzMPTlTXT90VDTkzfR9uMt9P1xt5zu8s4d8m9%2b3rFrXUFRF4z0vMTGej68o/Ue3tvHi3NwoV0ne8Qm2m4iWVmlNzul5Fd3yWmCvrYXZ6TD6tnu4WIioyA6Yh%2bGBMTwploeYvldqm93Siksycqqgr6mC2vPW%2bTv7spnZCRhRnYWxMeEgIO5m1hRTvu9lJT8grSsEmiq2/GmBj6cpaEf2hgHgr6WvVhP016kp27H7ZbT%2bvDjjzIfhB9%2bbf5miH7lpYEhnkmi3jL3V6WJ9s%2bunL%2b0Pjvei09nxmCGedLk6IhXvj6BD6Sk5N4Fuh0U16eOvSiLvfiyMK5IPNhYxV1pa%2bPs9B1Eiju0X0bti51VUFR6ZW4YIj4bu%2b9tR1zwq717/dcLsqMwMcYLWmsbuL2uae%2b8PX0famhoPTPU9Yb6Q1Hzp456vz5R37Jx8%2boI3hq5Che6%2byA2JH/JxytkVktLe05Xy0Ec13j8rWt96aOaMyVrk48GcerNGFybOIUWhmarNhaus3a2do9UlExE%2bTFdi43JY3PpoU3LttYxnKaaLWegpCLyMPPe8HXfN%2bfk6CwQIvTTvy0BaGNiaOz67eOaz8a7It5x/CreZzb47v4kPntyB/a6h732sQ19pqNmuuzvnL56Mu3ebFt679yT0RbxxuNehBfn4dLJIxDr47O8f0/BeysD9xVHi2DReKrr86EY7WfZaeGiNy/uI/mS2fvXsSDzyEK4W/o7ZzP/JQtjfxiqdXszVa/68lRNoWio/yJe7D0PQ729WLIvaWOvdeR7N6s9C2b6Hnxkc8Nr3/7yx70z51YfLzzEZwu34P78GO5PT18Lsk16H%2bwcN6%2bv7cDn7TvzciB77mGoT/Z7GVULjNYxx1C5n9FLw1gc5Xt4fp9H6rySorZ4F2WC9DtBBUV1CHLLweTg3NW6wprVheWXOFaSC0%2bYXT9%2bdIc12CiqjOvl/eyiwdEyBgsT21brs9NXn42ewMmeGnh17TjMDNZhRWo0NKSe48Nd0tHBMgJT/YtWSg/kLd4dH8JXTJB3bwyy5Ooctla1iCpi%2bhiwKkRLk2BM8C9YzdCz%2btBaUo1nW9ph/PIoTN24gYXmvhvZNgc3svc1MJTng9G%2blaKcuobFtrGT2HfnGo7OjkHXeDc2sVS9Iq2bL953Ak303TAmoJzLimhdsrYMFNk7B6CVsglEyiphkZwSX7m3DkvjepDB4U1ChKSgoKgBoe45mBhUD9VHGldGe5pxuvs4TJxpxKGuNlF5evtqY8pF9LeLAhfLRCxOqeaG6jP4wdZiPHeiFiZ66nC84ygMlB8Qt2b2cXud9qOTRTjsD23BokPHVturM6H3eAkOtJdje00WVhWUr9QmD3CJ3nlgYxIISYF1kJdav9peWws9J%2bpw7GIntNeVYUNx%2b2plQpcoM7AMbY39Mcjn6EZIeeFabt0hbCw5iDUNZdBYlIZxx4%2bIwzJKlnNCGjgzAw9MCKpmQijmzUw8ue7mUpZ9dsC%2bYD/U/u7HjUKbkMWymNPMnwiEyKYAFHdrQJh7HqTvqYdjBR0b90a6AdfewOrzu3ilv0tcf6CPa91/EYIcYsHFIhF6KhvEp4oK58/VHRXzy8/xzaNb2JZzeHWgMn/pXMlZLswxkwkqAg6GNWNaWOVKyYHshZc3O%2bH1RA82Hs1fKIipX2rPvISpvoVgaxoEacFNWHygUXSmuRmWX80gv/gUO9tbsDa3UdSUfBGyQyrB1iQAI33L1gP8D76zC/ZZGj5VgY%2bv9eHh3FjOMSDqXU5U48KRfS2chYEnJgUeg7SwY5yBvit3Y/AUIm5AW10JaqhbrZfHNi5URLZzhto2m3yARABRXoWYEdwEreUt3PSd63go1h%2b6WiqEXLsh6xTXln4NQ5wS0MduPxbG5H/IiSxeGCwp544fKcXTJZV44UiFuCi6YL4pvX0lxjMH3a2jiOmB/OiTmJdwbPV84xHxUMsRLi04d%2bX4gUvYmnEZ0wNL0d6UGKHjuD%2b4Yj13f%2bn7HGbPR7MyuYOxh9825OeutBac4g6F1qKdSQBkh7ViXkQ7eLulvffy8tzoqD6KGnrWCyXxp5c7DoxgZdxZJPo7fU8DJvtViC3Nw1ci9yat9HYcAxtT77eBVsnzbQeuItO%2bT4QI%2bQBFRU1MCi7hStPOiPs7WrmLfSfRRPk/oDE/FCZuXsKO/GMbpyI7l/fYhItC3Q/ikZjT4tyYmg1fC3dw1vFHR20/DLb15GsSTqx2hJ1ZjndMFvs6JjFBnYacqBpun68TP32xGWeHW9HSQBuKI%2bpEXXF9awfcsjdcrcMxP7IDavPPbJxsO7l6xC1UfETfg01E9VpHRT5cbG5bzQ04uOJsvgfzY07BoX01fPnhGrGRtR1ouDljkN9erjXvlLhp7/G1uj2N67bGPkzzGqHi4Alxa%2bPpDVcnL85YVwEjgiPXLp6%2bstGWcHKteU/rmpGWJS8QIoIPUNCA4tzq5bPHG7jjFYfAUlsKHbT/Bg0ZZgx0JOK5xKR3c0GZ07GGju9D3Q/hXrujopLsMi6exWtjFTswVbGC9LRU7E/P/zAbmDubrW3/yts%2bESuSTnPddYWckvxOPF58AM43FcGOHT9gWVjg8ouAnJlKU98Xrlb7MD%2bsg/dx2Cs6eaIGByPSccAoAAY6GzHHL2DtcXTOoza7wKdOhn5ME05CYepB8fS9a9jI0GZ8YgyMXruCl7vbRNd8k59csop46GDoxWfsaRD/f819Z1Ac2Zbm/tmfuxG7ETP7Yt7si3n%2bvWmnbkndQhIgCYFACCO899577723whRGeO9BOEnIIY8c8hIyeC88BVWVec7ek0C3%2bu3MbEzE7Pb%2byMiqzFv3Zp6899b9vvzOOX0XLkhmZz9gRnwwWusdg8ZaEa6tzMOwX9LYsHPKmJac8o5A4ofD8qigoMonBEeLI7z0MTfCHItjDKAoUgeH%2b6Ohp8wNq5xsl2eSRGPRxg6roW7ZYKYVKdVS8cBQT2/Q0dAF3TO6kJscj%2b3h0WvT6ZWT2UYei1GOp2QveitlAy2F6OFsA%2bEB7hDq6wqeHvZYEeG7tZJePlbjGLjgbB6GzaIembG%2bHlRXlsPb%2b4NwvboUrl67iN66BluvYs9NXvCNnLXT8eTK09r4V8ODfEl5E4pKKuDu9R4IT8jHe1evy6YLq6fveiZMWOk48UURFbLOpnru9avnDNw9gUvtJbA4N4YP7tzkH4SlTr9Lq5g%2bK39qe5cQkQeKDfD4/k2GwF6wdfML2FwexfVPo7C%2bNM7W1O9w/O1TfmViRJaRnMx3d7XTOhtH37/G0Xev6CWqoN8f/8AQF4OZK%2bMjspKCfL6BTTri5ffs3GsBghIKm5/aQZCEH9amP3Dt9TV8bk42g7mTDLC8YICGHCxGkYQRy5%2bmWZ0vYeHja9mlrlYuOSlJAGQksh778FogYlZYmbFRhvbG38Li2Bvu%2bf1bXFhoKEx/eM7a2UGJq8szrN5poLpJgLEw/pYbf/GYExwmDn7uMMGAwvLCuABzr/R2wNU%2bts7u7SBkJri4bK7NYlZWBvb1tNMrcCTJ%2b5XeNkF0QJj/Wn%2bHoBaRiBfxfGkRdVHY2liERwzgkHiCECbp//sF7uA6bm8uYGdHs5C8heojmXxvW71Qjl5rD16%2bgEM3LyORJVcGejFtx2FCgLTkAHG5qxl6W%2btYfQ0MIr/GpcVxfPXioRDAiaAxIVByvrjQVM3q6xV8H4gb6OtoxGlm4M8JEQEOPyeHiV2FSN35AmCwFdvrKogMEfD7%2btIkEB/A4LCAvAgON5QXCcREY0UxdLfUCuwL6QNKiwt/JERuscaJZGFwGfvaG6Cpoli4OCpHDhMEh6kcaQhqS/LhxqUuOo/0OptekYtXZwQfBeIDSElCUJcgdku14C4DZXlZQg8knyWBENn1GKE2yK%2bgrrQAqN32%2bgr211ov%2bEJQz/hXCJFRIiP25CkCMfGRQUwiE34iRNoFhcheOerapA4hImVqTCgHnytEiIXZI0V2lCSC8uRHhQiF4NtcnRHe%2b%2b8pPQi/f3g7LGD3HYVI94%2bECGF5Ok5aJnpYpBih7z8jRNiQ262Hjf2dcuTYRd%2bJPpv8W0JE6UdC5MNOd2bdmvx3Ll9ohfL8bIGE2CNEei60CTdJT4HcWoh4oGFQXXQOH9y%2bCj%2b6zOwqRIjjG9gVO5CYqiQnXTgm3lWI0BCgG3v28DZeZPWRSOrF4ztYkp0muMKQGoUUIhS4hf0G6VqoK5OHCZEiRIj0tTfS8N0lRMIFec07wWOklU2UF0ktAhWsF3a31AnGnxAIkc84weNKpwRChNRfRELQGCPXknFmtVesEeLbkFulIcBTd0RuDSbZE3v5%2bDYJl3D07bBANsyy8cmWcVBeVsw3NdSwz%2bswxaz%2bevgue/pP2YT5El48ukUyN2TnsPdCO%2bSfy%2bHpMwElUqSQyx7J4J6zoUckCb%2b9JBAiqanJPLVLRAcpVqjcNDlPsbrJdYZdu0CIhIeH8UTsLC%2bMCQQNXdc81f34DoyNPGPDaBqX58fBaM9rbDclDcTERHAdbBJqYxNLa3Mt1NRVYn19FXtK9dDaQsfqKZQWeHl5ch3tDdjMJrbW5jpsrK%2bGtpYGbG9rwJbmWmTjWgiiaGNrK9TXyMq0sq7e0sjON7L6O5qhobkO2trqwMnFmdMzMORbmmuAftvVwcq11EN9fTVe6Gxm7dayfQuF5hGIjvq6cp5dG7ay9kiGR9fE2obmnd9SJDxQPnWaLz8v4tl1C/fSzo63tjUB7YVrZnVm56RzFOJTCKKyE0NEHhTlDTndMx4y9ZOOnL6uK58VFI%2bBLsFwVt0FVBUN17/%2b6sDM/gOHtxUUtEFX011iqOkptbMK5kxMLeCUijpvpuUDmspW4u%2b%2blZs9cPCImIiTM6ouUttjxtu2SqdBW08VNM%2beQjuV0%2bCoaMDZ64fxakoG3CG5k7ymqrNMR8NVIn/0LG%2bsYwa%2bdq5sea4NWqfstg98Jz%2b7b98PK3KHT4K6ioNMV8Nt29bcWaqvYwCnlVTR2sKWtzJw3z504MTCwYNHl344dAzUVGyk2mdct86edpZoHDwt1vpGnjNUsZNZ6YWAPUOzRmdcuZ1Es4p7fIAyBrhES%2b7VmM82Fvgth1RewHbPVIbQRBBb1o0m6o7z7Cl82Lfv%2b0Uf%2byxpT%2b7I2EDZu6l7D15L7w%2b/xKu374EopxYsNXw/ubt6vD98RGHO3iyaa4h9MtkRfXmioSOZa76biM2DSVhSHwypto7SQo82LsQhm8FXB2l2%2b9BMWt%2b1CTV1k62yiBi8WZAPehqmqCF/YjPU1/ejqpr6uKqSqSy1%2buZ81o3h8eysgrW6bBGKotKhOl%2bE3jaBYhtz51Fzc/PR4/I60uimlmXHgYaPiWk5a/7fqPDWf/kebL84yiVYZcpyA7vZyrMNVE/qwkG5o3sGUMFIrwjJ/Rq16VeDCcs%2bzvF49Gt9UNxvBPUVLZgUWSCOdMxZNdCwlTqaxWw1RQ2P3agfmXz%2bfpR/8W4c303Ow7N37zEiIFmc6FW8bn7WZdtcP0DaFDM83pFxY7zjYY6062EONt9JhcY7SZho6bGZ59MuC3PIQl1NZ1n6hTuTNSOvxx%2b2N4uf11bggCgHPnS04EBFJhfhErHqYhy6qa1my6c0DM6k3x/6GOMQvB6tZIN5FqGQaeKPDqoGUj/72E8B1onrGirm4JdbtuTaUzjmb2Sy4f/NCQw7oQNu%2bxXQ7YczXG5gK5/LwNdpZf0f%2bYAdQsQ6GyPd88SWzlHbxw7o4dEvtUD%2brxqofsYeAr0LJA3Rg%2bhmFo5musFshu7dePL8g%2bTuo2G8%2b/gZ3B56DE/evGd/kwUgCuiEEPs0NNH1xTivBkleUfp671AuXrieB503cqFxIB5i4sI3KyOuQqRTFkNpXujvlL55rbN9E58N49bIA%2bBmXiL38C4sPR/G3LB8WapHJeprOmGET43UU9trNV7NAf0P6aHHPypD7BErdPlWm8t0r5CWhHXjWTVrDHYt470NfZdd/vgD7yunhmWeAdBxLgeMfvM1f867githqPG0st6OPmCPEPGyzoC04Baw1PffctUzx6H%2bXmjOy0NdJQNZql/lVnPiTXQ2CgIHkxiM9CwQ5xSVcP0MkNy73Au32IR2pfsChobHygoDmqWBNslooRfADFDPhScHb8SG2mNRbjw2VxRifIgjRqT5btbEXpPGOOah8VlPDHIUyS4mp0tHmurwwY0emH47BIM15fihuoITBVdspbiXgYGGM8b41MnsFKzEIcrmeLWzB85Z%2bUPcKXs0/utJWZpXqbgouB3OnraGSM9qDDYL2nQ6dIyvSo7GxoQEqM1JROfjyrIM9xxxecSlnxuA%2bABfm2zICGqBZL88SaSbFyCuwotbA%2bisbydrybjCNcUNgrtJKDiaRGOKbxN3RkldWlNRiihZge3lGbZGSEF7EydJW9IdLtgmESwN2Fh3r4ViIz/OzkpDfFLxOK%2bqpASWpqfFIgNPSUvEZS7WLZMzZQaI8ayV3cnIFw8lxeDEyBDw4gm4di4N32eky5qTezfTPcrRSNMZkgPaeVN5Y87mrwr4dPAurC7NQ75vNGr/6ms%2b06tcUhHeDbrqthAtSGREG06atp9e3booY/eCvbUVW37m/otlUZ3i6oh%2bPKOi/5kBjgqECBETEGAfK4uJSIHummYoyipFX7cw4gT5rvQn6GkeiW7mCZgZ1Mib6hvzsbGR%2bPJKFTzoqwA3N1c00WF/aSl3MMw%2bHe1MIjDdpUSSpey8khiYOa%2blenpLQ1lZkhyaOZ97yme1KencdnxImMRc2xdT/Jr4Av/c9Wpzq%2b22jBToqS2DCjNzWb1X7Hpd0i0ux78WzbTdMd6/ibf5p8Oc3X/9M4bo20BTTgE6/v4I2v3nf4RQgyi%2bJv4G6rMhG%2b9ZBbmhnew6mzZyohPFHXXFmBmetnY%2bvG%2b7JfUu1sRcRQ1Voz2FCPUAZYjxKMGsgFY%2bJ6KAGxubwrzkUgZIbsGj%2b3cx2zZdfDWwe91bx1sS6JSDToYh23baqrLa7Hi8WZcBg2wrSghBexWlrXKrnE8xZlESZ/MoLIzq4Ww1fDd8DT0lyVFOkBbjCAEmPhKvs75rfUney/FWjhvm%2bmGQHdiFiV6NstZwj9VcW3nw1lPAi5H6myUBdeu9/p2bedbpm7YmARjtUMCFfXeSzzL1wK66JrjQ3AJV8ekY/dVRSJYzW6vzqN4w1rSHzOBWzAyo5yId/GRX%2bnu4awOX8e6t%2b1xJbI2s2bths92rfkNTWY8/QP8CZAB5ZoAIp1Is8anmLoQkQ4R3AKalV0NqQgq0JZvhA/fExUnPrJHIMxbLAfZ5qKdkvfn7v/8vEO9qhq1ZYXC5MgN8LbXQ7A//vPwhIPt9uorpnCvrKfGuVZzeX9RA7%2bBxTIoww9QoMzBUVEWnfzi8/sE94n32D1rjcS4m/MWSDq4ivVs2eqcDBwr9sTneFiZu1eBQ%2bYXNEc/c0QsWvlMWGh4yj5Ou3KP%2bfrh6cQDr84ugMjIebg/ewLaMDNnHqLzxK9puHyy0nflox1LeSE5Z5qbzA9682oNjo%2bOwsrGGF8rL%2beovVN4/NQl/p75PfvOgPEWSklMAeQUVFMXU8n2ZNfxgejHGWnmAmaEnmus4QF1gFA4nilamU8sm4sxd1yK8cvH5dTbOA71Yl7SFt/e6cOR2E4T4WGOIrsH6fF7lVKaJ86dwr0xMDRRxLtoOYK1nClbmRmDNNgsDcwxXs978kJg/KdJ1mA9zMhPfac7fzE5NgtqaBv7JpWa4Xx6D17t6IT0wRDyeVTXd65%2bwYKVjL/Oz8eZz0zIFYQbR5rcuXQTJlhj7q%2bpk96IyZ697RU45m/vwMR6JnIuZPkOq6fjk4R2YmZ6C%2bYU5vNbTxffYuk8/C82a1Dqisr3rMrMDh1%2byNTODlKQKoReIuMTW0qsMAhN6ooAD6wyUZKanQX9vB8P5syRJF2TpBEJoTwEUiIRYWxjjSxkabKyvYiBnGmZn3gt1LS9MsP0ELn%2baEDxQ1lh9DA1S1Fj220meECCrA1YWWbuLY8Lb3hnyMWA4ZKCvC9LSGBhanxUIFmp7bXkaVtm6XmibrpdhhBcM0VIEiZVP40JdS2zNv8TOEXJcmHkPJLggHQK9LDUxs/j52%2bHnT%2b7hLh8Ad67349CtAWCYWxAjEOTdhcPY19MhvLKmcj1srU1hL2hPPvzE1gj6ACJEaisJ8%2bOT%2b4OCnp%2bIkG6GMYj0IOy/tTHHcEMT5OUSHzAvxAXoYJidcDvxC8QftNacxy1WBwNgQhR5eqtLHif9HTT%2ba4Q6aU%2b8BREo5MpPoTbpVX0Tq4PCe5CfANXHECR2NlQRP4DN7L4Ir%2bx5jOwQIsM7hAhZiSomdUh5fhY8vH0VGab%2bkRAhA5Cig262s7FKIBrICORUQfIVUnEIfEBtpfDen/yE2MWxiygSLoCMRQagc53MAOdysoAIEdIMkLsMXTwZvqO%2bktQfQjmKIcIMIKhAOhur8e71fmDXKFxnHwNmgjaBQfJ3DMmSy0xHQyVQZAkiaYgM6WmpE6A4g/DkYsOMVgufG2CvBwikwseRp4LCgogEivdBOJ7UGhS/I5MM0N0uKDrIbYXoKeqORIhQOdLkELYv3TGAQGCQ54YQDOXTpKDUoCctuMyszgg9YJcQASJLhFggrMsSFzHy8hEQ6UJqlIHPCJFdZQgbKhOCSw/xA0TG0Hchhkh4OKx%2bmvxRIbK2PIUz42%2bFWCPECxDtR7FJPg%2biIpCizx7fFTQ5xAX2k/cHxd3oaoayvEwhOss6G3M0BHovtAk3SeqQbmbZ4Qc32aR0R3hapMbYNQDu9gBhKBEVRT2Jboq6Nh0T72iEBEJEzPA7iaeI2CCPMKqTlCT0tKm3CYRIKhEic4KIinocDS3iK6m3UM%2bih0HKMYocK4TReXRb4CLvDV7Gty8fQhsbJtQ2BYmZZA/iR05QiNZ%2bXAXevHjEc5IlIhhh4v0zXJh%2bB3OTb5F9ZpPShEB0pKWm8Jf6unjEDaDzH18/xvmpEVimCZH1GNroHDMAX19bJZRbZJMPESuzbOIhz7PF6XdCzCF2jlJx8jlZmazcpkCmkIKE6ltdZE%2bJtU1kCsUsunHtIiQmJPAI60K7o6wcufOtLowJ10nECbe1iO/fPAWGWnmKT0LiKgq4ND/5hpUbxWV2bZOsR9FDoYnTwNCE8qvvEiI/HAUfby%2buqqgAz4sKsCA/j91EIcUUhmJRgUBxFeTngpq6JtjY2nGlRYVYVFiAZWWlwtMuLi5k%2b2K%2buEiERSIGZfWNwNDImCth54qKirC4tAjySgpQxOovKSoE%2bm1psQgsrWxAXUOLKxKxdti54qJ81paIssXC%2bdJiKDtfLOQudXJy5k%2bqqPLnzmVDSUkRlhfnCxNtSWkJm28KsVSUR7lMwT/Aj1M4psSnp6fwpaXFQpmCgiI8d04EIlERlJaKKF8y%2bRXxFGn2M0JEAU6etOAVbOKkKjo%2bMlfnAN7a3Bw93D14O8swUJLTX93/3aGpAwePbikd0%2bb01eTXThz%2bfkv7zHHe2ucoWnspgp66Knfwr3/eOLj/wNS3336/fkxRF3TVXLesTxmIjffJod%2bXihD6nRKclTuEh/Z/vX3gW7nJ7/bLrSooaKLOaW/picO6a0cPGMHXf1LFL36niIe%2bUeOMVL15E00fmZampeyovBqvdcpZaniarR73H99w2fcNZ/unA5zn3/1aYqVovulklIAmZ9y4w0eUeXVlR6nJGWex9ilPPsjBnkv1M9z2szSTmqr7c8eOqC/IyR2bZw%2bd240hoggKh0%2bgnmfB2n%2b/MjN1dPD90svh23C7pxpfDfWxv7drnL2p70xwcOjod1/JLboGJEhC758f8%2bnInglxs%2bTTEx0wL9MdfC30UF3u4EpooO%2bovPzxOSNtH%2bnjJI%2bFZ7E6M1HfKEpaFHQw3UIbAm010VlJcTU4KJAUItNn1e23y8MGJ7tS348aagZs/%2bbvv8Lv/qgNf/7HE2BvHsWJCi6yia0AlE/acF1hwYsf023mPPTc54y/PyQz2/cVWsurbyR71Uvygy5glk89qJ6yhUr/kKU3cWYzF/Oil/BNDvKvskHyJBmq45Il1iZekxZmlh%2b/2fe9WFCIsKUwyB9VQSv7pOXDrbdHbO49W3xyoxne3r8Ar%2b50wOMbHfz1/nppcUrmksFpB4mVVajE%2bnzmWHR90kJOcgB0NhVhb3sp5Cb6ob2BukzzmOYnK13vLXM9L1mfr%2bH4bX%2bt2YSzZ7knBfF4SxQD4abq6K5ivxnmmDXnaOgn1lSz3joX0DFaHfVs4us/6W0f%2bMspPPadAYQ7O2FVaQPUbNmeAAAS10lEQVSWnr/BemIiqqnYQHNw0OK9CONJ5zNqWzqKx9FUVQ205I9iiHUcJwrrhQzvatA4bYdFXsHLT2M0xx9XuW625Tnjyt0EaMt3xsctAbIop7jVcPs8sfIJDe57OXnyGVKAQ3InGcZP4S60l2x1NZaLH12ux6FLbKa91oK3uqv5nro82b3OFnAxDgFjzVDor67evN2Zyg/01eGrJ5dh9M1N7OuqgCdXsvHy%2bU6Jl2kSmhsEYbBD5nqSspa0OzwAFzsqYKqpDD5W52BDWJqsJu42xrnko76WGzobpW2rHnaS6CvrY0miH7QXJ2J9ThjkJVIKnQY8cch4U5/B4WjvOvCyiN7WPHIU7M5qgdWZM%2bBubgDmyoZcWdQlyAtohLPqNhjgXA5ZgaHLvbmmEO6ojoMiG4h2PYO3S6y4sojCrfLIqwSHf2KE2LjBIJcU6fWWMkl9bsp6X3Mljjy9h4/vXMcLlfmypsKM9YHaxm1rrQDe3yWGv9maA7lpwfjiSgeMDw/i7PNbMNTXDPlZwXCvtYIPsovnrQzDMNwuXRp55ARfGxWAjy62wMOrXfCguRifVBdxlaEN27EuhXjk0BnexiIJY0MSsSE7CB4NNuHMyG1oLo3DUAcbcDNNXI20z94y0nbFBJ8GdDUN3bA6oya7VJWDHWU5UJ4UhHrHNTfLo3skosA21FG3gUj3Coz1LpVWxLqvj9xvwekXg/jwUjGWBHutlkX1SM%2bHdqO68k98AMjLq6CPdZq0sTBzuyIza6O7pmJlm/2NTL1%2bKKnOOrfcXpK13ZxeIXY1jEBvuyhpjIvJtoOhEjbnx8Pm9AtY%2bfgYKjIi0Ej1e8wPcZDEeCRILM6GYVpg5WZdgtfWUEoULrx6ACujz2E4JwVvN9ZsNKcNrCc6ifDkMQOxt1veekFSIp8f6ojjDy8BLr2FqrQITPWzhvPhpZJsn1o0ZD0gwasek/3KpXJffs111RUiSifAXO802mk4SLoyhviigGbQO2MPUa7lkBnUiGnBletPr/Zu4dY4Xm9p3hRFdYobEq9g5ecuM8IQOKSMGWFZ0rqcGHGs67nNtNCyT3f7OmTtFfXrWX4Na7mh6eLuapHU0zKCdzZJhBTfrFUH9aOb3jZ62F0QB405EWiteQQ8DJTF5XH1G0G2mehiHgz1hS1rtzJi12%2bHReLM%2b7dwubwcGk0t8GlWmmy4f0ia5C0Ccx1vPsKhdDPUPmo52ddB4mlgit6GDhBorYsVKT58UVS1JMe/CU3PusO50D42BMK573/1PyBQ9QT2ZkaB2q9%2bhacOyvOlUb1YHXsVDTQckKQ%2bGRE9mOFRwovsbWRvB2ow1cBUWh/VB81p97E27vrPCBFQUFDFcJesrbTgxMXy7FbpvdtDcPnKDRwaegj9nYPQGFm%2b3OYQN%2bqj7bHlR04SYb18akDeWnpyMmetchqP/vo3qHpMVVIVWLt41at5KUo/aMvJ0l9clVKz9LLuPDdUV4fv7t2FO/WZkO7viv3BgfxYTOx8upXPvLVBIJbH96O/vWhL7ZCx1N3CF8Pco8BUwwbdTD0kvZ7li0UWqetm2k4Q7pTBWSie4IP%2b8Ft0PnUIvK21wf/AF%2bj6%2b9/xUadtl6ss05YMtRz5NJ9KvtAuXZZxVJe7mhbPFmfL2BHoi7aK%2brIaN9Fqp/P5FS2ls9weISLwAeF2RXy8b87Sg6FbPAUmu351gC1z2TqbLSsfnCtdmHRLfxujZb3sYZGK5/w6eFM1Jy7Q3QUdNE6Ao5ocOJtZYtwZr%2bXVuPMfM1RM5qJCcqRZJoGSZ43n8UZtNYQY62O2rw1cLCvFV/W1mx8tg0fqTdynLXX9Mc2nQxYf0c1nxZfio4EBeHn9BmSmlKC3lpN4Muzc6EW7iKnj38iJFb7dx0X%2b%2bfeY%2bNvfQWl%2bAt6/2gSxVgZY%2bN/%2bXvrQ1nf8op7LO2MlfWnONyf5KpVjcP6r7zHbyBQu9daDv4oafvvrv%2bM7dczGhn2SxjS/Py7eUYjIKYDiMRUsS2/h7197JOnpbOZfPn/G37l5HZ8%2beQh37t2CG6LS1eWK9uk4G4%2bN1IgS7Cq7xFUVi/hz0SF4MScYWiOcQRThjQOFWRvLVV2zGZYeKx2tdXxTSgp/MTcHL2XlQGpgMCQEhkBrbDwOlVVsf0gtnG4MjlnydY6AtqrHnCj3GgM372B65DGOPr8Hs9Nv2D9KnmQkr3auLzLzk4WeiSTB14tv0NLCAbYqHbo3CH2ttfB46DZ2OzpyL6NSFm7E5sy5aOpx1z38sTk4ENuDQiDDyQXc3dj84eiEEa4OcDs6aeFxVtGC9gk1yQE5hZ/g8KvnQ7C6NI7z0x8EYEGvxAlREUASPDd2Ikripf5OBoamcGVxbMd7Y%2bojzs5P4qeFcfg0/5HKwS4fgNviBZxha3VCmURELLG1OxEVU7uv2xkaZEvsHNjenGXtjAgKDiJkZiffsev4CHOsXcIF9EI2IyMVZeJFnGNtktfH6tIUrK/MIBEyC0R6sLU%2bQ4MYGRWJn8ihY26MHR%2bDFXbdAnnDPhPSpHuZZBiD0on9rceI4GbSXlchEBGExgjhMaQlQFhymdnzGKF39mQkwuKkwKgpOgcURIFgJr193XOYIGMQmULojYQMFGShp7VeMCrxBrv6AMFoCzMfhdfhJGig0BhEdBCc3XWYwD2PEXooFAeAQmKQSIJIFIoUQW%2bD9/QB8zseI/iCIULWpsA/XGiqEeAwMUMEy/%2bFkJp3BVcYUlbcuNQlECLE5FwUoPEDAb4KBtglRIg8uXWlV5C0tNWWCawPPV0Kc/FZTFEhqOrtq32CUa/1d5JCQ%2bgNVG7PY4RujCg1utDmqlJBHTJ0c0CISUJIdC%2bmKDOuUB/JaZiR8HJ3q2D4qdHXggH2%2bAAyOrVBThrEQJGWgJwsiF%2bg6yaNwOcCiV2FyH2ynFCIutVePI8Pb4eFuB2E83cNIPQAcpZaEni3McEd5cObJ0AhLchQpbsKETLAyKtHAtVGxAR5lxAeZwYVCJbPCREKeko9g6I/0BMil73X7IZ%2bIkSShIdAbQg9g5Uj5QeVo2g2FCaTekB4eJhwkx9HngrRZlcF954RIaAqkTa7LjQ/D6pKChEaPyQhIXKBqCa6UKKo6stE9HQFfi%2bbvMZ6O2ncCRFcaAiQVxjRT%2bX52eRiI%2biHaA5orK8WvNCIXCGKigKX0BMjpQbVT72oq6NZyBRH7BCdo%2bH36ul9QSNUVXSOqC6hDmYAEkkJYipSm9CwHB4apPC6RNsJsU5oXL9%2b8QgjSSQ1P4r3bw5AC%2bt1VObZo9tYWZiL7F4Eg00zI/yMEFE4pkyUGC/ZnCd5GcyxAiu7pMT81AiSMxW5wiQmxPM9XW08citElgjkBbmoLbHJj75ToGXk14hH4KsqSnlSlbBjMDvxBmm/NPdRGJ%2bLu%2bXaWup5IlmoHAVxImXIMrt42ojooA2ly6QR4mOio3ly26HfUlsk1VvZJURIE0TqltfPH/IUvoOGFE2erF1YZOfoM5WhtsnY1IN09QyB0u/8p50ka0cEoiM9JRXTUlIwNTUF0lKS%2baz0dEhLTQU6lhAfxx87ocwbGplwacmsDNuSE5MwPiaWj4%2bOA/pO4zQ%2bLpZTU9fitc7qcQmJCRgv5AVNgfS0DMxIzxRy/5GqlG0cuwhe%2bZQ6n5gYz6ekJAkTHaX2Jgepvc/0WwtLa549JD4mJponaoyVBSpD5z8vR646h48e58PCQvk0oVwyUFlK8rb7G2K1KIs2//MsM0cUQf2UvczCMm5DTc1l89dfHN/4p%2b/UZb/bf0aqf9pX6mmSil4mqfxpZX1ORcmUMzWL3jDWC93ydErl0/JrtpOzq6S%2bjtmgdthy/cjh4%2bOHDx9f/ee/fA37f/dbsfxXX27pn9bhTDU9ZIZqrlJzbRPY/8W%2bra%2b%2b2je%2b79sDS%2bS5%2buXXB%2bCLnU1I9/nFT5twjMYq9dTdPGiwd/5vygr5xIjloZxm/0Y5oPxje6mCd0JoyCmhh1/%2bavmHmTG/iraJv6rZyf6q4Yj/oGgIqtp%2bshz/VigOuwgO%2boFobRu9IXo2OlZ059nE6%2blFydjmFo5LtuHNxDL4OSQtBfgEjSkrnVn48g9/kdwJUZ97lmg8baSstn32pAaqH1HijU4oo4WOzkZIcMiEvPyxGcoQdVRBCY7In9jbcHeDnRTAJ35KmvTT%2bf%2b9nPzPyx396dznv9k9fvzHfOmCAY4cVkJP9xxxRt/dCZ3IjIVDRj64X98H/qpqi789ac772mXLKiMvg4NBAFpbREjSL9ydrHzyYvbG%2bwn%2b0fQ8Ppicg3tTs1hc2b0WbV%2b47mISxsnv%2b4s0x1huvtz%2b5KLyD/K83uHjqC%2bniMoHj6LpqVMg/92B7UNf/In8dnbzFivCvyft1n/UJrweP3xUiRwm0Ms2a%2buPx42kf1Kzwa9OGoGlsRV%2beVwHTQ3DJS0JN8HRKAjsjaMwzLVko6h7cLP63issufYQ6q4NQcHAfUwRtW9URFyShTqko%2bZJnQ19NYtFVYWTG/L/85/Q%2bI9/AN%2bzqqAtdwi1lVS3HHWdlp10ndfljigIUWz%2brXzk/7cNIEhk/BxyMTGgauubY6bi38hpo4%2blIXRlB6PCcXVJkFP2VkfKPXQ2ChYMkORTz4cE5S%2bXNLZzL16/wJcvn2J2dbMkMbJ6uSn%2bOvhZxoGFfiimBrZInExCFw0VFaX18d7Ymx2KNmoqMjejkMWWlNtbCa6lgtvKZznEfhkDkMOEu0XK1sClYXFCZhV3WNUQLucFQEmcJ7q6Ja1Wx/Vtt8UP4q5CBNIDmjHVr1ZalVm5QgFV10aHuaK4quXK6F5Za8IgkELESj8IUn0bMTeqiw8ydFq7mOIPA1lh6K%2bmvVoZ1yttS7yJSa6FzABC9rlfzgCCPkBBGVoaBrip%2bRV4%2bvwj2nvGg6W2HhjpWqFrQB6U5N9gyG4Iva1i0c0iHrLYpJgd1cq7%2bInE%2bhr63Bl1Y2lYTP12ZfIlaE97jKGOmWhvFAYZAc2QHdwFEYZekpDTX0Loma8x4ITGWkXUZVlbxiMGg6txtwfgL7XtYoHTcOXWM5yYXcEXr8bAztIbDA4dwVNHVeArdXu003Tf7HcvmvXXchX7OWZgVkAT9%2bDBC9mbmQXUdQjBmOxyfD07h3U59ZvXHMsWYnR81l2tYrAwtAdqC7olotRELlb/OCYZKGI%2b%2b9yZ17F5lZXLN41ZPSgn/wv3ACFd5ils7xmC1%2b/n4ebd15ib04ixNsbgbesKv9V0Q%2bM/KC5shma%2bjdQy/%2bSkn4g9tfdkEk4CV%2b88hs6r9%2bHh46dQ3tqF79v7lz9FF73PUDaacTVPxCCTLK4gPozLtNBFLzUl8Nc7A5FnT%2bHVcymbH2yi37aY%2bU7vp6yVQsK3X8oADAwdO6EK124%2bgnejc9jbNwhPHj1lKKsZnz24D6LmHqxOztuYqmqfj3f1E6fHiWBmaobf2FjG9u4%2bGLh%2bA1%2b8fA4XBwdx/smweL6ldyHXPXA9KfIcFKXlczUFmVgVFwkBri4YHugH5bHheKW6XDIiqplvi81cpbieh3/JHrCXL/TF8D1cmvuA5OI6PU7BC94JARSWZt7B0uIYbm4yMJSTyYBJF26sCIgN5hlWoMwOU6MvcYHhgmmGG8Sbc1hWUYpNDCxx24sCRP60OC5gBgI2y8QRzH5k9c3hZYb/2Xoc/rVU2//PDLAXUZIgMDk9MBSIJC6gUBokXBCSopBAImPHY4SSp9AraPIYqS0tEBQbJJAg36CNpT2BRJWQZIWwOXELDQxVkpLjUmezUI7e3l7q64LPDAC/pAF%2bDKFBN0sEBgVToRQVFLlVCKrKENZnITQEA5D7Cd3cg9tXhNQ4u6ExGBzeZYQo5gc7RroAIjiIPHl89/pObJBPE3CpXzAA7i1hf1EDPNtViLx%2bdl9IQrK4oxYRcoSQAmSPEOndUYgIoS4oggPxfJTQRAiX%2b2aYIszs%2bAzV7shbqBypSXZ612tBc0TiC6rjYl/n/xcGoPCS%2bOLpfYFGonggFAKXiAmivChsLpEjhKMpl3d/b4eg/CClBhERpOi4c60fW2vLSNkhcIdl53cIESIwKLTGheZaZshrAonBhoJgVKqDYoOwSfCXnQN2s0bDg3s3eIoPRK4rpNaYI40NOUVN7bC6RJZERUXyRGLIxIsCfUZqkgVicife4g7R8REp5gclTykpKtgpN/0OP6%2bP6qdyEsFrrInft//QLzsH7ClE9A2MeYrp4R8QQInXIWBnj2wvfPb29uEZbOU1NM/ydJ5SW/9tOcpIzzYiWXllldN8gH/A3nm2pzKBuPNbf6H8GQ1t/uAPOwuhPYLiF8ACOw3T/zERCV9/%2bz3s7nc24fMPAolAsHUviTod%2b7Hcvp/KUbL23UTNe3X8i/XR590s1PDvzUD9H94DdjJCH/83CYc9EuH/REzQ/t9Tbi/P0S81BP4Xf1P%2bF/eTSNYAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"950\" alt=\"UID 查询\" data-srcset=\"/assets/static/nonebot-uid.82a2fbd.9e953ceaf4795c9aab166c809ebdd967.jpg 480w, /assets/static/nonebot-uid.991c9fd.9e953ceaf4795c9aab166c809ebdd967.jpg 950w\" data-sizes=\"(max-width: 950px) 100vw, 950px\" data-src=\"/assets/static/nonebot-uid.991c9fd.9e953ceaf4795c9aab166c809ebdd967.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-uid.991c9fd.9e953ceaf4795c9aab166c809ebdd967.jpg\" width=\"950\" alt=\"UID 查询\"></noscript><figcaption>UID 查询</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Pillow 绘制原神每日材料查询结果</strong></summary><br />\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2096 1428' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ec61728de5dd7cd2f690a4ef19d6dd20'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ec61728de5dd7cd2f690a4ef19d6dd20)' width='2096' height='1428' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAsCAYAAADVX77/AAAACXBIWXMAAAsSAAALEgHS3X78AAAZEklEQVRo3s1693NbWZqd/gqX/YN/dJVdO/bWuGbt9e54vRO3ZqY9U9O9HaQO6qBuqVvdyqElUSIpBkmMYs45AAQJAiRARCaAJAiSIAgQzAHMmRQlZlLkOb7vMYjqbnVPuVzuYdUtvPve9%2b6977tfOOe7PLGzs8Pva7vPn3N9fYPb29sEcNRe9bcl5J6Ld35o3L%2b0SWNtbW5xY2NTHn9vb%2b97599/7y9fwwlJ8Lua/PG7u/LHj45Pc2BwmO3uDra1udjmaqfT2cImR7PcbDY7HQfXs3PznJ6ZF%2b8%2bP/qA/5u2c2wN45MzHBmdkOf2eDvlddTW1bOmto6OZifr621sFusxW6ycmJjklJh/a%2btQCd8/z4ntrW2I3YWYDAdaOfyVtb30ZJmz80scHBigTqejUllCg8HAzMwspqenMysrW25FRUUsLS3l2PgExyamZcv5Hs0fzbW9vSXa5nfOf9ik8RYWFqjRaFhZWcmcnBwmJyczIyODCqWS8fEJLCsrY3xCAgcHhzgxNcu1tfWjTfheCzg0nQON4HD3X1jCcz57tsI1YQnrwgyfiuv19U0xwQZXxSRS2xAmKt3bFL9z84tcXV2Td%2b77LED6UOn38G93d0/c3793vEnjSOM9W1nlpthVaX6pfzi3tA5pXfL84vmT5WdcXFo%2bmv%2bHrPBEs70d7c5ebO1bgrww8TIOXpSt41AxUtsTz6S%2b0K4kJ010%2bFyWEVZz%2bD6%2bseMv7fKBmcPvqUaPrRDrz5bwXChB%2bC%2bOnh%2b8I423t7crKUief/dFo7yOY/Pvy%2b794PwHc%2bDEwy/fQOrdW%2bjtG4PNVkutVkNHUxNramqgFmZVrlazu6uLUuTZ2hDBcGtL%2bNfW4S/ka6G4feXtK/FAkYd%2bfHBv51BuX9HPd7m5vgLL49dhDPoJOu0qlJRqhYlXUKVSsbi4GGXqMmqF2UsuNzExISlBzLcpj3OwBmwfzv9Sf2t/vq0X8700/9bRGnGiVpWPIZsee8%2bJxaUlzi4sYV606Zk5Ts3Oi3vL2BKBd0%2bKwJIaROOLxmPXkuZ57BrPxQRixw7u4VvvSP4/40rDfHscVpYmMSMC6MLCPOYWFjE9O8f56WksLC7hydNn2Nk7ivyvnP87%2bt8rI7tAuzYOhdZqFBTncrTDhn67GgM2FRcH29ihScRUX8ueI/U%2beu5%2bzY7gq%2bxv0EGZm4Xyx5GMCUylJScZXmcXtCW1GOrz0aCtYVOtDx73AJpbvDQaq6nINKDDOYD0hDxUVuZTlaeFq7FXXkRVcQHUKTHUJD2ERquHz92BsoQI6LMTqTSWo9vTBqsiH%2bWJEVTFhbJGmQVPkx2KmAdC7hE1KRHodTVDl5cJRdwDliZF0GFUo7HOi7RYDfNTDMhNMMLT0ofibCtyEiqYFq2mudyx7wLq9PuMNjTyQU4x68rS0Zh6Be7yx/Q7K2GJ%2bgQtJTGo%2btXfsuG//AfU/Kd/z/qAi/jyzDWc/Ls/8Y3ffsg3f/ozlD3MQuyVcDbbbVDH5zAjMAt1dg9cXQN0eruZGF2EwmQzIgLvY2zISXWhAur8Wnk3Es%2b/ibAPX%2bOjy58xPOQhLMUZCH/751Cr8lnSYGVzRT5Sb59FWkwYLUUZNOmKYMyIwv2Tv2DOg%2bvIu32atpIUJF96D2lfvM7sKyepjb6A4sx6XP7DFYb8w98j6N17NChbEHg%2bF3944y5//%2bZtpgaWiDggKaAokR1DozDZGlGWk0CfKpxtVQXwe52oSb3JPmMade/9hq7YUBg/ehOtEbcYczeIIVdvwWaqxJnX36ApV8usyByODDihzVGgJMnMvKxy1hmr0NnmQFJ8FrX5DubGZXDApUNeQjKNZa1S7mFF7A2mPn4gFBQMZ/ZFeqqyWRnyAe3lGTA8PssBUxqLVXkscPegrTITrRURdJcnsyToFDOrNajID0WXNZemB5/Q2mCGvSIHrXmXaCntYPrrr6Pwtf/IzCsJcJn8jAwo4D%2b%2bdx03r8XBmNogx4UTl9//E%2b4EhjEgIpKNReEwpt1DYOBtFiiUDLt6Gj2GDPzpv/8NooJu8dpv/onJdy4hI%2bg6Ir86zfSwQD4486%2boUjQg5m4BNGmpTLofzSZLGy6fuYuyrFg6DPk8/9FXMBR34OqpCHjN2bz%2bXhgMSq%2bwgF2oMiNQkXKN7oy3OKL5AiP2PNgSPoIt6zN2Zf4es85sVOcEwF4eT7fyAv2aLzFqTkJscSDyKkLZl/F7zDRlwlD2EBmdFrrzPuC0%2bRpc%2bn4oruVS%2bXUktCE29tumUBZRg6tno5l8pYTOgl45E5wwVzvwMCqeSo2OT%2bYnsTjWB5fTwWqBsvxdLjyZm0ZaehYeR8cwLiaW7R1eLE2MIz89gw9DH7C7pQHLi6uoNtVBk11Iq07P5eUlDPYOwqQtpaWylF6XCwszKygrVqPWVM7iXAVmJ5exvrGOaqsZ1eZyemoK2Nuiw0hvO%2bxGJToaNGysSMZYvxs9zQa0VmWyvaaQXc2VmBnphqreAK%2bIVS5rrlhzN2wdbbDZ9Ww3pLGjsRytDe0wljbQZnChWm2jo15YdEUDbNom2iocbLN1YGNjAzIQGh4e4NzszFGIFPAXE%2bPjR2F3cnKCfr8fk1NTUv6X742OjaHT58PWzn5/eHiI/vExjIt0JZmW9NfbN4De/oGjcYaGB9nh9cE/6ufunsQx1jEtIv3QkJ/D4zOcmFmUM0Df4DD8Y1P0dPXL/anZBfQMjnBwZJJD/nGsivUN9vZjeHSS/cMTWFnfxKRY78DAMHuHxtE74Mfo%2bAj6h3oxMj7M4dFBDAz1i9aHAX%2b/GGcQYxNj2NwUChgZWcTC/No3U8S3Us4hCTqEr4eE5Pl%2bnn9JRgZQW9tH4%2bzIuXjnaA5J7BDo5CQZERemZlp4KTUZlXDUdyE6SImkR2VMCVXBWduJ/DQTYoME5L2vpDLbgjqzW7ikkAkvY3JoMZrrOpGVZEBscAkTQgRUL2lAvdmDmGAVU8I1iA8vhdvRj6wEA%2bJCy5kRqWGNtnE/CCbe%2bxKp96MwLDRXW1NNi9mMjg43mx3CDaxWSE3wAPnjtjY3jz5GAiISS5M%2bVPoQAYOxKe5JcHj7QOYQFB1yjeNASEJwkuyDqwre%2bTgdd0%2bdR%2bqtLFYpWvjV6RSGFdUg9GYuDYVNjPi6hOFXi/DoZjHiA0upzrPz5ocZDL%2bYhdBPk2hSOuVxgr/IQfCNDOZF6FiSVsvrH6bzxqUs3PgkTcg0M%2bRiIe9/noGMwBgWRuvEWrd5wpQRiIbCVKyu7cIrEJ%2bn08cRYd5Dw350dvewq6eXS8sr%2b1SU%2b4Do0DpwZC0v0dMXiAV7EhDCPtZ/gf9lmH2gAEVEPTNvlyLhUjTKY%2brZqu/hpfNxDCnUIzvEQGdFF1UxNkbdKkLuvSpUJTayQdvN9JulTPk6HAXBFjh1QibSxti7%2bch%2boIEprYX1JR2MDahEaJqe6YFVaNF3sehhPQuCC1EUlIeqlBZpM3miVVeMThHYnBYTZkXAmRv2oU4ngktTNb3VeqzPjWOo1YSZAS%2bHWiycHZC4wwAarS56HV2st7Rj3D%2bDCk099FUNLC%2brxUDvmDC5XvR0j3J8ZoGOGi/W1zZwQFCOsP721g6Mic1QBZTSGN3OhkwffLXDUIRWCzxho%2bFBC/pt4yjPtCE/xEhDRAttWR64LcMIf/c%2byoLUrIpoQ3e1H4poCzJDNDQ%2bbKU91wOPcVBkGCdVsY2wRrWxp34MlY8boLyvozHSRWdxD3aElZ64d/4izK45ZubomffwLkoefIGf/Nt/w9/%2b7Ke8/LO/RVtBNGojP8XiUAeG7GV0Fj7E40fluPpVBG98co/3ArKgyqjGL359jj9/7Sx%2b%2bg8fMvlRKbKE31p9frZOzTEhUYepsTnsx4MXpEQiLo01jWgw22m3OGi3NmHMPwGtQo9avY2VJQZMjk2hr2cQWqWeTdVO%2boVyd7f3RByogzJPzWHfKHY39zA%2bMgV1cQVtxkZuPt1Gj68Peq2R7fYOGDVWzk7OwVhpFuPoaKmopcvRIcekEwUKI5uafNAaWlGtUbEs4iqDzp5FemgYLrx1ik2KeDqjL3PW18Reawk8mnTGR5Xyndc%2bw5//%2bV3cuf6YemUbT38YAKNByzOfByI73sjMdDPLbK2wd/cgLFLF%2baknslMIBfA4I1xcfsqFpyucnZ/l%2bMQYl58uU0Rsjk6MYlBkp2crzwQFXubwyJDICHNY21iV3UuS6x/sk/sipgpytSMyxCCmZiZlRT95siRlJiwsLXBiSmSOtVVOTk%2bKcYYxMubHzOy0XO848ej2bTQ3upmSkCvMKxiPLn2GWyffYHtxIt/5X7%2bETRGP%2brgrcJVl0h51jt7iEIRcKUTsnVDWqhU8/1agAEJefPmnAHRqMxj00T0Wpdjx6FqpiNypImrn89rHWQJPPBMxY%2b/IAg5qDZj1uzHdaxe7uvFN4vItEiNCimw1UiCVyJYcW57vYn/M50exRwrAh8/FOwcxaBcvBSuhNRkI1WhLUKG3UKVQcdxdi1qjCQ%2bvX2PUF2eYm5gMf1c7CgUMTr1xiTVJoRz2NKHNPgCdukrgciON5Tb4%2b5ZgKjIhN/Im1an57OuYQb9vCqlZKkYlZNHTPoqV5XXs7h2PAbvc3lxHXuDvEH3mJ2g2F0Ol1gr6Wy5lHqnCg5ISpVwF0pSXc2CgX8pEMh2WLEiqX4gsJFNbqS9T5E2ZnuOoL9P17SPKvvWCwsvvyWxQUkZ9fS27RAY4VI/IBqiyWPFcmMjq%2bjoNZgudbS442tqFic3JMv6REVhEitza3pD7T549oUmwyiFhYocqbm11orvLJ0HewwoNjleDnu8IX62JglN1DfOT/cI0JzgsAJegxQIsjYlsNI6R0TEM%2b0fwbHXtWJbBN7DKS1Rb2twflDmgwzjxZFnk5R38RUBIupRNUGh1d5/nHxY8BPd/fmhqRzhAekfys%2b2XzP7l64aqCliVuagtyYbLXo3R3m5hTTmwlStYrcrEWF%2bnsA4DjAUCIxSksdlcjs72QUFtRaYorKM6txY9Xj%2bqNA4oc6pZXlDPdkcX2lv6UZRlYXmhnep8M3o6B1BZ2ghVXi1Lc6101LbtKyD6zpfIjEoWkHReQMl%2btrW1YXh4mAP9/ezs9MLj8WBqalIqOx0BIWnhUtX1wLQOQY5kkjwwwf00t//sqC730q9Q5NbmBhMvnELUh7/hjbMfCtR2i/XFKQh4/X8i6P1fI%2bid/8Y6ZQpTrn4kZP6FAe/%2bEsUhn8gf/fmb4Th/6iIuvxVOg6KZQRfzcOODFN48fR%2b5UWoWplTj0slE3Po4HpdP3qVeYUPA%2bRzcFCDr%2bukQpIYWifUJF8i8eQplkeEYn15GS1srS1RltDc2oVE0g8lCa3UNxyenj6xhH9bgpWAl1euOW48AQC/M/BUl90MFGKO%2boCr4fdz%2b%2bios6dfYZy1g3Llf88qp/4r0a7%2bAz5zLmrjLTAk4icirb1CiunaNmyFfxAmgE4KkGzlw6rtZGFHH1NsFiL0YgcrkRtaruxjyeQLufXGLOXd1cOh8zH9Qy6RbKYi5FCxkHFJA5omhlhqM%2bdoFAOrC1rMFbD%2bdw7PZCW5trPHZ5CDwfBMz/m6M9HdypKedK0szmJlcRK9nmH3eYY4OTeHp8gqG%2bybR3zdGn28Qi/PLRwHv1RVhKQhuoCHxI1RFvsuWlLc4UHIGw7Z8RH36N4j96j%2bzLuZXmGvJgT3jAorj3mZn9jsY05%2bHu6obGdfL8fjaY5YGWdlpGYEutglFt5UsD7axIceHJrUXSVezqLxvQpUARx7TINQRdmTfKWP5/Vrac7yy1Z6oTBRc2zPDmkpBP/Puo6EgAq3lRRx0e2iKvAyPLgWFD77E4OgUK/KTaM8LRXpwPiLDLjI%2b82s%2bOhsEvbIZH78Vhj/%2b8i2e/MfXoMzar/ZIEfhVCtiRr3cw3SOIiyaNndZ0ro42YHLQi8qiCHQ3FtBrThYb045qfQGs6gS6DUnsaSqGv3tUxAkbmnRuWhUNgjJPwayqRkVOFa3KRnrsPWKD%2bqDNr2B1aRMsShtmRxdRo7WjssBMQ0Ed3TafBNRxQluiYWvXHKrb58SACroMhWyx6uG2quEwqNmpjWNtTgz9M6toqzGjNf8hE2OKWGwMhc4Zg5C7odQVuHj61Ne8%2bdlZ3Pz7f6ImSSN7glShfYUbHJXdJTlvVw97Bd2Vrp%2btrGLIPyZo7BQ7fL2YW1yC19cFV4eXLo%2bP3X1DmF%2bcE%2b%2b44evxsKXdKcDOPDq7PGhzt7Kz28MhQXfn5ufocrvY2t4CqT1beUpvp4eNjgbU2mokeiwz1xM5QZc55uuGWqGDJT%2bBuY9uMufhbdYrEhF26VO2q2NZEXBORM1qVEaF0J0bwrTAYn78xz/zw3fewMNz96jJc/C9P19id7sZ7//5DDMfFckfs/UKBRwPkoUZJmTF6ZkbV0lFqhqu5n6kRGuQLe7lxWvQ4ewVENcm%2bgZmP65ghbIaLQ29SI2uQFFqNZMe5KNNINnSfDtyEo3MiddTX9wACSAdj0sH/W8DofT7d9FsczE3pYgdhiKBlXORcP8Ok0PCmBYbhoFmI4xZEVBkZrA4IYIjjSpoM%2boQfPEeA2/cojI6Fw02O4LvJSA1Pp7Btx5DJTD8PiJ7pQsc0eHwK0W89XEmzv3hIqIuplBf0sIrJ1MYfjkZgZ9G0FDskOnwpfei8dnbt5EUoBRZwMbrH2Tw4tshOPe/b9FU0szAC9m88rYIeqezhYyKG%2bubx84kXoCl430ZCFXoqlCsUMoHjctPn8InrEE6DBkd8bOvrx9LT5ZRodNBr9exymikBEw2t7fQ0Cj8qVLLQYG/pcpKs7MJJpORJlMV/P59MCQdlLw6CwgFbGyxWNDhpGv5CPsoGGURIj8LOpxyU838uDjk3NHAUdnF8pgmXrx8D5%2bfuwFdQiNtGh9Tbqh57o/vMe16GVzGfmaF6Rh1WoOw0wVQPTZyZ/MlV3v10diGQHrr62uQylP7RY5Nrq6uHhQ5NuUTF/Fcvre%2btibLSIOura1xZWVFzv1SXzyXZVZXVg%2b1%2b8rJX9DhbUGHW1ASoKZZ0GF7hg9e6wiKwouhi7NSH%2b5ir3kEuVnVOP84jrrwRtamtsNjHUf2x/eQfvGxeK9TBMtBkQUc0EQ6qAiupjW5TQZrL6HOVylg/5xvH6oenvEdO9g87L8kc3Be983%2b0VnhId09fqb4rSxwQIfNWiuqSgzUKUxsMDVjYmQShnI9qrU2mkprRAqewciTJagqzLSqavlsdh39XQNQJKXCoqljva4JC9NLmBqah7msht7GHi5PrR6s4S9QwP%2brf2T4rn9s%2bB4LODiEfc7%2boSF29fXR7XWzf6CPi4sL7OruYm9/DzrEPYnOCqRFr8eNzu5O2bVm52bZ5nbTJ/oSZV4TFrqzu0NPpweT0xP7rPMY5f4hC%2bD/77a/sH0LWZ7xi1zv/S4K/F1nejzgGC/JPJco8QEXkQu32zs4dtSPv0oFSO6ysb6FqvCfwxr079Bi1cBotrKyQiudSqO2tkYEVCN0lZWo0Gohld0P%2bIiM4DY2NuUYJRVjZR4ifH5zY/NYUXb7gK9sv8RPvqmQH9EC9oNgf8VVjFS8i4WJAQwMj9Dj9dLj8wkwMyL6fgFefHKhdmV945t09hhz/dbJ8bf6r%2bInP6oCpDTprDaiTqNEY5UGvlYnpkeG0GysRKtJz1aLHguTY%2bhsboC9Us0aQZHb7WYM9IxBX9YEq9ZJs7YZ/sEp1FncqFK3UF/WQI/Ti%2b7OEUF/G2iuaKFR3YDpiXl8lxJ%2bPAUIFxBsELHn30XE6V8z4P3XGX/rMiyF8Yh45xSUwfeZdPldNKqzEX/xNB598FsGnvpnZgWcRnleLc4L0HPjXDovvZ%2bAKmUT7n6Zi6vv3%2bPFfw1g6n0VCtOsOP/mY3790WNeeCMQ7obe7wRnP5YCZDos%2bXDVwzMsCL%2bCR9HZsKVdoLsqi%2bqACzQnPYQ%2b7A12mrNpTbjGuLO/Q%2bTHv0Jz/nU2lLsYfUfNuLByAZaqZKpbGGlhRlAssu%2bqUJnSRGuJiym3dChLyUNuYAn728ZlR5CO7f5KXGBX/pcWR%2bJpFITdYE38J/CXnUGfNQe6kPfRlHCS3tTfcbIpA7bkzxH9yf9g7YN/4UjFOcH/vYj7upLF96xQ37MLpQ0iJ6QYBXd1LLlrY216OxxlPYIOK6h6ZIHqth3D7ZPyOc5BhvjrcIHNjTW0m4vQZlZyqD6Zg415mOhzw16eiT5bNjtNsXgy2ganuQRVBdHsr0vhuEuJno5BlOdUo93UTVtpK8Z6p1CpqIaluIEOjZve%2bl4MesdgUNbQUdnBZq0Hi1PLEv39q4kBMgp8%2bvQZnW0dlE6Dvd2DdHV0Ce4haKugx129w2x0ujEzv8SBoRG6PT44XZ0YGp2Cf2SYNnst%2bgZ7BWV2Y1GAJUFzabIa0NXrw8TUOKdmJtnd2yUocye7%2b7uwsrrCvd29b8HzH0UBhzxBYoT7GWpPPkeUTFQ%2bS5SQzt7uQV/IHDzbL%2b7uycqTbkmFWKn8L1Hd/YNpSX5P/tDd3aP/qtqXPVaDOL6W/wNZ7kYKx4QTPwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2096\" alt=\"每日材料查询\" data-srcset=\"/assets/static/nonebot-material.82a2fbd.e2830f5be54b658e4b67520add0af9fa.jpg 480w, /assets/static/nonebot-material.cbab2cf.e2830f5be54b658e4b67520add0af9fa.jpg 1024w, /assets/static/nonebot-material.feba589.e2830f5be54b658e4b67520add0af9fa.jpg 2096w\" data-sizes=\"(max-width: 2096px) 100vw, 2096px\" data-src=\"/assets/static/nonebot-material.feba589.e2830f5be54b658e4b67520add0af9fa.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-material.feba589.e2830f5be54b658e4b67520add0af9fa.jpg\" width=\"2096\" alt=\"每日材料查询\"></noscript><figcaption>每日材料查询</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Pillow 绘制原神实时便笺查询结果</strong></summary><br />\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 600 1040' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-bd2f0367a6d69b7fa8701f65531a86ee'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-bd2f0367a6d69b7fa8701f65531a86ee)' width='600' height='1040' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABvCAYAAABck8Y9AAAACXBIWXMAAAsSAAALEgHS3X78AAAfmklEQVR42u18Z5AdyZHe/tOPi9AfKRSh0x%2bFIhS6i1CIp5APUXG8CzKOcU68FWNJ8SiKe8cleeQS2AV3j0tg4XZhF26AAQZmgHEYDDAY7zDee%2b%2b9ffPcPO9NP1OpzOzuNz0Pb2bewOzqyP2RUd3V1dVVWVlZ%2bVVm9Rse6yb8NtMbqR/oBKVui04QKfniN54B2g7L1xvCvbUhp3TPTNCBhim/eQzQpj7XFvhdVvA5LeBzmEHu/G%2bWJOwiATq8NwjdSJO02lMWME53BC3LI1F%2bZtElT43PjfCbiVR7vVeZ3crtyQCvwwQbg9X%2bnvsnXRM1ud7lnmrPSleZ2%2b9EKbDonpMUqty1tZFItUTPtffbZXTP5fOzFHVo60/1DS05zRsp39%2bNCW%2bknP8479fGeoIb83OS0%2bGCjXWdmB7sk0wL42FVGWo773cYIegycxp2b/G15LVA2LPFz8MeC%2bfTvdemh5DbDEGnCVO5LBFPObuB6wjwMzOXp5TuJaxD/RZdE9FzIvlbFq4n4rMqbcB3vFbO318CZNFmBvgcBjAtjoeXxoYl8/oaGBZnRfXDXGiqrYOlge6gfnY07McGUVkcLUEfnRrtg5b6Khjp74Typ4%2bgGa8f3L0FbY213JCu1np8Xg1FD3N4RHraG2FiqAfqqkqgt6OJr5dmRmFzZRaGetuhr7MZSp8UQndbA5QVF8LcxCDk3r%2bDz2dAtzQNT4sKoKggh9%2bl79G36ypLoPlZFVy6cBaeFOZBQ2053Lh2GR7mZYPDtLafBGyLtNdhwRcMsfWZyVj1oywYbC4TuTdOC5fdBrrF%2bZhhfjziw1FgBqCkxAMOqK8ug1vXr3LHTh0/xo24l5XJ19Toz86fwUbnw7lPT3GDf/6zn3LDKkqKuOz77x3i56dOHIOrly/AxXOfwt9/cATe%2bdHfwPf/%2bnvwGAfg09MnkMEdsDA1DD/58TvwwZH3oLq8GL773e/Ae4fehU9OHee8b37zm/B3P/kxFD/Kg%2b%2b89RacPH4UrPpllrw9pwBLgNUAPtNgzLVa7TVu6qIDVXkwlJslCk4fEzO9XbAxOeyzrM/FSFRlBugghBJAI0SNp9HKyrwGt29m8P35s59w3SWPC%2bA%2bSgQ1khp24uNfQ9aNa5w%2bzM1mBtGzC1j%2b9MmP4Vl1KWTfuQmZGZfh%2bLFfQ0HOPRzNS/yuaX0Bjn709/Duz/4OqsqecKfzHtyB/Ad34c6t6/Ctb32L6yTpe/uH/5eZ7jSv7yMBPAVwrbdZIbR%2by6dvOWyrPfROtPVv3oRP//Kr4szbfwZ1598Rh95%2bxzs/3BMO4byj0Sd9QJUGnEZYX5gE49o8GFbnQL86C5MjvWDaWIAASotlcxkMa3M8ejR3fXY9i%2bXM2ABsLE7BOhK9YzWs8FSgZ1SvVb8C85NDYDeucj4xnhiwht8ybyzC6vwE170yN851UJnZ8QH%2bDrVHj20ZH%2bxOKON9GIASgCMadE6HxktvB0vf/I9Q9bdfh9w//w8wmf3jeM%2bdw/Gzhw6F7aa1mCJOQqtdSTlRA1Ui5aVICosfXZM%2b0GplVXHKZOBypPDUxtE9lfHidUDWO5xH5dXUR%2b8odVAZKk%2bp2h5StGktg2TlkfYPeBywPt4VqXz7L6W6H7wldV7%2bJDzeUCIt9TaE/VZdzKuIf6r1WEvJy4%2b6xKUqszPvBcqkWB53a8fuSlDuFE8Fj00v7JsrEY/dEA/47SLks0PAbdlhLX7R2CCZKQcltY43NBnCvW3lgRfnKRs9qEBcW%2bsKJtBpy4iXbcTLduBVWJVvJGUkRtetSkRq%2bsJt%2bFcmAdoKydQNeKws7rsRASQZJG2nycT5e9TxUoTt86OicxiWwL65CHb9AQjL03u7M8C1JYJeGxF%2byCaI1Hs1jYXcEJe8EA25IBb2MEWCLr6P4rOo8jzsd0BAfu%2bVEzGCOmPTzR%2bY6L39GEBcFpLfDtGgHdR7SmlUx0f6oberFeamRmECr2cmh2FteRZWFqZgYXYcpsYHYbCvE8z6VfXdV0pyO7Z4RLlTG3PbHdxcSN1xTRl6by8G0Khh521gt1qlDb3Vj1IQpw/jSiDcdqM4f%2b5T8fGxo1CQ9wBOoKl7MzMDCtEuP3b0I8hE6%2b7WzevwwS/fh8ryp8hAlzwVXlHHUzHAbV4Dp3EZaYXvHZjvNCwn8ujeZVrl%2b3QYIMK45Pnc1mhek9E9Mb/ligZlsUORFhbjOuQgKLl96wY0PquGx4/yoaKsGGqqSqGk%2bBF2uhgeod1%2bEhmT9%2bAeT5eEPkijk1ROpYD2ehcG2HHEZ3pqYXWiG1bHOznPtDQOa3SPtDLWAYaFEZjrb%2bB7WW8s7M0ACcGNw7YVLuzaCs7pnSG/xx7yuGxSiBljEX6cDn6lwTzPSTowjYbd4KX9AoeZ5z4RvaPqBSpLJKFUqNfUGSngTFBM8nBZ1ivKe0TaqZTMgL6aPKi8cxIqso5jJ7tgvK0M5gcaoafyAZTdPAb1eReRPoOOkiyWBJaavRhADZd8VjG%2bbPX1LQf8FmfQ7nbawhI22OMwicHOFjHU1YJ29jzMTwxxp%2bl6cXqEr40bSzDa14F2%2bRg4tjZheqQPRhDi6hEnmHTLMIG2uRnt9ynMN6BdvzI3ge%2bOctqDsHkMIXUfokqy64d72rgu/C4zM9UUGGkqZuqtzoHl0XaY66uHrdUpWBxugaGGIhioe4jpI86nabCfBCS0PeqBeMhrD/vctmjIy6Mt7GYdZGdcgpsXz0Jd6WPIQeTnQLO0q7kOrn16khvf3fIMMs6cgu7mZwhQpqEk/z6UPcyB/vYm7kzBnUxowimTl3UderHDxbn3IBfRYzUiyU8%2bPAKPsrPg1mdnobwwl%2bu/cvo4OCybCWlLlgCa7zSyPM9RxOl%2bO39Ffoa6gO7T0gGq1kflh1xHUu5pBDyoBBGdiVnU9Cvz8shRw8ybKzA13MsdNqEEEIIzrC3wCJME0Ig7rXp%2btoCrxsbSDEvFwtQIS9HkUA8s4woy1N2KSG%2bK86kMSctwdxt4cVrtpgRlmkt/GUyDAdp1X0ucR3OV5iWt/UTUKJ6/ij2gPlfnO83rMOYRA4m4DNkNanmqR6kvhvaDek/1UEp5gZR2wMKrtwN8BCPdqa27bSsPYa5zm%2bR85d5lTjzfUdZl3n5f825yXfT9VM92tMEt1%2bFAkXbol1izp01UHvXAbmAIvkhw84WBod96BiRn/EOh14EGhboMyqvADgI19SuIcDerzZ9kwb1OLECK8MCUzjLITEigQgZCQvm4iEseARGfggBlS41XAdLYyj2tCJSnNviVocBdl8H5V7IM7pAAWrKCXmucbAG182Tp9fe0Q0drAyyi5UbIcGJ0ANYRDbah4TOOaz7ltbc0wBqu46rx8lrR4A6a29cu2I8Byqhb4ratTbvJoHc5beZw2G8XCgMEoj9x6sTHUF9bCXdv34Tse1mwND8JFy%2bcg/LSJ1D8%2bCEc//gogyKUlufAzF5ILxXySy0Bsh1Ay5qM9FZ4mVMtPtkqlNEgEeWTVbjfFGAG0Ki57Ea/ZcviXVszQkd7f1S/sRKhDQ%2bHRS%2bwY4I62dJYi5LQCO0oDctovd1CWFz6FG3v3g5mRGtTHU4TZ4IB2jShH9zW5/OU/N0YxwxASaWO6WYGYKK9nFHf%2blQvgqAmBkTT3TWwPtkDS8OtsDDUDItDLTCPiNC6McvweF8G2C36cMnT2ljWrXzE/JdgqL8/LHA0UfkJtM6EQB1AqC8ekXd%2bkGGsGKmBqk4I4hRilIdMILSoWoqM8sKypahagmTtUR5NO0mxMOOKntFKgpYBNKJr2MnaB2eh8vZJaCq8yqiv7UkmtD%2b9BZ1ld6Es8yg0PbwCDQWX%2bJlhYZQZt68SJJEvK6kIZ2RkR9paO70Oqz5EMJk2RNrqKkXbs0rGAYOICt02AyM/O4IiAkOUR%2b718YEu9vxMIkYw6Zagt60BRlB/EAYgtEc2P93PIRboqK%2bG/o4mRIwLjA3mEGtUFOUxjkjWI8k6gPE/MkLF/7qZfh71zbkh2Jwd5L2BDcyjNG0lSB9BkRc4yiEclRAqQxFiNLgB969fFjcvnIGGiqfw8O5NZkAPIkAdKkLKqyjKBxfmVT15CIOdzZzOjPYjirzMCI/QX%2bXjfOjCKULIkNLcm9e4LgI/3Ygse3FaHTv0M2hE1EiSo50eyQwgPZCY66ZtHeBQkKFT0QvqjtEB0CBBYM2eoM8mCJfjyAlCfYTvqdMhLGMzbbAE0EgbN7BhpnVGhBvLM7C2OAVOi57L8v3CJD4bZl8ejT6hwFVUoiQRNPqENDdX5ljCqC51HyC9VWD%2bpVYBrhjnbrItIBKaGJ/J89iVmKsBebuM57m6syPvEHkSyC6kme%2bM/BT0l0CV2lTRIVHFlnjeHrBr0ODcAe2Aub03RHw4wgq6E35GcJxuk4zYhIzaZPLvhugc22W28xVSnnkdO%2b8p9SY9U9qhoS0uJy99ywem55Tgl2jwSzSoybDp2e%2b%2bF3kU2uvam3T9qonqdrMbfP3A5E5yl6fcFE1CgDIQSqBBa0qkp81Lx/x9VVjgIEgw/T3BROe33WIqKlT3AnnPL%2bBQ9vjtjATDykpAGEC7jf060WC6e4PpMEBo7QC2CAM7Ok8jKxrqqkRXexOs41rd09XKtv8GXj8pKoC%2b7jYYG%2bplfLAwM84M%2brwkQLvMJdsDB5EA9g2GA7SDa4suDOtdCEwiEt6HfQ5hM%2bvg1Mnj8N7hQ1BTWQqF%2bTnc8dqqMjjy/mFEgHlQVJgH5858Aj2drSwpe22MJEbV8/ISIPsAV7jTqgOEUGByubQkAOd5pLV0znfk26XR2rxJn89pYdeY17klBvs6Re6DewiQuqAGO95UXwOjOOp5Ofd45Eki2lrqYbCvI%2bH%2b0nY4lV7YDf6muyFCpq5%2bfhgG6x%2bBFztFaJC8Q%2bOtpYwKVTM4LQbQfHZZTcGnN6a9RReMUHR52m8zGv2KWSzikjfhG9ixI4SWm6oD1GuSAEKJqk9AxfKqbzCi6I10dUVqBsyxh5hcYMVXP%2bCOd1dkg3FxFIouvQdjyAQPan/VRb7/FPCQorODc2srONXhdNoMW4FIiBpv5w0RAjcDCHKInpU9YXue3F/kHmusLIGW2gr26ZH7i1xhfYgC%2b9oaEfTUsvurHZHf07xsxgPkPbIibtDa%2by8iASTexsUxWB5pY3RIewIkFUt4T6iQANMBd4SsLAluh0FStsRon0A4LZtw79pnohIRX335E8i6dA5ascN3rlzkzt%2b/cQVyMq8yE4g5hRQvXFfJbjPyDxKKLHuYC5%2bdOMrQeZYCJZdmEvuHL8KAbR0g7w5xfIASC6CiwnR1gBYNJvyBqi1A%2beQdJmcowWJiBiFC8vtt6Vc53VydY3LbjIwACc1RBy2GVbAa18Cso7IrjArddiNvhGxPgVexCjy/7B1sFSA06LWn8g/yNTFEnb8h1devIEBKVRshpHkuJWyG7TgARohYl99tfQFbwf6SvsE90KCXtra0qC2ZGK0ZZfSmXKei/Z7zdxymvb%2b1B1EdTmUz9MCE732JBr9Eg7ugQUZbdsP//2QzgItCeHH9l9N0aU1GhHsoQUFKZrfgCNVF9jxtL1EBdRV5TUGSr1UJJm2KqmgwsUnKESLq/p6CBiUl%2boNiAhNRIEqeAqM/Nzic1n2avkF2bIRDrihthG4HSpqgs62RsQBFi1aUPoHmxlqYGO2HhmdVUPb0MczPjEFlWTFHkr5qB%2bl%2bcHjXtf8ADODOSkGncJo3QiX374W3NhbDkZCLJYNM4fzc%2b3D61Am4f%2b82%2bwApMrSpoQYOH3qXUWAnQmVChhRISe60VGgwXfCTLgNkP%2bEi4wKyCNXOWtZnEjHFaTLATA4QtKNXpV/fvB35J2X1cPj6rahlbUEiQ8dlMwhEfIJ8guT762pv5g6TNDyrqYCGuiogyExIkdLkhqvXqaI/X8Y9TrB3tu8ZdJbeQTA0DXP99bA63gU9VQ/YS6QGSO7LAJ/CAItuOfzhpYzo/2nqg8OfZcT0yzPhkGyyCkR/iV0hEfGCah1C1M87QXRNCDGQFOaqdoD1BaLFF5GCVAywbiho8NlD9hOujHdCf20BGJfGoKUoA4YbHoPHssHl0p4CKPJxy%2bZKMOf69fDm8myIOk2dQbNWEKIj4NPf3gh3r37GoKa%2bophdXEX3b7NrjPyDBJLIZfb4wR12dZHbrPxRHuMH8vqQl%2blVSYBDiRGmSFESe/IaUz6NPuU7tMgxXSWIIxUPBRyRkKIEKZ%2bYUJx7T5B/jzp4/dxpaEW0R8iPGJB/%2bwZUYCeJIeQE7Wmph9uXL2CZCmipKQdyqpL7bHq0j8HQQfcN990RMsoxAGpQtIoOXwQNiqRd3cQuMUWJUOOJKISVYoPJL0jXhPRcVj0jP93KLPsMKd9iWGNPD5ULK67yF90xft1oUGh9g6kMIV7rCe35no/%2bplgAFfnxbk9g%2b17VFYEXXAE0/snX5xtkM1NBa3shuW3a3Vz12JLzjNv1vyip7bIbZLPWtLad7kea8l%2biwS/R4G5okM798mYGbVgYhUKgpe1ND81U2LHRsf389ZApMQV4U%2bSA9NwU2OXARMotsYAmWEI1atTt7oSSewlT92DH5hZe77E5OhsUSloGySZQO0xokJZC1aCh5ZFigyg0ju7VCK/PwzWWDgRO2zWmjngcO%2bB22%2bPYUaE9NUKnwwry7sPYcB9k3bwBD7LvsDeITpARIiRccPnSBSD/oXa7%2b3VGiqpHZNgAUo7NqQDphQwhpPjk4nSgsLbIXdndEaB78g8QGsy8fo1RIMFg%2bvUFnResKn8KH2OadesG1FWXwy%2bPvA%2b11WUHOjeYyoWWriVoWZsG3ewAH5Ezr0xyWBw9o2vz8kTCN7CvKUwdhLAbhuZmpOziLOf0bKMz%2b/EVW9/kWIjyaVpMTwwJOh26hdZedWUp1CEKpD0AQoCTYwOwujTDscJ0kpSmAesHxUeo%2bgpVfRHU6JAX8w3K8Jc6XnTpfai%2bexq6K%2b5DzqkfwUBdATTkfwY12Z9yvKB8aGouDQYgohuanoz8KuOct6k1x5lfkunsnBgLg%2bQGL0oIQWIya6kxMWQKxALs/5MUvwDFDUYVn6AFmeRRTGaSBDKN5bOFJj5SRymVp7wXkgBEeNQxCpOlM4KND69A%2b9MsuHv0%2b9BXncs%2bQooaJX9hQmL2mwJkqkZ8NvFssD98MT/bU1Bb5bXZjHHa5sKOiII7mYJADx2DI3S3ZVjl3%2bCQz4%2b8RRT8SECosaqEUSH5Bm9dPMvH6Qg9kquMfIlUBwVF3r1yEUZ62vjAdTJ8TncKbOEUIO%2bwfm6Iw2EJElvXZxPnhtUjcwdSgrGAI%2b5xWeLRgJOP09IKQCNZ87SQO9CGCq%2b2pIhHkY690T0FSNY8fcTOUYoKpeeUTz7DTtQZ18%2be5sjRJzn3kO4CHcC8c%2bUCh9VqGXBwJbiYODPIUeO43qfaGzwwGmT3lbIMqhEi1GHtvwT4PKEyJeh8H813j7I8ko%2bQxFuNBieUSEslXdNzet/N3ihz2ugwvWVw7oWXwZ2GjxIXlIwGk8Uykcf43pYwkDhfU559ihrDSZseZBvd/zL/D9iLAZ50HCM2heyadLcytp3l5dC55Lw96tm1DXo57M38ApTsGPkSDf4DZcBr%2bYkKozhtYLNjZyBzcrDzc9dfNO3bFjmIe1c4rITL71BaqsWmKrBk0iq2L5bsvAWn3TqjbbuQ37nTr4hKe3cGyHZAwp9HS5a6bNGGpmrF8RJnl5c4G%2bb7lPdeB/pLf2m0gHNrY0e4LlmsbqtuhxGl%2bSNWagb42cT1ANr8kHH1Ejx9Usgo7wQCoOqKErTz6%2bH8uTN8Yozy6Ycpo4M9iaMtn/fIU4ciIQ8sj3dBd1UORMNeWBhpBSMCodG2Mpjpqwcp6KajgGkywG2FOHaGHJ6fnD4J169d5mDI9987zH%2bGIaJrAkE3Mq7A4cO/YGj8RTKAOrg80QUNiAVsaAkONj4GF478SGsJdJbfU%2byTNCVA/TmKaXOFT4XOTY/yyVAV6ZFkLM5OcKwwRYi2NddzrPBBPMHaAOykYOwXcpjSXLfTOULEAx765yBiA7JISQpMCIRCB2GA1rqLJSJBHYmIUPmPUa5ERGh8R6jbHg3VnEV%2blQxItJf9Em5ZYSN%2b4YEMuARRYNucF2kxYPtsgEUweeRUm5d84lMTPbJrB5OvNYwT6UpLMsN2bKYo7VIiVEQiQMOteY/wTDoSoDkxTpHiqhjtODuQuFZCYhLXHovSYEuqBguSINpmM%2btXJWxQPJmBSViE8%2bjUqvIjtz0laPu7ODiU%2bmwxibzV6jdkCRB7MWD7lAgHTTpiXpcp5LYbQsqIPfdBVWqwLDLCJYJ%2bN4me8jMV544j%2bBRyuzA7QUEXsTNnzrlWVucjEPdjxywiyRe5o36IBwAgJACCkNyO5LKSD78d8ELQbYuVteQEDMszEQr6UKVkPwkgLolI0APGtfHI7fPfC08N54ds5j6vzbzikwKu5%2bZrQO28azPq03eHnavtYY9lOTI90h0a6KoPRIJudW0WEPXhEtoUOnbkg%2bC3/uC/x0p/eTJsMhgikaCDVqAd5xQTHQo44wX5%2bdIPfvAj6ZPTZySXzRjTMiHBCC/qAq9DLG8MSH2zJeG2waLwL77/5/FPvvudyPrKSJh0BCHe/SSARBjnpxtsxqnweF9mvOvZaZgduQ%2brK10h7GhcietNPk0Sk8z1Emw9BtvwTai7%2bE5s4llmwKRbjEjyFrmguUjXNt2K9OFXvxE//fv/Ba7917%2bAb/%2bvIxGTfj2qrCQ7xJ5GPj8vX/qdf/wv4v/0n/0r%2bEe/87vio49OhCHmF8qBbaGKvYRtXtePhGuHr8Qq%2by9CSd85uHr/PfjhH/9hfGqoJRCL%2bOjvNPsyQMgdtMe99gnJtF4JEyM5orbyLDS13omYjYshVQpUCvld4LUsSaHVgri0%2bggMnZni0Ydvgrn/bhyhq6RGl6iKz7Glj9Z850eRy1/5E/j6f/tT8e/%2b7Q9ETUVHGOJe7VQQymn0%2bE9%2b/J7077/yx/CHf/Q98Xu/9zX402/%2bMIplotopgPMdYkFvvHGoIJzb/Csoav1YXK16V/zi2nfhr9/8WnR5czIcC8on4PefAvTf7oBbGFZ6pJmm82J%2bpEB0V5yFgsLjscWFPmUaWHbMP2RabKPzbmSz7TKs1l4QPdfeFZu9WVGXYTYWlsvLZWnVCHnEQGFB%2bIP//XPxb37/G%2bJf/u6bcOHsIwmEF0fVsvO0Gkpc9eOC8O3z5%2bEbXzskTvz8I7h47FLM5bDG1FB%2bZgDWGw16ROdQWejBo2PiyJW/Eo%2befARnsw9Fb1w5EXC6DTFS5n5ZB%2bw3BcgJ4iB0GHHNlURCw1kw%2b%2bRotLevJojKLv68EuSGxnymAcm3UAiW6pMw8vAsmOfq3PaVbhPph6C8QnCnfDgVIG4Lt5aXwJ/857fgK//627FzZ/LCIHwJBmz/ysNBZ4HC4JgRN351GTI%2bugAnfn0j6PfYIioDlOgV/q/BxGBn6H9%2b9T/FMzP%2bFmqufyhaih%2bGZsua/caxiYgkpacDtv8eQ8fofYbwZtMt6cP/8c%2blJ3czXABhFiNtOTpeT399iEbskq6rMnjne18XXflnXE7Dgsll2bBoO6QGYEp%2be/Tm2czAT996O9Ld0BhA1BbXLoPqskpGmM20GRno6IjWZWfB3cv3Y/WNA%2bFYyCmUcHtWfvJUtIPLYoh/%2bKuf%2bi988FfRY3/xR9GB4tJQ16X7oeZLd0NxCPD553QkQF1PIYgN664vjzQW3vQbVyddQc0hCo0RwiIYDjjE0uh4tDo/O%2biyrAWCPltcOQG%2bo6w6fcaHRoL1NZVhp80QpZNqyTaAanAhw%2bNraxtSZ3s7rixDUiyc8Dtu6wv5QCfrmKjkirRUF4WHOpsiUcktsP6Yx2mOawyhNKYAim3E7xGSFwc9KuEajEuwFMY11v3c8kM4W/JhWXwWD/uxbAwVkh/f99KROKExdJR12i2wboBIENf3CK7ZHoj4fELB64m/2ChH6YVsdrtkWwBtBkn%2baZvQLoUUzKkc6BQ010GEkUIQCajH9J2QlimsrKVgtS%2bIKV01LBs7xMhqsVjSd4iZzWdEaBk6ExIQwka7XZucv2BoEePr5WJWVy9WTT1iZO0Jm9HaHWZK5w3NMKuvFzNYbmytXGxuDYuBlQJwOteJ8dx58kFMDfcK%2bvHi%2buq8MG6uiMXpEbE0PSomhnrF6tIs6NYWufO0HM6ODYiJwW6xtjwHxs1VsTQzymUnsezywrRYX5lPLJt7SgCJJ43cvL4J%2blbysKEN0DB7EXqXc6Bo9BfQunADon4fmZlclkbdYB2HzsXb%2bE4ztMxn4PUdqJk%2bDU/HPwAl%2blwGLMhYj0sPbQuZXH/X0l1oX7gJjXOXIH/oHXA4V7kMBVtR9BnFJJJzpbO9BQZ6OtiZQoe1Sh7mQHNjPQz0dTFQow0aCs0jpwuh0%2bFB%2bZAWxSxWFBVAC5Zta2mic4%2bMDdzpSIDTuQYbW4MkCWC2zYDJOgVbtjm%2b3unHs4PXbYR18wA%2bnwWLfR70ljF%2bz2SdZEYlgxbd1hDXR2XUskYsS8xRGca%2bRcMqH7xyKY4WOqxFB7QoHI/jETBfrZOe0TE8h0XPHaUdLHLE0E8c1dgF9afR%2b4MhhQk0uhwOh7Y1Ed1Tmmo/Ti7rpOnBtrhaPhXCk%2btJVXbn3iIfyNKE4WsPX2mjU9T9S/VQd%2bJwV4qyezKAdk0DiZ%2bjbe1Kyb%2b79u9RPtXvsXevO6lc4ieKmm8k5e2oM42ydP8b8Tu9Lx0jr8Mx8tsoAf8PP6Ni8fUdq3sAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"600\" alt=\"实时便笺查询\" data-srcset=\"/assets/static/nonebot-notify.bd6740a.06f03bb3070b1cf39bad286a6f5d4fd5.jpg 600w\" data-sizes=\"(max-width: 600px) 100vw, 600px\" data-src=\"/assets/static/nonebot-notify.bd6740a.06f03bb3070b1cf39bad286a6f5d4fd5.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-notify.bd6740a.06f03bb3070b1cf39bad286a6f5d4fd5.jpg\" width=\"600\" alt=\"实时便笺查询\"></noscript><figcaption>实时便笺查询</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Playwright 绘制运势抽签结果</strong></summary><br />\n<p>模板主要参考了 <a href=\"https://genshin.pub/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">可莉特调</a>。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1080 2115' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-96dafb10ddda3e3c223f338b749d2d47'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-96dafb10ddda3e3c223f338b749d2d47)' width='1080' height='2115' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAB9AEADASIAAhEBAxEB/8QAGwAAAwEBAQEBAAAAAAAAAAAAAAUGAwQCAQj/xAA2EAACAQMDAgQEAwYHAAAAAAABAgMABBEFEiExQQYTUXEiMmGBFJHRFSMkobHhM1KCg5LB8f/EABkBAAIDAQAAAAAAAAAAAAAAAAMEAAIFAf/EACYRAAEEAQIGAwEBAAAAAAAAAAEAAgMRBBIhExQxMkFhUXGRobH/2gAMAwEAAhEDEQA/AP07RRRUXUUUUVFFndCVreQW7KsxHwlhkA0rur9tIs3utYvLeKAMF3MpPJ7cCnFI/GOiy67pAtLeaOGVZklVpFLL8J6ED3qRQRyTsdK4geaO34qTyyMhdwmgu8fa86R4q0fU75LS11K3mnkzsREdScc9x6Zptb3Pm3EsTR7NnQk8nBwePuOaitA8FX9h4gs9RvL20dLZpGCQxMpJYEd%2b3NX2T3NOZscEbwMd2oV/fwJXBlyJGE5LdJv%2bbez7SnV0v2vLR7G3jkCHc7vLs289hg5J%2b3HevN/dYvXXyEcx4AJdh2z0HvTeo3xYXF5FsLDN5BkrnpgZ6Efp9KyslxjbbT5WlGNRopq%2bsG1t3kdII4YwWZmc4A7kmvUOtPNCksSQPE4DKwc4IPQ9KTagsUmmTwzOI0mBi3Fd2CxwOPc180zyV0qCO3kWWOHEO4LtBKnaeO3INJcxJ8ovCFXSo7TUZJrmOKSJFD55Vj6ZplUh4XRkvX3OH3XczDDE4BHTknGPQcVX09jPc9luQZGhpoIooophDRUX4wAN1EGCkfjoPmx9OmQefy9xVpUV4r1L8BqYjWG7lkmcBRAhbGFGSfYduM0rli2Ae0aC9Wy8avcS2unCSDO8zovAzwZAD2PavOjrGmnMsMrSoLiT4mQoc%2bYcjB9Ome9dXkRX1miXMW5GYPscYwQ2Rx2INc2jiIacfIkeRPPkOXABz5hyOPrmsxNgjhV5tMNBs0s74BGz5s8kx%2bELgsDxx19%2btVNSfh1y98cmXi5lUeYT0x2z29McVWVp4fYftJy926KKKKaQkUqvLC4ku5ZIjHsfB5Yg9APSjV5L1Ly0NlaTTqGy7K4VUHfIJGSf6V1ahNZWzRPe3fkFs7RvIBx/7Q3sEgpysDp3CXjTbodBD/yP6VhaaHLawmKFYQhdnxuPUnJ7etNodS0zCKmpW7bumZASa9T6lYW8jxzXaK6EqwIPBAz/AEoXKRq3FdVLks7C4ju4pJDHtTPysSemPSmtcJ1rSxDJL%2bNXy48bmCMQMqW9PQZr7JrGmxtGr3iqZBlBtPxD1FGjjEYpqoXX1XbRWjx7VznNZ1dcRXFqtte3JtjY6gtoIw%2b8GEPuJHwnJ6YPP1rtoqKJMmmako51aFjzj%2bEUYyuOP9XxfatG07UWZWbVY9wxybZSc7QCfzyfvimtFRRY2dnGluUvWiupG5Z2hAzxjpj3/OuhoLNvmghPvGP0rG5jaW3kjSRo2YYDr1FJdVvU8O6c13f3VzLGXVFWNN7Ek8AAmqDiPlbExhN%2bdv8AOqjyxkZke6qVLI6mPCn7VhUnoXjTTtT1WCxQX6zT7gnnwBF4GTyD6A1SQSTtcSpPGFQfIQvXn170xNBJAdMgooMGRFO3VE6wtmdVZVZlDOcKCeT7UNIikBnVSegJxS7VbO9ubm2eznt4kjOX8xGZmweACCMfzrDUbuRb2RQYQqkAF4wTyM/90s%2bURi3JgNvonQIIyCCPpRUzea3Jp9hPdzzIltAhdysOcAdeBXq01qa7s4bqCZTDModCYcEg9OKDzcftW4TuqpKV%2bJNGTXNOFpJPLblZFlWSMAlWU8dazsL%2bea7jjeSN0YsDtUDBAJ9acUzj5G4kj2IQpomvaY3iwVH6L4Hi03WLbUX1K6uZLcuyI6KBlgQSce9WFFFHnyJMhwdIbIQcfGix2lsQoHdFRXjHaLuEuVA/HQctj04xkdfbmrWo/wAVJLJdoIVdiLyEtsDH4cDOcEce/HrWfmdg%2b07D3Jdqt3cWKbxKnlSlkjQxZIYK7HPqOB%2bX1rLT9SuJ7uGCU5R8n/C29FjIA%2b7Hn9K116VY7W13xLIjTOGyPiVdjklT2PbP1rg0tw2rRgyM4UusQZiSi7Ifh/n2rNWixoMdkeCn3hJYlvJPJkVwbycsVUDDEcg46ketWVTWjW6W1/GI9%2bHkkkO5ieSpzj0H0qlrSw%2bw/azZjbrRRRRTSEiorxZNeR6kEsrB7su43MHCrGAoyTnue3WrWlt3pzTXLyrMF344KZ7Y9aBkNc5o0/KJG4NNlRmtkGysRcbkDyuHCkEj92%2bQOxNYaTEIbyFfKJR9zxSv82zZFjGOOe/tVodJc9bhD/tf3o/ZL8fxCcdP3X96Q5eT4TYyQG6Ur8OIyXx3QGHdczMB/mBHzdT1qspbaac0NykrTBtmeAmM5GPWmVPYzHMZTkpI4ONhFFFFMIa//9k=' /%3e%3c/svg%3e\" width=\"1080\" alt=\"运势抽签\" data-srcset=\"/assets/static/nonebot-almanac.82a2fbd.95740ce08f204d5b61c1f4b5b3d5062a.jpg 480w, /assets/static/nonebot-almanac.175c05c.95740ce08f204d5b61c1f4b5b3d5062a.jpg 1080w\" data-sizes=\"(max-width: 1080px) 100vw, 1080px\" data-src=\"/assets/static/nonebot-almanac.175c05c.95740ce08f204d5b61c1f4b5b3d5062a.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-almanac.175c05c.95740ce08f204d5b61c1f4b5b3d5062a.jpg\" width=\"1080\" alt=\"运势抽签\"></noscript><figcaption>运势抽签</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Playwright 绘制原神角色天赋查询结果</strong></summary><br />\n<p>模板来自 <a href=\"https://github.com/yoimiya-kokomi/miao-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@yoimiya-kokomi/miao-plugin</a>，做了一点点修改。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1442 3492' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-05319ab9fa61ffeaa2ecbee12163e920'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-05319ab9fa61ffeaa2ecbee12163e920)' width='1442' height='3492' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAACbCAYAAADSkJ0yAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42qS853fcSZYl1n/NHn3Vh91vOkczGo12d2anR6NR95huTXV501VFX7SgB70nSICE994DiYT3NoH03nvvM2EIkHdvRAIkq7tG5ujDY/wckhkv3nv33oj45a8SiQTi8ThE%2b//J4uLvjiz%2b79j/0zP/d38b///xub/8/PvvHIu/7/Ovjg6OHo7FYn9m76/HY3/%2b4Qnx97SksASSPzNeS7FNxZFiKy2dQDqdlCb%2bRpyL60d/I64n5d%2bIZ5O/YKV74m%2bPnkv%2b7H7q/XEy9eGz5HdJxngcQyb3YdB/ddT5VCqFbDaLXC6HfD4vbXt7W7aZdBbpZA6JaAZBbxweWwQucwRWbQi6VR/WZ%2bxYUpgw1aPBUPMaul8voK1iBs1PZtB0ZxI15Qt4dlOFx9fW8ejaGh5eXcTtC0pU3phD1c0FVN%2bcQ/P9ZTTdXUbV9RnU3l7E07Jx3D0/ggcXFbh/cQwveF59SYGa23Poe6ZC9Y0JVF0bxcvLQ7w3gOeX%2b1BBe36599D68PIK710eROW1YVTzezTe5fd6oMbKmKc0YEcRIEa3UCigWCxyBNLSGaL1eDzSOclECi6HDw6LF157FC5TDOtzVsyN6jHOTg83b6Lj%2bRzq%2bZ%2b8vjGJx2dHce/4KG58rcSdf%2brBhX/sx7d/34sv/6Ydv/vrJvzmrxpw7B96cOYfunHq111su3Dut304%2bX904zzt2N%2b2oOxfBvHV37Tgi//ahD/%2bfQe%2b/ZtW/PSfm3D1nxR4%2bMk67vx%2bDXf%2bbRW3/s8x3Pr7Ltz6/SSu/vMErv0Lje2df5vBjb/twO3fKPD4Ow1q75jw9Bs9zYhn3xlh0QSQzibxK9H5SCSC3d1dBINBKMbG0N3dg5cvK1FV9QrDwyNYXl5BY0MLWpo6cPfWI9RUtaC3XYmvPz%2bG8rKnKDvzAOe/v4Pv/3AJP3x6DZ/99jy%2b/O01nP%2b0EVXHVnD9s1Gc/udOHP9NG87%2bjh3/1348/0KBs39XixufDOLO7zhi303i/qdDePL5KK7%2bSxfu8PmHX4/j9jfjuPftJE79cy9ufTaOym/VePaNFi%2b/06LyeyOqvlPj6W9G0P/Uht7XfjRcdaDzgQt1l%2bwYfG1B49l51Jw2w6RNo/a8Fa%2bO21B13IqteQ9T4dAB4XAYb968kSNeWVWF1tY2VFfX0AFVWF1dg0FvxNjoBBrrW1H7uhlXy27jwe0XeHT7FX785jy%2b/ewMLh17gJNf3sBX/3oeP/7bbZz9vBLn/1CDmp%2bMuP/VGm78YR5X/zCCq58N48GXSjxmJ8//t3rc/30/uk8vYOTKOobL1tD4wwxHuQd3/vdmVLPj5V%2bM4yyj4cono6j8bgOv/qhDzQ9aVP9goJlQd8KCl59rMNbsgcWRwsyYH/NTQUyP%2bLG1kYB6medDPhh1SazMRNBx3YmGk3Zol7yMgMSHCDhKAZfLJc%2bTySTcbrd0TCadg98bgtXkQi65B4cphI15E1SzNswNaTHZzTRo2ED/qw20PV5B0%2b1l1F5ZQN3FDdT9pMWLP6px77NNlP9hAef%2buQdV7GQ5O/mYI9x7bAbjVzcwcmkVSrbKi6toOzaHh1%2bwRnw5joofFzjyzPfv%2bbnHdWg6oUfzSSOaTlrQdMqKxtMONBxzYLIpAIcng4XJCGYVYVj0KbidWfgDeUZ2HkZNCsFwHv33fWg%2b7YJ%2b5RccsLe3x3BfhlarQyaTQXdPD9ra2hGLxjExPg2t2oTGulZsLOrR2TSEjRkLzCsRbI57sTLgxmybHWM1Vgw%2bN2PgkQVdN41ouWhA3UkdKr7V4MHn67j7%2bRhen1xA7fczqPl2CgMX1zF3j593dhXDVzZ5bGAHl9jZRTSeWkHXRXb6uBZtp0xoFXbagvafbOg4a0fneQd6y5zoOu/C7EAY62sxbKzEYdKnoWIrHLAxEcPiUERemx%2bJoO9WAO3n/HSA/%2bcOEKMvKv74%2bDhWVlbgdDJUGhrQ3NwCt8uDV1XVmJ6cR8WzVxjsVuB1RSNGu2ZhWQ1jU%2bnC6qAT8%2b12TNRZMfLSjKEnZvSy8HReoxPOG1B/UsuRV%2bPJ16vovKRH91Utan%2bYw9gdA2YfmTHzwITp%2b0bMMZeHr7HDZ1Yxcc%2bO4ct2tJ8xoeusBR3seN9lJ3ouumgeHnsxdM2L/ut%2bDNwPoP9eAJP1IX6HMMaeBLHUGcf0kximHsZg1WQx8TACRXkIfVeC0DM1UtlDFBDFr%2bSAAqt/RsKhiAABg7s7uygWtuHzBhHwRhFwx%2bCzxWDe9EC/5IZlOQTthA%2bqIS%2bWOjgSDU5MVjkw9tSO/ttWdF02o5V1oPp7LSq%2bYhR8soX6YwaM3/Fg6IYNjd8tY%2biSFmNXee26GYoyOvCCHcvPwpi/40ffGRt6TrOgXXKh7yc3n/XSKX6MXg1i7HoIU7fDmL4dw%2bTNks3ciWHubhwLdzOYu5PB/P0MFh9nsdCcksdLD7OYuR%2bDTeuTnELygEAgAK/XKyMhGo2%2bN3EuCmQwGEIoGJF1wOMMwGX1wWny80O8MKw5oVt0QE0usKG0YXXYisVeM2Y7OaItJkw2GKF4pcfAcy16HmvQ%2bVDDiq3FUpMNi01WzNYasNBkxnSVHvN1Ziw12thasdbq5DN2zLzmvVdWzFRbsdDg4DUnVlrdWGlzY61DmJ8WwHpnABs0VZcfG13iPAhVtx%2bbNNEuD/jk/Q1e1xMBQuEg4T35gQgJJ4iiJ4rgxyauHV13uw/PPSXzCPN64PG5pXl9Hnj9HvgCPzd/yCstEPIcmrd0L1i65wt65fGHa/ycw%2bNftMPP9Upz/78zf6kVfx%2bKBH6ZCovR/vdMRIOMiFBYWui9hRAJH95je3RN/k348JqIoMPnS%2belY3n/6HMOnwmHIh8%2bm9fE%2bfvPlZEY/mAff49g6Xsd/Z/h0C88c2gfax8ZAeLLGwwGbGxsSNvc3HxvW1tbWF9fx9ramrSP7x3dF0VzcXGRnGEVmyqVvC6eFYgi7olnVLwuPmdpaVkei2eWlpawxr8R50fPiM8Q3%2bHoGXEuPuNPv9cvmXjm6P/8954Xnyv6KlJcQP2vxD8uVvytrU2Sn9cSBdRqtfyywjQaNdrb2/H8%2bXPU1NbyP1jiB6kOnbUun%2b0lXD57%2bgwVFRWEojXpjFckUZVkk83NzTAajejq6ia7fImnz57JTq3yS9bUkChVV6O/rw86rRYD/f149uwp6vj/LPEzVPw/nvH5ly9eoKe7Gxr%2bXyXnfGQffY/R0VFJ3sT/MTk5Ka/92fOHAyFSWTpARIDd7uBFFWZn57G6Jj6Q3lTRY1t0BI8XFpYwNT2LickpLK%2bsyfvieWEbm1tYXt/A1NwcJmZmsE4vixGY5vksOzHDVvynCwsLmJqawvT0NNZERPG56Xlem5vHwgpHXaPBPEdvYmZWXl/j567z/5%2bcnZPn8hlGyVEkloyDpOI1/v%2biU2L0p6dnJJ0XkfYhctffD2jp2jocDkfJAfF4El6XEV7zGCKuGfgs4zQl7LoxGJZ7ELJPyOtR9wyC9kn4reOHz9B4zz/ejURrM7I9nUh1tiLU3YGgz4eA0QC/Xoegw042FmA%2bBkmoiC7kHQFGXKiuGvFXFUjUVCLyugKhl88R5XmS5/GalwhXPpeW4HGitgrRl48R6BhGzEDlaiRTNUaRMLD2LBkQ2XQjqgshoGKr9SNnpdymYEvome/6EGK6ICIUPxGNHxFtAGGVn9/fJ6X6r2J0QNCjQzEwCKuqATF7D4rBQWysDqOrrQ62jTqsTVVgevABEs5eFAJDyPkGkadlQ0PYHa1F5MY1KI9/D%2bflC3jbVIeMxQz/yR8R/OkkgjeuokCGubuzA7vNhhgjbod2cPs67Ge%2bgvKP/4rUhR9xcPEctstOYeqH30Nz4lPsX/oJby%2bdhfWnrzH2/e%2bQOf0VDhp64dV4YF3YIqubx1ZHN3Du18BIJ7LkJ66FFSQIz%2btj85jtU8Iwp4JXZYFlUYMdTxLvQnm8DeWw784hbA0hTkksHRDw6JH3D8OlaUfcMYB8YBimtUEyv2E41C1YmXiJecVzxBz9yPlHkPENI%2bsdRjo4gqKiAan7dzF3/ie4b13DfmMt8gytWEsTAiePIbUwhzyV5naxAIfdTq%2bnUEzEsX%2bvHNYbZWRlF5G6fB5vrl7E9o3LGLt5BasXf8LBtUvY5zXbzcvou3oJyfMncdAyAMu6GVsTC9hk5zQ9vcD3/xPe9TfCtmlB0RVCwhLA3OA4JntGsTQyDbfKBM%2bmGXlXFAdhdj6UwR41Q8gWLDkgHk%2bR3enkyOfYsYRrAFFbL7KBUdnZrHcIheCotISrH3FnPyOBRmfEPYNI9L/C7uOHwOsX2K94hLQIWzogTiYZYagnOfoCZcR0VCFbQCabR4yqM1t%2bDQV2LH/nJvJl55DjaIu2cPsG8tfLkOe5uFbkce5OOQp0QOplG3ZMuzgwFQDrDt5ad5Fb8SG3GUdalUCRkndbl8E7Xn9r2cYbPifOd/VZFNRJ5LYSyGuSyK4nEDSSC6SEAxIpeJ0aRCwdsG40wLnVhBhDvfXhcfTSnNoWaBdfk/ZWI2jqQNjSiZC5E2Fa0N6FaOdzBK5exhZHzXXlAmIVT%2bBYX4PjwV24XjyHjeb0eGGxkxIv12PeOA%2bv0YQER9dz%2bmtojn%2bGyLkfkPrpFBLnjkHLc5EaqbMnkD57Eq4z3zAlPkfs5Jd0QAvCWvIOlROmWT3symXsVt5BYXwGeUcWQZUdEbUHpmk17AsGuJfNcC2VLG0II2eOSstoIwiYhAMSpQjw0QExWycWFE8ZYvVI%2bwbQevc8zvzTP2BO8RhNVRfQUHkeTjWdY%2b%2bWTogIRzi6kex5AeuFc6j77BOsnz6OTOUzOAk3HnbI/%2bnvYefoeUmjdRYNTg1/g9YNpobZjtyV81Cx4zXHvoD/9PfInTmO5IWTVHvfYvzHL5CnA/I/ncD6uR9RfeJr%2bI99ie3aTqxPr2G8sw/9HYMYr3gKfPY/4G07nbxlhn5qBgGtHX2N7Rjt6GMqKLEwPIGh1m7EzV7s%2bBiF3hjy9iiCTJV4MlGKAJ9Lw9FtlyMrjZ3zaVphW6mT535Duxz9kLkUAdLEc8IZjIBU%2bQ0k7pcjeecGoo/vw00UcJNsuHq64SHzcjpdcDgdGNnsx7plHT6TBfHLlxC4fBnm27cRO3sGCWHnfqLD7sJZVsaIOI0UnRJhjbDevoX4yT8iWdGEhC6B5JYfWaJBZtOLg7pa7Myo4Fu2I8XrOV7P6qNIa8NIaULv24wugqwuWrq39ScRIGpAwtmHJPNfFLqYnccscgHrAFJuVnvWhpR7AGnmvDgXzyVZB%2bJeng9Uo/joAYoVj1F8ch/Z6kokCXuR1RXCkwoxkhFR%2bNKi%2bGW3UcjlEQ3GsVTnx0KFD4svfVio9GPuhVe2i2wX2c6/cCN99TpyZSeQuXIGhQvHGF0d2DZtY9%2bcZ76nkNOloNL5EdTGsG8qosDz7FYUBd7bMVDN6jMo8lpRl5b3xHVxnt8k8hmDpRpQQgEdi9wIKyvz3NzN4yEYVTPoqO/C2nQVBttvYbT7HoY770DBdlFZQdQYkSiwO9YAPyOg44/fwChgsK0RabMJvu%2b%2bgu/rz%2bAvu4AcC%2bEOpbWOvCAUCSKb3sF8%2bzv0Pk/gVfkmZhoBZc2ebCtvbGCgMoPp%2bgPs3LgD/fnv0H7sD0ie%2byPeEgXM60asjc9isnMIbd3t%2bPXsFfSZZ7HniMK%2bsomkLYCR9l7MDIwxiq14Fy3Iyr8fyko7iGTxxvsRCpR4gJ4IMASProORQBgMDsO%2b3g/tVCt8xnbol%2btgWKmHdqlWtl59u0SMjIDB0XoUHt2H%2beZVRO/fwl79axTzeaSmpxC6fRM5EqH89g6KhEEhknL5LDLJIhZad6F8lcdgRRiz9fuYrCnKduB5COPVRczUbmP7WjkC5Vcwe7scGaLAm8Y%2bdsoL%2b7IW/nUr1EsqnFh8hXmrGs6xZRY7DfZ8WdiWtHCuGhE3%2bLDvz2KPHX7jK5k8d9IB1o9g0O/WImLtlqEuwj9sYdEg5CV9xHwBg4ERGf4Zhrxok7wXI1RGRdtbieLDe3hX9Qy7T0mWXjylEgsiTOgLEe4ih/MNQqUJARKLReBzhzFel6YDtjFV%2bwaKqixGK9MYq8rJc%2bXrbSgqCaVl11AsY/jfuII8ESLxvBXbhh3sG/I4MBYJhzvIr8eQUyWR2YijqEkju8F04L19YwG7upy8VlAz7LeEEQJVhMwVslHDRzAoUCBMGNQsvIaHsBeiAwKqargVhLfZSiyPP6eDut4XQlkMD2Ew1lUBd9lFTJ74AaYLPyHx8insS4twnDsD99UyWK9fYVH0Q2PW48TgQ3RujMJl8ULxOonuhwHUl2sx%2biKLwWdxjLzIoe6mBj2Pwxh5TgdcYJE89QWmf/wE4ZNfIFPVBs%2bWC85lHVbHlqDuGcLBzc%2bxPdTD6p4j/K0ipLbDNLcFw8wG1BMrjOI1WMkEbYtaeDcs2HaxSBrDRCL/z2EwShhcHq%2bAS0AdR9aoeIi1mm%2bxOfMSS8pnZIg9JfijI6QdwmCi%2bwWcly6g85svoD57CukXT%2bDU6eAuvw7vF3%2bAveY1fNTlKqMav249jcdzTfAy/0Zr8mh/EEbldTVGKvcY%2bmkoXuZRdWUV3Y9DGK1IkwecYw34Hi1nf0Dwx8%2bwXd3O76PBdPcoxvunMV9TB3z1H/GmrQphWwzuVS2SlhDWFAuYH5wiXI5gqmcM%2btlNGOfVcKyZCIVp5CxxwuBRChzCYMjcztAW4d/F4y74tM0yGgQ6JBwMd1u3vPexCQeEOyuQJdYLBMixBkSfPIDX75fmWVmGL50uzSYxHaZ0y9A4SFBsXkxX2jH7xEMk8GP6iROKZ34MMxKUVUWM0hHDFXF4yx4icO0ubPdeInD2KsJVrD3E76LJg117CLuMpLdjI9heUyOpd2GHBTBn9GDb4keRYke029bScc7olveyRhcyGicjwF2KgCMUEDAXYV4LGBQ57jIPUwUqpQPC1l6ZFgICP7akfwjZ4VoWwQeIPb6HzKN7KLIIpn1eRPp6EBkdRlQ5hnQuJ9cci%2bkcCoUiMiyGhXvEdoofP61w5QSsD0agrIfMfVEEJ1gUJ2sKmHydg7IyinFGiUFpwUFqHftJFm3/GuK%2bZYw4x%2bAJr%2bJtUgeLit/Hv4rtyKa0YljFgr6OQmgDbxJa/h0tpceb%2bAbCXj3E4L93QJEVfXWyklW/CztUeeOLs6hnjmnnK9HTfFPCX9zR914fCHsPgzevo%2bmbL6ErO4%2b3rYRBmxW%2bH7%2bD9w%2b/R%2bDmtRIMFotQq7cQCIexLdQgHaC9dBz1ZIKpiz/A9XAUk4TBqqsLGHoRw0zdvrQBosTrG0uYfAXS2wCshjHMT/dhcrAFTQOv8ZdjlzEUnsJCbwMukEFmYgYM9NRibKgZy3P9mFZ2YLi/AYWkGYQBYNeLd0UbIn7TBwcIGMyywosISLoGJSQ69IPYXC%2bFv1PdSohkihySoox0QAkG8yN12HnyEJFHd5ElC9ytfYUiMT9jNCDaSIjMMOfEqhMtnWRFJiQWYlRmt68gfvMSdGSPb4QDHpDaNpAPvEpjsnaHaLCLifp3UNa%2bZb3YwVg1YJzxIB9bQMy7gnx4AwHfAp7oG2GIL2K88TG8ujF2zoSoZxEJRkcmtIaEf5mEbQkHWT3eFYw0E95m1XTAYQSUaoBWFjiRBmHCYdBcyvGUq1emgITAQ/iL8zxm75VQGaZoirAIZu/dxs7zh8g/vEMx9Bh%2bl5ORZJTmt1rg8XrhJxLYPFZ4Am54WANWXmxh5ZEaa8/0bFWYfEqqXJnD%2bKsiYTFPREjAfqMO3hsV8N1%2bDfflp/DX9GHHQWx3%2brFn99J8eLu2gW2NCXsu5rtN5Lidee8iMfLhjXiO7bZV5L%2bd9Nku24zWyiLoZBFMfkABAYPzo0/h2GrmKPfg4g83UHbiFkkQmWBbOZS9dzHccQtD7eUSFWICFgmD8e4K2C%2beR/e3X2LrJ0pWymH7wjxcZIZeQqOVosjtD0Jv0eLWBMN1qwdOFqeR2iIVZxQvrqkxVPUG/UQBUfwqr6yg61EQIxWkz%2beJAid%2bh/7vfoPosd%2bjUNUC84oVmolVKHsmsVDXjINTf4u9niZEHRksLTlIvKgVTEGsjS5ionMUy0NzFD/xkvFewZmgIiQKmA%2bpsHTAIQqsEAY92lbq/h5MtVbh8ndlUFMKz488xtTAA0z0kQaPPcXWXBWJUDfFUIkHeClsJo5/DxMlcfLZI3bQAlfVS7iP/RGO4UHygACMVj2ujp1Dr6oDbmsAY%2bQBPQ%2bDaLylh0LygAT5QJ68QI/eJ1HpgMS5SzCXnUXvlUvwH/8WecKgYVmP1ZEprE2uYKurB%2b9O/jXe9NbBY44wBdzE%2bSjyzgg2J5YIgSNQTSwSGv0oyOtR2eYsEUaA/2M1WEoBwfSith4Snk4WuwGGfZ8Me1EfxL2Uu19CZZx1ISKg8DAF8kyBfSGGWAdidIBgfoFYjOHPUMtm5aqTn7Do9DnkIojbQQfUJFnxC5io3sXIywwhMMUIyGDi9S5ToCBTIEYilC/7CWkW0syZHxB/1kxRUyTDI60l09s3FLAz60B%2bNYQUGWFhM4GMqsQI98gW3/C%2baAUTzKhiZIsx2aZXoodMMPFhSkx0UmiBkKUHO5ExNL2%2bjtbachbGHlhVzeT/HawFQ0h5BmWbEceBYVkEs6TCttvXpRbYFXOCrAEhavXw6ypEGnifRVEUQbHKnM2mkUoUMNe6w47m0F8RwnTdG8JeQbb9z4OkwnlMEwbzN24jdPF7GM99hxwL5XZdD1IW0l5TGL4VG0yMhgoyS7WJFd5dgHfTiqQhCN%2baHd5VVvotD1srImovduwp1gnqAFcGO9Y0%2bxn8kzlBdka/XM8i2IO9mAINzx/g3uUbWJ16wRpwC%2bvTlVIG5/zDEgmOYHBH0UCou462b7%2bCQcBgcz2d40HgwlkJg%2bGXz5Hb3cM2YVCrZaRFQsimtrHYto/%2bZxFU31zHXMM7RsI2Ztm%2bur6KwZdJQuAedq%2bX8zNPoOHMHxE/%2bz3QOgDtohrT/WR4VIPNnS34q%2blzaDeMo2ALwaczI2ZyY6StB4qOPii7BjDRPQT1zDLyrgiVYV6qwX2KovCfqsE0ESAjJjo5skkeF4OTiNuH5YiLeUJBfEqCiB33liIgTadlGQF7z56gSA2wI9KgtorqbxtZiqEYFWHh4AAZpkGeREisOhe3C0jGcpht2cYkw1/AnYS86gIV4A5marYxzfPpapKna7eQLr8Gx4OHjICfkK/pptTOIq2PkN2lkTDF0KNWwWL0IrbpY2Qw/K0ZZE2i0CWR0kfl8bYtg7wlJe8VbWnkDamPiuChGBICRyjCgLFDQuHmzAtK35pSvvM8dER/P6bClnZ4DHPwmkl8zCZ4CHtOkxEuQp97Yhzu2Rm45mbhdBP6pDEkvW7YLB4oqhOkuxnmeor6v4iNO%2bPM%2bbPwXSpDqOwSQ/8aKbIF48%2bCmHzmwcRjHyY6gjA4CrA6d6C35mA0pRFWLsOu8sDs2oPGmKSlYOA9gyULoy0Pk71ABMrKa6U2C7UxAxPlcOq9HD5EgaGO23BsNnLUB/Dq2ud4fuH/gooVv7P%2bCppfXWSVbT3UBCVRFDa3IehWYW1Tg9qGBrkK5CHTc6yswP315/B/8zlsZ07CKbQB02JhfgF6gw5Om490N4WOey68vDSNEcKg5uYAsue%2bQfsPn2Dmh3/j8Wkon0fR9iiCZ5cXMfSM5GiYUbKuxcj4Ahr6lOitfg1895%2bQ6auFPljA8PQ6tOxYY8cAGtr78fxVA4b4rC%2bxC1c4D3ekAE%2bUDgzkYXaEPjhAzgka26Qc9hvbGQFdcK/XY334ARxUh5r5V9ikLPYb2tjxzvfzgiE6wGtbgcFgxsz0tFzfczoccIjl9J5uOCmHnWursLvccv1Ro9HCbrfCavZgiOyu42kBzQ/D6CbN3bw5hO3Tn2L15kVoz3yHwqnvoHzqR%2b/TONrvOzH8hEKpP4MFip6pFSOmKYsX5lZZKL9AcHIU85YY1oxBGH1ZTK6aMLVmxjiL5DQlsDlQgEl0mmaho7QeRs/HDvATBsXIisURsSYgUkDM/Ytcz5IWi8InJ0HsvRImo6KVx50IuDYQ42cUxCxQKoUARzscjSJMwRP0uOWEiNiBIpbLxYYEsbM04PTC%2bGQE1rtDcD5UwHR3gJR4CPq7Cl6fgeHhOLQ8HnsZIyIIWrwn5wpm21mvLAUWsD3%2b/29IfvZh1yTh0mbIOvNUeEUepxDhvQifCVl32ZddBExFuAmdLm1ato7NNBysAclU/OdaQKCA0AM74TE8enwaT5%2bcgX2zGVvz1aUVIemQQxQQs0UecoS4Gbn8NtY40mL0d/b3kXE6ECAihG5cRejBXbkyJOYERRqICdLteAwHdy/Dd%2b4zrJ74PbYvfgYHxdBoC9DCXB%2bsfgMlhdEUYXHsVQYdj%2bwskgcwDxaQ0rkQ3nLAMrWBlck5XFyuxbJ5C29tcTiU8yx4Ebg48n5GQFzjgpfR4ligCnSn8I7R8Y4IcOBIk8d8jALekgOWx19KBxSCCsz0P0J3/TUsKp9jtOsutsOKX3RAPkmcjSYwPq6Em6Fe3NlBTmy2eHQfvm%2b%2bQJyyuLQ0VoTZRKHCiNhmFLyjCLJdPYfOc6eQv3AM3gfDmKEYai7f5MgnMMdRF2pw6GUcjXe0lMbvYB7dgXlJRWY6SYo7hd7BfvyXmSvotS4guKzF%2bsAQiv4UlhXTMCxuwrKigWpyCRNkhDkywLeRPPbDpTnCP1saEyEulr8E3MWdAyX25xk4HPlhmQ5HJqBRKMMkmWA8qJPLXaKDYqtdnAwwzeMUIS9GRZh9907uxHi/F5mpkhBM8dETuO49gulZJYLl17HxVIm%2bxj2MNhUx3FjAYF0GSkKjgMiZ%2bn1S5x2oO9PYJYTtGInlVrI8cw7mDTtimrFz0ksAACAASURBVDByW1HsWfIo6lPy%2boG1yOcy0nZN2dK0OO8VDaW5waDpT7RAgEXQpmqUlV4skgTMo7RhssNmuLUtcGma35tP33Y4c9RGXr8Et9sHvV4HE0dYQJ5Dx0pfVwNXWwsc7a2yKLpdLlhJjV1MD6PViWuDFpztNuFcuwbn%2b6w4123EhT4LfurQ4FyPERd7zOhlJAw/T6HvaRj9TzNYbyWV1RC%2btGGEV/mZq3YMrczDTAa4Q/iLqLyIb/kR3fAitMZUWXeX%2bMHhokjmlxZGYjICtOxUC1qrL7PaV0kx5F6bhHN%2bGCNd5Wh4eR69TdeZCrelGhSCKG7vkTDod67BYLSgpqYa84RBH4ufY2Mdnu%2b/QeDzT2AvuwAnR9zH/J/jfaNBTxz3oHzEgeN1y/jqfgfKBp24QAeUDTjw5e1WnGlRoazPjv6qDDofePHs0gwGnxeh6UtDM7OIyb4RjDR24XVTLf7XuUto1ipQsEegV%2bnhVZvR09BGa0V3XQtmB8YkCyx6qRU8Mdn%2b%2bdKYUyyNtcG%2b1SRHO0iI86w1wDH3Cm59q1wYNa/XMUIa4GYEeGSUdNBa4bYswWJ1QKfTyl0XNo6yw%2beDk5LY8eolMd8GG6%2bLAmlkhIgI0JvtuD5g4mjrcLZtCxd6zYwAPc72mXCqTYUzPXoZBf0VCYw8TmLgURhDj7PYbI0jsuGAZ9nK0XURYi14vDyItS2tjIqYLoC0Lgg/IyOwxkJMTRDecCGjJ/02hKXlTBFGUZjf/aNZYT9rQPxweVxMigioizmoDB3DrAFDsgCK%2biBWgwQsiskRAY0JZw8iPjXSGSquQl5urhRz/6IORMkGI7QYoTB6uCtL3M9m0vCGorg3xjQY9eLWeABXRp143ulHT30aPa0FdDdl0N4Qx7PuAJ4NhPFiKIaHPG5ThKkkd%2bF175NV7sPr2mfxcxHakrDZd0iJs7Az993OPWkeV%2bk5p51EiH/nsG3Dyjph1OfYhuRLFO9hUIihlYlKjnQTCiEWPcsKMguzUM%2b%2bQl9ruZwTnBp8DDUh0bLRJI%2bjti4UUjY6IAclUcBkNGH37VtkOOr%2bH79D4MQPCFDL58UOEcKgqAHxWBTJbBFPZsMo6zXidPUUbs6EUd8ZBxENjbe1RIE0ZokAd8dDuDhoxInaSVwe96NpIwkVef%2bCyoTeqTWMdffg4MT/gsL0AEYXNHhdUQUHGd%2b8ygzF3AaUC5sYmlzG5LIGI9OrmNsgChUBZ3QPFqZFMvEnS2P2rVYpiXMBsRdnEglKTe1cNRQ99wmRL6RpF2ugW6rFwliF1A9FOkDUEbHzS5CfgthyS%2bETZwEMkM6mV1eQJzQKOSz2H6dTYvNEng4ISQeca1zCzelQyQE1QMcDG8YrcxRGb/BwLIzLfUacb1rGDWUIresprOmcmFjcgnLViDnFOPbP/R2yU4NkfTqMK2fhiBSxpndjelWP8QU%2bN7%2bJmTUDJpY0UFtDCOcAR/TNBwccpYBgefnAiITBCCVxgiEfp4m0KAYV73eJiBQQalFwgYRYLPFukVFlJAwKmBNOiKfTiPM44vXKHSKCBYrNidkUFWEqDU8gwhRwyBS4PRHEVRbEZ10%2btDcm0NmeR3tLGs2NUZSzON4Y88hnyoadqB/3wWfbgZfhHfAcUIe8hX89AKdWbPQ6YD8OYDeTETLs/a4P5mLou/l3TqaH3UTo1GUpyA5T4L0WYBHUL9VQWTXImR774%2bNw116CjUXRslYHI5WhZuGVXDkSQqi0S0TA4DIcrOpib6B6awsudtquUsFBbHeRDNmePITT64PFZkYDi%2bmCfhpmmwfXB804wyJ4qmEFFwmDZ7sNONtvwTFGxOlurSyIsjh26XG6YRknu83oZq1IqdwIqZxwzGqJCOt4tNKLDcJuassL7fCMLJKmKZKg6S045skIV63IGUXxKxXAvCWCnO6jIhg7XBwVDhATH2K%2bL8kU2Djzb5j/p7/CwvRLtNeUYWP6BfpbbrAGvJK7xQQPiFhKMKinGKqvr5c7P72EPKdGA8/5n%2bD/6lPY6YSjHSJnhr9F53oD7A4/bo7YJQx%2b/aALlwZdOE8YvNRPGLzTThjcxKU%2bGy7223GyfhnfPOzBKQGLkz4YyOzGe4cx1tKHupYG/PX0eXQap2GcnEDdk3IEtQ60VNZioKkDU70jWFPOIecMY9sbR9EdY0s4/GUYLO0CkbtBOLp2dTNMi6/lsZgoFaMulKIgQWL0xXXhNBdhUESAUHti7k9shRPy17nJKOjqgIv473A45Q6RUX5RlV0Ns9WFmwMGif2XeoWZcJEwKNueo3MDLvUIIz%2bgnaF1DDmQ3KTI2uSX10QQ0oTQyWjTql2IqsgItRQ4urhkhuGtINuIPI5ro0jQZEsyFNuMsC%2bBD/sExcqQoMJy6Zv5LVaA0j7me0AhYTF1eD3tGTzcJTJwuFOkl7VChzzFUO7wHYPU4W6QHGtChhogy2tiR2aGdWFvfRbbHjuiyRTGpuYwPDGLEdrwOImOckqeKyZL14aU09Ty0/JYQdEzND4JpdgYxfx2%2bwltvn06tYjY2CI8ah9s/ncwmJIw2/NweN7Q9mBz7cDO1uokArm2ZSuuGWzUJbZwSQ4LB4R8BumAqcEnMK42oBgag5%2bjHtqqw%2brkS8yNPMV26N8RQwlCWyKNbup/HXNRvmTBjlvMZqwwJXZ3tpHdoRjy2eUU9kHXE6SKO1icn8XoyDAaG%2boxOzuDiYkJLM1N4nb7AuoH57AwM4GZ6UnpnEvNFDQTY1jZtGBh04bJ%2bXXC4Cr6awkbX/2PyA82wJlkZSfF1lLkiEkQxcwqmruGoJhewdy6Hk6W/3D2LUIZcoP4GzrkYxikGkxT%2bDjVbXKLTNY/ijCpcYgm1gpdmtbDJbFhuUkyc%2biAtJTDFqJAVmK8GH2xCCqcIOYEgqEwnbGDbKGIYiyMt5Vnsb/AyClsY35%2bDqMKBfoGBjA9M4vxiUnMzEyjc3SGHZiR%2b4onacqpGbSNzPH%2bODtixjoL2ZrOgzUWs/XlLRQfHEN0bhqm8DYcgRx5wC6WtW46yo4VrQfrBh809hiv78CTOIA3sQ9b%2bA3MzsjHM0KHEyKEQTERIiZEpFl6pGNE2IvrsaOJEGl9kgiJCRHxGQL7RaiL%2bf%2bQeFeAbYT5L2BR7BUOR6LwBXiPjvESFUTnR0ZHSaDGMTQ8jMGhIQyyVY6NQsHrA4OD8towo2RCqeA9OkqxxgHaRZiQFrXvIULoc6rjcOoypOwZeIQZCL/iHi1oKcJrzMlrbl1aTpa49WnyndSHCZGjLTJCDC0qnsnNknFHF9YnWtBR0yRhUb9cTfLzmoqx/aMpMTEn2AqffRVanRHDw0Nyt7aHnbWT/DhPHoP7wllYL19kzgagMevwdd8ttK6NwGV3op8d7Ozqklvm%2b/r70dXdjX5GQ31DA1paW9Hb14ee3l5pNbV1aGdB3VCuwr8iNj5qsTWxRnncB1z%2bV7zpb6fgIcXesiKqZRqML0OjXEJAZcW2g1XfRjEkLYqiI4qCkQXU/DMtoGX1b8X04CN2tIZqkPk81Q1lezupcS1Wxp%2bTBT47nBTt%2btmkaMC1jg2VmjBYJ7fE%2bzjyDooe991b8H77JeyN9fAFQ3KHyG87zuPpHNmmw80RHZIdFS9qCmeIV/SEA15WVqK1rU06RTiho7MTL16%2bRGdvNzYn12Gc2cDioBIb5AAbzc3At/8J77pewaYh0mzokTB5MNU9jPkBJVzM/V1vAkUXO%2b6OynbbIxzyCzAoaK0I96Op8QDDX6wSyzXAj6bC5RS53EzZJWeSBRHy%2bUOIREqvygjV52HrDQbhJhT6iAICIsVbqfOGdRgcZvmMCG/RyaNWjLRoRegLE50XJpwyNDSM7v4ezA0vI6qh4NKnEDeKNo3gjA7BdR/sa0FEdCmEyQpjvC7uh7UJBNQxBJkmQdnSNHH4N2LwfAyDQgsIaBPLYnEH4ZCqz7NYBc8SSY9nSO4cEztHorLtO5whorn7kIoYUdzeYx2IScUn9gJkQvwybc2IdHciNkL1yGti0rQoZo5YEEWtmJkVhW8CY0plqdixFkxNT8tzcX1icvLQpuS1iQklppf0MHsJb74ijO4CHC52spPyfMMIZwxQs%2bgZHWno7Blams/twBHcgz3wwZw8N3l2YXb8AgwOd96T%2bwC34xOw9D/ByPG/x8LwIwx1iqXxOxhsvw39St0hJA5LGMzEzBRAuxjkqIlXVHYPDpB2OeE//gN8n3%2bCgNgreLhDRKXaRCAQlEgxO8fKPj6B5pYWdnyGDpjA3Pw82js6ZVRMz8zQMSWHtLS2YZJMb3nLhtk1I3qHx7HKHE7aHMAn/wHbfdWwxYjzdg/MnjhaCH9D4/MwkgHG8kAo/UbCXyi9jwhb75/BICNAdEZsmY%2bzwgvBEzV0wTL6GBGmhp8p4SUDFKkh5gpLJuYFepGJGpHLFyl4QvLN0ywJj3hBQuwWjbS3Ik%2bClD38TYJsPk2ILEXA7Byxf2oC45PjmCTej3OERTshzqcmZDsxNS6fkTY5hpkVA3SOHLTWGGyhN3C6qCzrnpLvb2GLsOgMMTr8OzC6snREXpqTkCeiwBHchZ0mnrH49j5EQJJha2RVntgyYsFMGam1QKkyYE5nINbqMaOzYc7gkDbDe5NbJkyqSza%2baYTabEOEnRfhL1SfyHUfKbGPesCn1cBPQuQ5XB43aVxwObxwO30Ya3ZjtC6A8aYwRuq8GK51YaTeC0WTH6Nsh%2btc8pqi0U/zYaiGNaTTixjVXMJaQJyqL2YpwLfsgn9LLHcTAtmGmP9Jqj5h4tkQ60WE98SxsKgpC68qDrdJ1AA6IJWIQWPzo3HRjyuVvXg1pkPzapxO2YDVNoOHncu4%2bnoIDzoW0LzkR/taBG2rYbZhNK%2bEsWwkDbVQ6TU2yjk/Lyu%2bnQzQRQTwHf8e1lPH4QkHoCOLu/XpLPqrN1kUPRh7Rdl7N4CXZasYfbGDwWcZDD3Lo%2b4zEp9TGgy/KEjruuJC7SdKdN2KQtOTg3V%2bDZtjsxjrGsHsq1fA8b8Ahluhbm6B4sx3iBo96KluwkBdG8bb%2b7GhmMU6ydVk5yAULT1YG53Grl3sEDncIJFiHmht1OIrXmryWTRM6mUn17YWsKJZQcWgCvcaR/C8ZwFtSy50rwfRteZnG0D7qh%2br/A%2btZqPMZ7H8LfYEiirvqnkNN7mAY0wBd4AqTm1F%2bafT/GIlB4y/SqPvQRgt5SYoK/IYeZbEWEUOHae20HfNKXeNKCqyGLjlR%2bfJDQw%2bTEHdlYFtUYdN5Qp5igrq7iHsn/iv2BvohHFkCltNzUhaopjoVGCya0xyBd30JpaH57CuWJLthnIZOTPRwXy4LiAcoLF60bkWwDBDpY9h1LniQT/ZlTBxPkA4Ea3o/JH1bATRwb9ZM3oRjYSQJtyJN9HFKnAgEkGAjM9PR4gdIiItQqEAKXcAEbZOpx9tLUE0NSbQ3pZFY30EDfU8b4iivT2F1pYEz0O8HkJzM5/pyKK2Lo7ZXhsOHDa8cbnxjmkFrx8Hmi1s6w3EeA%2b2nW4UTBa89XjxjrbPwdi1O/DGKTZNOeXxjk1skjKQB9hLm6SSTAG9IyA72TJnkZ0fY249qu7F/YpG9K250TJvR/eaD8PMp2F9UrYjtH4N1VcgjZ3tAswWi%2bQBRaEAvezwvdsIP32EcPUrFN/sUjBl8KhOj3lGTiZfwIMZPy6POHCxV4ObkwHcULrZ%2bnGi34XTgzye8OLGuA/XFC5KYjUujoUwuqXBXnwNqbAKYccC9cck7msbsBWaAzJGapR17KX1CDrmEXEvIu5bRTq4jpBzQV5/VzDjbYEOymk/bJMTDjA4g3KEH7eNo3XOilH7G9TeLceVz3%2bHmgkDHrWOo2pwDYN0UskJJRMOsFJlxUiCOjq7YDQYsEMEyJAOB69dhu/rzxF6XYW9d5Sw3jh%2b8/006rvMFEcFPJmN4EL7Fn58NoC7U1HcUnhwSxnA5y0OfN/lxh2lD7cnwrjUocbx54O4MhbDlM5CxjeKWbLUicEm1Pe%2bxF9MXkWXYwCefBgmnwn7GTM0G2NQrQxDqxrjMQVXdzUKSSOwz6jZ9QBFKx1gPHJAnKTBj36ypRFDGsO6JI9jUOrjGFr3YEDD8FeF2Pn4z2xIpAX/Rk/cLeazcjJU/AZBimiQZRSkiQjRuVnk9g9Kv0yTzmB0NQqzO4VYMo2HYoTH2MnxAMrHvLg56pLtbaUwH88ZBQq3vHZ3wo%2byEaboihqIb2E3ytFMmfAmYcCSRYmwnxohbsN2yoz9qA57McrykJribhM5nwp5/ybexMQWWT324wbsRTYR9hhKDjiqAR2rfpnbnas%2bdKz4MbTpRu%2byBe3LXvTQAV3M9y6Gb/dG6bhUBANYMbgR9PvgdntkrrvEMhilsZsM0C0WTKen5FtjXpKj3NIQEsYNsjV2eNCMC31WXJJmYZibZHu%2bt2RiVuhSr7l0rceM07zWOWLBrsmHgkVsivYizf97a2sNAUbGG14PbpgQpyYQ9zK8lzd5aT5pWYOnZCzaGQ3rlNlTEkMSBRgBLYtunLv3GpUDy2hXpWBWDUA/9ACP2qZwraoH1yq7cKt2CK9Gt%2biQiHRCGx2wxg%2b3mAwULJXyvWCxNGYXqpAwGPjuK9gJg45IDD7VMnDyvyBfdxN6dxDlwzYcq13El3da5ZzgBbk2aMU/VRvxhwYTyvrMrA9mHO%2b04L9V6PFDpwkDrBFC6Y33MKxrOlBVW4P/bfYa2rSTMC2aoF83w7dlx3BLHya6RqlKDRRDaeTJkwuuRMncCeSt8UMx9BEKtK34UKvUsRDa0bERwSDV1ujoGJrmbLLTlUPreK1Qo5n3u0SkEArbGCnLejccNitUm5uwsBCK5TEnK7RrcADOG1fhoiCye8VbZFoU7n2LxFADdESBGwMmOSt8pnlDzgpLB3CUT3WacYZ14gIjQti5HgtOdphxosuEbhbE6IYddjJC35oFuuUtnFuowax2DeZ5E8J6jrQ5BMuCBpZ5NUJbTuSp/LKWMHLWCC0q1wWzlMPvX5g44gEitEfJrvrVAu6YDnRCD1XTIGvCCOFxlCxqQBND32YEvUyJXlWYjqDMpSfFZ%2bRZ2OQOEfF6jNghIiZGxCszhEaxQ0S2kbh8d9jlC%2bHOiA1XR5jnLHxXBu24OmDF1SEHbo06cXPEiauDNmnXhx24q3DiwhAdz0h5q8nhjaGIt8YdvDPtYHsthQIjdkfNdiOOwlYKB8Zt7Ony2NFkpW1TQeZUrE28n2WbWY5/eGXmCAVEEazomUPbgo2dLWJYtYInHR1oXXATAVZJkuYwwOI4LAqlgEEDUYDS0xLMUOllMb%2bwKGWv3CHCKAicPYXg5QsI3inH9ts3iAVTeHVuHctDLqSLRIGZEC4zzM82LuLOZLhUACcC%2bK7TheM9HtwZ97NAkp2O%2bvFpM%2bFS4YNiIYqYmhFGQbQ5vYyNviUsfr%2bC8IAHdgMpNKM1wpE1zG7AwfD3q%2b1QT65APbWKAtPgIJjDfqC0WfL9S1PvYZCde9JGdTZjgsKyjb7ZBdzp6mD4a3GvYQTXWQPEyAukGBJRcQSDIXLzWFSqORH%2b22KHCEc5%2bvK5XB%2bMDw1i5x3VmCeBa7%2bdwkSTBelt4YAwLnbpcOr1BO5MRegAD8rHSw442edh532ERcEV/BIaL4z6oOTI2Rc2sURqOz9KoVQ/ionfz8HXZscWi9/cKsmNxYuZfgXWqQbFmsB0n0K%2bPSqWxt%2bKl6fDf/LaXOoQBgUPUFJAiM71bYbJAlMYpFPEeWnE0%2b/hT5iIht5N8nNnBPlcRv4IU0Fuh40ixTZJ6IsYDcgcvJWrxclUGkZLGsFQBsFoHPeVLsKgX47%2bDULgDYb6DULfXSVHn3aDaSCsnFD4cNyDMt7rVZDhGZgCliJg35UvUOdHWeBWk9hhRBYJ2eKFyX1zAbvGrHxRUhwLEy9PihenxU4R8ZbZ%2bxcnj4pgO4tg/aRBsr4OQtytG69Q073M4yBaF11oWXDKAtgwbZYmILNUBF3weVxQqzVyKtzJvHfqtHC%2beglXUwMcLU1wiCJoJQHqf4nYyjiZJ2FwgOHfZZT7A46K4EUWwRMdJpxkISwtkpSK4I9tJrk01kkn5dT84poA/MtMhVXC9MYk9BoTtk0puGb18CyY4F9zIqLyILrpRYDHwjL6CGFQFMAo0uqPdoiIFNDZA2icteHM7ZdS9Ayy4D08XY4vPytH7ZSJ8Ecm9qITl562sO3AQ0Jj31YMrXTAmtkHs1Ev5/ZmZ2Y%2b7BChEgx8%2bancIeLgiPtVS8APf4Fi9RWSpxBh0F6CwbttKBMw2FOCwX8mDH76HgbpEMLgr18YJAwOTvuhVs5D0TVAUdWOqrrX%2bMuZ82g1TMA1v4mFgRFKXyd6G9qgaO%2bTL02Ptvdic3IRCYsPO2J%2b8E%2bXxo4ioHXJI0e6nW3nWhDtLIa1o2pJkBrohMYZqzQx%2bh2MFskDDiPA7XRQOtukEhQ/kuAiErhWluGgDhB7g8RGSREByca7ZIfDjACfhEGxR%2bh8l0HC3xEMigVR2R7C4AVJigiPjIAOpkRK7Udwy4OkLgSv2oXnK6NY1xjgmdEhaQwjTYjzid0hG4zMdYoxFYmayoWkPoSMiaNPS338%2bnypBviYzxGZ6yK3RQ1onXNIgSTyfkBD%2bqsptcL6WS/6tyLoJiFSO4ix4r2gXK60Q0T8BKf4FSq9jhXZhBgdEhM7RMSPKnjYAfHmaJg1QO4QYeFjobs%2b7MR1wtyNEZekxKIWCPgT18VxOe0yj2uJCh77HryeAzp6Bw7WgijFm5to5HC%2bISHLw8zodTnEDpE38LoPiEx7cteIjQLPSpgXrVGfh8V6uDwu1SBRQOC9QIF6pQZT/A/KLt7HF5%2bcQNuSGy/7l/GgWSk7fySEjmDQGsoim05iYHCotENEzAmKt8bEJimxS6TsPPLvgG2fEzj/93jX9wLR4j6ezoYkCpysGnuPAmK7zGes%2bN91ut/D4KVhH35ba8OlEZK1jRTWdQ5MLKiwxg5EHR68Pf4/IzvaCkf6HSaWxaQptczYHHqIFA0d/Zha1iCce4dA6g0C6X2EMgdwxz/aIPGxGqxj57tW3BimJwfHV3DzyjM0z9PzSjUqehclERo54gHvYTCLDENpS60uyeHD/YKJvh4EL55DZotihIKoGPbh7bV/wYGivuSAmSAu9zPUW9dwm0hwizxAwOCZfg8uDvvew%2bA1BSVyr5t8wIeW9RQ2DF7ZKUMgj5AriL2T/xmZiX6oPFlsWYJwRooYX1TLHSGjZLMLmxZ2/C18yX1pgfQBnLGPHHDEBEUKCLYnJK8QOqOmLCbsRXkumOCwPi3DXjBBYaUUCGOTeCocUCxuyxQQP5cTZbgLC5MSx%2bkQ4ZhYPIFkIMgUiMEtdogo7HKHSPl4ENfIAAXrE61whIDFEhO04zrT4g4V4iXeq%2bO9oG0XQbHzQ6SCdRt%2bRqVLn4GD8OgxF%2bE05hB0cqRpovXzeQ9TxWHIlozwaCEztFkOl8ZkEaQDhBZ4ObBKvr/FaIjgVuMcTt3tkdBY0beMl4PrUhmKmSNhpSIYOCyCdjmnX9oh4oN9g0zs2mW479%2bB7eE9uUPEbDOhdvk15gxTMFvdpR0i7VqcaliWMCiKoWiP18zjLK/LYkgVeLZThxO8drKntEMkoXLCs26FcWId65MbeDCrwdqWC7vk%2bX6VGVEqPR3vGaZUcC4ZSJx0sM1rWQBDyFuoBagJsoTE4M%2b0wKEavP6yg2pwFX0kCy9edeLy6bt43r8q4e/CkyZZD4RmECghBNGRGjQRBhsam%2bTPX4kdIg6tFp5L5%2bW6gP3JQ3iD4dJviAx%2bjY61%2btIOEarBEw0r%2bO7pENWgU%2b4QETtCvrzXgTOtJW5w6XCHyLeP%2bnCq14b%2bKR%2b0E4tQ9gxhgjBX19yFvxmdRgfDPGmww7mpQZA1QsJfRx%2bm%2bsgUe4Yx1NItYXCbMCgYYf6XYFAQoR6GdPdGUEaDgiRCQe91rpeudaz6pAL8eQSUYNDvdcsVYDH1LWDQzZD3iG2xYwp4Y3G5O8zldmHSsgitUw%2bLzS1h8EKv6KRN4r3gAaItG2DB67dKCLx4OEdwZcCO04yITqbBtlr8CkwM28YUMro4NQgJ0UYASVUAWV7PaqLIifbQcnwmrYlI8pPRiL8lFFLoBYzvidAhFRbUVqq8IIZY7CpnbKhe9PA4LidARQEU9UC08pjWSzKkc8dQzOfkT1YLNZgSsz9ieXxyApHFBTK/ZSTF7hHWhL21Wey6bQgkMqS3jDjCoMj3m4oS9RXtlWE3VaJHwqGYFbrBZ64MuXGJbT%2bL4gHr0a4lh5xGdCwGDXlKhO0b1qwEqXmW37GgT8pN09vGNIqGkm3LtnRNvEb3frN0CQVCktndqe1H9cgGpoihJypq8ePjWrRQYT0iPJZX90suMPxnKJCDWFsQc4Jih4iEQbut9BsiX/wBfipCAYNFjxXvjv8V3rY/%2bACDnVqcfDX%2bMxj8pMmBbzpc72FQIMI/VrNGjPgwTjFkIwTOj05B2daDhtYe/Foxg0E9I4NiS0f9HzG6GP79WFJMY2NyASqywDfBNA7CH/2GiO8jMfRBDsfQNm9Dj0SAPHpmtlA3sCAd075IHTBrkSP/ngccOkDI4XxW/Aq1V0ZAntFQ3N1DemVJzgrnA3752lwxHsHbF6dxsDiIaOENnpDWXiO5udpnlPsAj2Dw8ohPQt8tpU%2bamC8ooxPKxoTcJXRpPPCobIix2JnXLLg%2bo8ayzoeMOYysI4FtZwJeFsnAlkO2Ea0be540FWBJBb7xZbHr%2bEgOl2DQK4ubgDvB8sTCh5jsECEumOEgCc8QOyxSQEBgz0ZIpksnn1mnFoiT3YnQF%2bsCPp%2bPik%2b8LuNB0O0mBAblngGxa8QTjCMcjcHh4eiOWBnaZH1UeFeY91fICa4Q%2bm5QIwhWqbFuSwAAIABJREFUKM/FJAmh8NaIHed5r5PF8kBDPW8oyLdCxcTIzmoIhQ3m%2bmZS/n6I%2bI0Q%2bcYo2Z6wHW1W/r6IfGtUtD/7DZGPZoSEFnjQPIaaMTU6%2bfDcQjdDbhIVQ1t43DGNJ11zuNekRO2Ens4KH06JlSZFnXarXMsXvyPoFjtEmPfO4z/IvYJWooE76IdBbcHTY3NQNKtJQkhxB6041bKJY6%2bmZPW/0E1NQAH0Sb0BXzYdbpWjneoy47ev9ThG5dijZLFdNcJI4TM7NIv19m4cXP4X7Ay0I0ciZFlcRUBtw%2bLgFFaGZ7A1sQzzgho5GyW7g9XfUXp/OGcWMPgRCggYFIzvfpMC1eQBnfTmwuww%2bvtb8XxYjfukwXcaRuWkaN2E4WeToqsmL9WggQ7olz%2bc6Cb5cVIWu4n/nm%2b%2bgKO1pbQ2qLLg4j9OoLtCBRvl8w2O6MmmdfzwUolLAw46QOC%2bA181WvF9C5Ggh%2bjQY8eZTgc%2brbPgWAdhcMIP08wa5gfHMTc6h%2bWmJuCb/4j9riqSIS%2b8mwZqEBeme0cx2z%2bG2QEl1FPLcqOk2CQpXpwWMJiz/QIMimWuQeK/YIRiarx1OUBu4JLoIERRvxBB6vj7KfIP0%2bIehDnCRz/K6ibk%2bdj6g1RrGg0CZIfi5yt9fvIFnQsepxdWl0dOi18ivF0ZdpWmxgfUrPTLuKbcwFXlOrn/srQyxRpuTqjwE%2b91jOixp07LyY09owhxFjbS9yIJWnw9goL4pbjNOHYOf0FOmPjFKfnitCpaajdjSK1%2b9PL0%2b6UxdrCdmNq16mWHk5gk45qYM8ra0DpvRxvviQIpCqGcFdKVFkaMviR2inn5IyniXQGxQyQtXp1rqEOkqwNRaoLctlgwSWO21w67Nox4JotHkz7SXLd8deaWIoybC5MotzzFudU7uLT1AOWGF7ihr8A1/TOcXb6FS8ZHGFAp2ak0GV0CMZUPng0HWjYXSMRcOLCR5i7bkTUy1E1xxNUBaWIiZMeWxq4tUzJ7RkJh6OjV2WT8CAajKH/VjdpRFYYsO9iYncJCTSWZIMVK7QCedc8RDidRzxqgoGYQa4Qf5gQjEgYNej123uwjzRH3nzwG7x9%2bh8Dd29gBObkjjnN/N4mh16b3c4IXOjU4UaXAnckkbixM4Za9At8pz%2bHc%2bl3cMlfhpqkSZVsP8a3iDMrMTzFmnIFpWoWZoTHM9SrQ2t2Gv5w%2bi17rDJYVCyh/WCXnBI9%2bQU7sFd6YmMdeMIW3kZyEwiMYDH8MgyICRHiLJbABMi2RCmObLoytm%2bW8n4gKEfKCEAmUOFok7dckYPKnJBESEChUoNgaWxC/SO9wINrbLZfMcuJtkhTFVZMdNuqMRC6HR1N%2bXFcI4eMkBEZwc3EaN8xPcO2/l/ftP21lW5r3b%2bqfRzMtTUstjUZzR63WVfe0pmc0t7tvd3VV163UTW5SSSVFqkilQpIiD0gCBEiA8DDYBhu/sA0YGxs/wDZ%2bv40x7/cbAvl6rXVsQlIZzS8jtUbzw9Z5hvjss/da31r7W98JN9CDP6O3TyOARsH3ETqm/Zt0bShgwR6NvNVZerOsJ0porsVvRSSegVvnR4nQK7s4TnyshsuSHNmKLuMgvYlDOn%2bYoW2WRkD8Qvn8xeVxxgL8oNzaR2LoGM3IOgHbBR4hPP8ZFlfv6WUjSDZggXx9kdwfu0CeCsVcDkWfF0UKkYvBGTpXpGtFhOZmkStnkMyQz9fFBet/Ry7vpjqLGxY9rvvv0vB/hBv%2bh7g%2bdV8a79%2bkc1d8P%2bLFpB6ZBFNjjpDJHCEV38XiRBIZ6tRc/i2S8R1ECe2lOAHCLbWPdPoACbovRkgxSpEgb0OhLSQSleLpi27w1pNOPB/yQE1DWzU4jM/%2b/nPcf2PH3XY97rQOSWKU8UFfZZ2QvcAkucEi4fyhIR2cE06hx/HSWI48ACdFkpcvCU/QF53Bb7qvo2lCRT%2bqSMFQEl9TMPRZ/QBuagv4xjSI6zM/4fOBG7g8egfXfQ/wjfc%2brjh%2bxBf913HZW4uWoBnOqRTM41MYsLphUfUTuvxTbOg6MZ1fg9U2jlh%2bVSpKBobt6FDp0U1ThatMMgvMF9pDbmkPidKF4mmlAyganMihvscm4a%2bKLKZu3I3auno80wXwVONCg9ZdCYfLH3bAbB4F8uu8NMaKzRz4ZFmXnIxg9vJXyNitKFS0xH478D3FF/0UDc7JatBXXUF8QaHuNfUcLpuHcGXmB/yLrQaXJmtx2f8TLvvu4mvPHXxprcHv/TV4HjLC6aegyh2EfTqNyVEnjq/%2bV6yYNeg2uGB3zpBR3oKJfL/VPQv9qBcaiwvOYAaxuU2kFmlEUCdE5mhEfNgBRQlvh2mIaCpIsG%2bKhj6vEXJeMKwgQZ4i1WmgMETKggSXhSS1fo4E51lbnPOCjArJPQo6pJFRmJ8jRLiAbH4OzQYfGvQBvDCF0DAYwBOTHk%2bczXjm7kDj5Cs8Hn%2bJJ45WNDjb8dzTgfqJF%2bgbs6MUO5Ekx1zySBIgeRr%2bWbJZ8el15GL7yJLr42TIPHOF0ydYyLylew%2bRofPp0CZtafhPU2dUucIXGSJt5hlyeUnoyc8OTttQ33KX4oAMuikWeG2P4rUtSp1Sfs8jqBjB48N9RKIxCYern%2bpYXlqSkcDVYqwgIQxy6hjmCnCbGB%2bFbcQE3aAaY/YRWC0WOOwO6LV6mPQmjFpHYR%2bheyx2OWe12hAbn8U2CyWHilgLF7AWWUXd4xB8FFdgfgdLhBLXKS6IUxxTcMcw70tTS6HkTZEBXMNbQotvC1s4Jre4WDWC4gZzC5ILeNhpFIbIMAVDj5pv4emjWrQZwnhI0eAPL/pR99ogQRGny4QhEmKKzJbgAJ/PT0M7Ix1wcnyMMIEgrhc45bXCyscaQuFZkdjl4qrxcQdGRmzoI/dptyt0%2bbGxcbx%2b3QEdEyXtTJm3C4OUdcktNisSnpjAYC6ZWY6mUYqu4j/9M6FLbQa7uTzKoShWaESa%2b3WiKDk2ZIZJNQgnRY87OQrGlpXi6Y%2biwdWKG6xEevRmedj3MQp0Fgn0rMvymEyFYIUdwlPinCFCERi5Oc4JCkOEi6RZPO34BLvkDjkSlDoCeugjuo8Zo5wmHxm3wWCnHzg2AiNth61GGG10PGqBmc7xscFmkmumUfLrdgMC9oAsfe1F13GS3KHtJtxkQEturgtexGFiG4fxLbnG24PYpmyP6DzvSyMXyOjwPB9wkSHS48pL4%2bzPgCuDPndOFkHe0BTomSzQflHZkjG8mBEq5rPkXuIKN4BpcrxERhggSygwazLIclmGjKPOG0EglkEiG0ftVAOue%2b7jW/cD3Jx6iG8nH%2bDW1M/4ZuInXHfV4aabzlHja7em6nHF%2bxNU4zocsDJkZA3r/jIWvSW4p%2bj/D8zjkF7eio8iU/881uga1xbxdtVHmIGzQZxJ%2blRGiJMZHAx1ODK4eu8FnvY7oKFebvmmEXf%2b8BBPdFOoeabCj2063H7ej9s0Fe626SlUXpYO8ESLyKQSaGtrh3VkBKXFJWQ8HgmESr/7LVJXL2OOQmJ/NInftI%2bhaTSEdD6BmsATXBr/Af/cfw3fBO7jKkHgGzM/439qv8AXo98SJniAa746XHbcwWc9V/GVv5ZCcAOiVh8hQTNsfYN41TWAvzCOQ00R4EaUPJHNhpVYAVZCgJwPZCSoautCx7MWLEayOCLYvldY/mVOkHFAJ7nBZsO0LID2ceLTFMQrlRuvxlOyHMZh8EtLGC3mkESEkhS9kBXmxdFZgsLMERCGiMmIbN1dUZdk3lAsyWlwH7RTUaSyMdR4H%2bPK5F1cHrtD0LcO19z3ZPsHZ61y7KHjqTrqmHv4o%2bMuviIcoHLrsEijMuUKozBJYfFkDPfs03ASal30JbE4k8V2fBEZVwR5d1xa2jmLsNWLjUgZu8kVYYlwVng%2b/lE%2bgI0grwuIq6Nh00c%2bvse/JOsBOoG%2bmzBEK8avsnymoo7idQH%2bG9vbO2LdZV2AGSLUCQs0HZbJ8nMyhF3kejGLTTKCuYUi7s48x63QI3wfbcAtQnrf%2banN0DFB4ZrgE3wXeIRbgXp8F3wssPhqsA6qCT3OZg5ERotZIKeRPay5VrDtXcX%2bDNkZmh7b/nW5JkmRsCKndRTaES1hZofssNyW%2byOGCC%2bNMR2u/o0ZHdZZ6AhGeixu9N2pxUtyjU06r/AEH/Xa0Urhp%2bIF1i%2bkxLak8IlL5w%2bZFpcmC33lEso3roo6xO7pO%2bzTQ5/d/S1OzV1YPtxFfbyVHvARro8qgc8P4Ub8lGzGl7YbEhHejTfhTvQ5akKP8bnpKm7GHmM4TEM8UEDWF4PPPA7LwBi%2bqHHDbi7gXZk6P7aApUiRrk1gdtyPuQDBZM8szggFnpQUSd235W0c5y8yRM7d4IK4wa7RGIYSB/CNTmLq8UM00oP/RPP/4ZsR1DT24KVxGkbC1rrwhx3gIvgbJ%2bN3RC5wl0bCctNzlL78HOsWE3bP3uGglMO763%2bBM%2b0LLB/t4UGyBTeCP%2bOyrRbfJxtxO/IUPySf4StXDb4N/4zv443SeP%2bSswY3Uo8IqNmQc0ZEQ8Slt0DfZ8V/u0zYQZfFCkWBC9ESttILmDTYERz1IOkOIeUJ4d0idQD9Tn54jghPCp9kiKwIRVZhiCxBF9ugsHhb0KGRggxuJnpwQ3TrnDXCOUNhiGxvCjWGawJ4qLN%2bCBMmV%2bMU%2bpJ7lE/2cfFkfAY75RLmVxfR6H%2bFB4EWPA6146GvBQ%2bmmvHA14z66Vb8PP2SjpvwwNuEh366Z6YdP/oboZ8YwWloH8c0Vc8I3Z0SEizaF7FGU2CX3PVJRU77NLEvrJATwjPcjiIKW0QYInQfE6Z%2bwRDpJtfWRkauYyyJPsL5dZ99j4Yf2tDlLqBpOCAUuVbLrBjANooX2mi/cyIvRjCXScFNlp9jgUxFLYJBUZxZ42QUUxXuANclpLM5JBMJ6LQ6qPs16O3qhVatxYBqgLaD6Ovpg6pXBQ1dU/eroRnQovdNr1SYefSTWJ9eEIZIwZlAfCJGvyGC2MwcVoIL8BOK3QixgkTmvJW9FAg5CCHS%2bZ1ohSES/IAfsIJwhhkiadz4uR0vaL6ryPh1fFODur/5J9Sr3fi6tlGWx2qe9aG2RSv5wUt0rtUah4/cCbtBrhfgL7swHGbsH/D5YBweRpmXyqgjuIjCMWqXpAkHTLphPTq73%2bBJw1NohwahGujHoG4ITxsb0NHVCc2gFmotdZCqT74a06tWERDyIUhRIC%2bNGTr70PKqB7%2bm4a4NJjFumUSH3okNepmsLW7s1cqymJXaUJcKawlFXv8XGiIXGSJdhAV4/a%2bHcwPeArot07JmyKOCz3fSdWaRMGh6PZpAl6soI6CQoxg/mZI3XQVDefIGufmykiVm1giryOSLIr3PhErdoE7een/fgDIC6G3zVtXXDw1t1QMaevvKKJD7BgZoBLgF6JS9OaxNU0f7CnjtJBfsL4m0/nqwLIox5aksFioKMsvUWFlGOEIVntAHHKGLLDExbISY2MWpfUoGSFdZCNFVIsIhSY4uCxQeqLDE9nYUfSDG/MIGYQ0Rvw9LPi8Bk6jw8sUGzE5hu5RHaXUJTwLtqJumOR56iTp/E%2bq8L2T7INCM%2b4HKse8F7TfjIdmK2sBT6CYsOCMbcJJgFhgnRbfwzuLH8dQc9sLb8qmN84QpNbYHhxQF8v5RZEc%2bwcG24AOWWDUa5Id7qhpFuyUIfeJQCpnd2jY06zwUBBlleYzzBW8m0oobZGNJrjO1tIv5UhHawSERU2MNkSpDpPQvn6F0zhDJCEPkTPOc3OAeHiZfSrbnsvkH1JL1vz37FD%2bmm/CP5su47KnFnQS5xtgz3CRP8ff6r3AjXk9RqA1FAjezjik4LU64Ozvw7st/Dwy9QorefsAWxnZ2EQHWGKCAKDzulWYdGIaxR0teIQisHshK0QdLYwoOWMVrwgD9HgqAqLdGPUGM2%2b0U/SXRpPfipWlaskW9k3nxBEq9wJpSL7C8KG6Qa4I56uM84NqQFuWab7EdDlFQdIqDxRLO6n6HM0u3dMD9RAu%2bna3Htcl7uE1usCb6FLcTDbjiu4tb0ce4HW%2bQdpPuueq/h%2bupeugjVpQ9aUQcPkScYWTMduDmX%2bGdgcXftikaLMniB39eJzIeELZo3hdH3DkDv8WFxRC54kUCSLnNj5fGFCQ4TA82JKvBNPzJZfRNK8Of/T6/9YtT5JwhkuQPJmycM0Q48cF6YecMkd09BR2urmFpriCkyQK5whbXGzS42tHk7UKjsx0NjjZJfjS7X%2bHFZDue8vFEG565XqHV/Rr1rmaKFm04De7LkD7jL00kjrDtKcty2EGIosBZikKn13EWP8QZjeKqvP5hmNcIdmRVeHuakODUaiUY%2bogt3jTsJ%2bQXRK%2bXIPDIMLQ6NVosETzqG0PjoOcDhgg35gny0hjT5Zkh4vN6kZvjMtYpZGjo5wgFpn78AenSPPKzQew%2buoQVfQe5xzyGNTpo%2bjToau/C0MAQNCothskNNncZ0NkzDF2/FoP97B51aOwwQ61Sw2vwoOzLouRLITw6g%2bjQCN7e/QJHRs4PLGFMa8G8P4PQyBSmTZN0Xxq7qRWJD6SxfgizxyMfxwJkBNkL3GlW4/mgGyp68yZdHwLOPjw3BFHbrCE32ClJUWVdcP48GPIlSuTyvGhqbsb42BjmyPJnydUVbl6X5fFM4xOlXiDA9QJ/jt32O0gU5jBErq9fPYCXba1QD2qgon3dkBrftZvRQB0wODhAblCNLvUQrrVa0T1AbtDmRcjmwahmGJPkDl3trcDv/gQYaIHO7sBLOl6NsqiqWirfZx1eHM9vyEeWeElsL7/yv3eD3fJ2S0rFCDV%2bWOYG8Dogp8U5/heWiKd03njUuMJZYYhwOpwrRjIMevjjjcwKIb9foOmQqQCihXED5sN%2bJNIZesBBKZjm4mgplSc3x1tOkQ1q35fOa2l/eEiDPk0/JnUuGu4rIoa2Q4hum0DR4ZAeewSPg84UARwKdck77VDbIq%2b2QVNV8gAUvPGxNDre8H7MEMmUJBjipXCe22IQVXb0jEYlIcrznptkhSqtujQWKXJGSIkE2QZsMWGSP91pMmDZNoJVxzg2yQ7skJ3YmzRiPxfH2iYHT3YpjuaUV3XLQMo0YoPZapMCaml0zjhih8lqxox1muY/zefkNnYjq8ICyb0pY925hrepLcx58tiPrkvSg5Mmh3ElC8QZpGpGiM/xl2Y%2bYogoBIkHHQa0Gv3QRfdhffYC9p5eNOh8uPWkSxgivCokdPkKNtBUeIJMl%2b%2bme/lji8fsBgn4CEPk7/6HSGntMEMknwB%2b/x9x1vsQ6/uHIqHByhFt7e1SSW6mh3WO23C/z4mXgw5CjVapKjeMjOJW1yRtLUh4oki4yDvpLMgGo%2bTTV2H5jRVzXQTEZkMYNhtlaUzXPQA9oUFGgtqOXqhf92AruyC6wp/ICVY6gB6uayyBAS%2bNBor9Of/uckVomBeEQMmLo/zWpW5QgiElK8x1g3s7W0hQKMyBEAdEe1w1RnZhkSLC3aVF7LCUFoGfk9YaHLuNWN/dlzJb/i4gdwJXil/UENFb7LDZuANoZFhpJA5TB9ksiDrChACL9KYTOMqt45De7Mx3IayayliLFYU1cphew7w3hcVAFkW6LzMRJsOZlvOneSUrfHIxK3yRIVKtHOWSmVfj9OBjBYUOE2UXuCFlMswOGfB/xBBZXpLUN0d9jPnZFZZzWcynU1ioxAayVsCukBovl/PXIfnhuRO4XJ5twiBtjQY9hilOYGDFQgp8j8nImiIaWExTKCSPUcoeI0vRXop%2bV26aoPYs/U2KDnNMiKRIscQ84fQR5qjN8xoBHWeiOzRKNpGmZ4wFL6wLXFwa49VfdoNdrjk0PHmJ2tuPZWmsrsOEenKF7AaVgqn3REnmByQTMTJYGkw4HJWlMReyhAILVy4hde2K6AtySS1/XzQajUhswA/HuiGsIcLGj/f5XFv7K5HQqGqIyD2tbWQkVTCO%2beEMFUQdbjxcQD6ew9Ef/wtWTBo4IzmMOlwIZZcxYHTARiBojEAQrxINWicxk14ib3SA9MLuJ1aGKknRB11myfgwDhgYHEbL8xbqgFGKADVSI8AZ4fMO8CodoBRPxyhc7VektGgEZLhusP4hCp//IzL9fVIwUaBgiBXnuKii2gH8gK8piuSHrWqIsKAC64ZUJTS4Azo6O6UDLI5pjHrjGDI7EMiQa42lcPrlf8CG/g0mo0WMu6YQK5BxNo2LfJ6JEKHe5pY2Sx2TXz6QtcH4x2uD1bQ4rw4xIuyj4KKfIr1%2bcnPMEJEcoEyNeYVAdc4QUYDQ4sK8BEHMEBFJrYVFzLFcDn9hYntHIsFidWrwCKEO4KEt%2biCV7bleSEVSh4%2brmiI6/TBhggEYjVPU2QcijJii4Z6maTDvSCFNbjrOx8kDxGmoZ2jLFPk0T4nUodDn%2bXyUgqM4TZswTYFE4qOlMWaCMQ9AaHLJPTy%2b142W12MYjGygj948F09XM0H6ylZZGiPXsr8nX6dmI8jfENnm0rmWJix1tGNF1YOdiry%2baIzsKC6TJTTY/bGeEKNIdnlsDPmY960VISXxBHTOTC41PBbCPgunJ8ivzy6iEMjgpd%2bK2Vga77K7mJuKYS1UxBahwrUQvZQg2adgCSszFKOk1uUTW9wOL/ID3tPlV3CvjaAoBT6W3Fs8uvscl/6uBq3WCGoaesgNaipVY%2b9TYhwNMkOEy%2bc7OrvkE7fHTJQkQFS6fAnF//W3KP98XzREWG9wZnpGPp68TeGzaIjQg7KUDncA4wA%2bx5mf9xoiioBKd08PLNQB7AZjjgBsWgOMXWq86u7An9muQhW3Y9EfRWTCKdGgna6zmOrooFGiQtYZ3sktflpe/5whwgQIsv5aQk9D5O5MfhrmIxGoOejxcInMnLBHqsti%2bnMgtC4jgKeAgCFqLKG5xVqiwzpRk6zK6%2b/ub%2bHgcF9GAvv%2bqlJMVUWGt3LO9h4IsYqMKMlYLQjRCNgMr2CF3u46S%2bvOlvF62onZaBYr/jz2yL1xWwmyqtwiNiPLWJ4pYTu2ir3kBg6YH0RtjwDRubz%2be4ZIWchR7OLYHmh9OQxOl4Qiw/NfK1HiglJAzSIKleVxNoLMEuNqUY762MUV2Q64nBS7U4hcoc6xDQi4UkhG%2bTvm2fO5z2%2bbtzzfxQZQjMBxAh8rNmAQeh0FS2QDDCYPUiyQygyRLIuk7mPBHkQ2UEY8TfOfHiye2BFWSCZzSPccIk1bPheLb0uLJ8gGsC1Ilj/0Apz6YobIC90UegIb8Btb4FY34YHKTW7QKCRJ7pj3XkAJhqo8wVZyVSP0FktkCFlDROT1mSHy9e9RWCoj7Evg9t/YoX4%2bjVyBvMCg4gZfNDUpUloDaugpDqhpt%2bBptwFD9MAajRpvKFK8%2btJG9/aRFwjAStPANOZBp47%2bVisFQ1/%2bO6xp2pBce4skRZnh7BIszml09OvR2NolHqCweiRiq1nyALnlPVGZ/4ggMScd8KTfISywnsAKTMOj0HYN4QWFw1xI8ULvl3zghzjgffE0D13%2bfrhUjjFD5E0nst/8ERma17lSAdFgEg%2b/GMNwJ72xfIqCHCUYqvp8cYMU/T3r1lEcQiOAokO%2b3jugxdM3w1Cp%2bmAa9cEdLMDuDGLEHcPU6CSOv/0rLBnUCBcI5NB0nE2vYJw6yeoMwWCbEumd7AJ5hHkaGfTg2TI9fGHnY4rMe4YIuzwVzXlNaEOaBD6cE6R2kR3Cra/CEGEFCV7z57yfIMGlZVGNm2c1ObIJjASZM8xfg2d%2bQIHsA1t2Hv7nSJDV40RNbpjQ4LAUYfF5RoUWM6FGHU0Hiw/%2b7ClChVOEi2cIlQA3IT8PuTtPfBc%2bco9TiT3MkBHne0KFM/jTh3JtippsE7sEmnYwm1yo6ghVqsZo/r8aCRPmT8NMN1150IEbjVr0unI0KsLCDlFigQ%2brxtgNnp4ciYYIh8NcPL2dz4mExsK9O1h8Un8ur1%2bmTmBDKQQJQo08avjBlVhgRAzjkI7gMVl%2b9gxVo6ilzrCRF3CQmwtnNhBOLsI9W8KUw4fDe59jdcyK7AYQmJ1HZp46gAzcNEV7YRoNJdYQXDnB3OqJKEiVaKpkFo%2bRIG%2bxvn6hXoBjftYQ4eJpE/Xa3bqnuPbDM4LGIdQ2qyUx%2bgsNkQpDhAkSZrNF0t0H5AH4Ayv8uU3WEFnu6jj/ykwwGCawpDBEqjiAUV8VB/A5zgvoh4fPO4C9A6NM7gCR0vLGYLA6obK4YHrTBfzDn%2bBw%2bDXcSfJO5mnMrR0SClRUJH1kcJcoFC1vnlB7K21x6/RDRcn1C2nxavqb3d0gBzyE%2bvSRjUqeYLlSKbJ6zhRRKkZWZW2QWSGSDCV3uEVve5MrxwJ%2bbFN4zASqra1NvD3exdHhnniMqu%2b3VlxeVUSt%2btb5%2bOI5M4W6tvEQklwImTsQ3dBsnkbV2Djy4TmEaNRmcopmaKqiHVpt6eo5avxvoxc1RS9CYUU/pCiskKEwF1MuCH3ujfADy4qOSLVVyNK8MDI/V1SYIZz5YR0RFlHv7UaOWSLkwnLFAl0jA6oPw%2b1LIZtNyxyvBjwX5fR4W40DqnC4X0MeQ9MPp96FDf7ucISxwCKWCaNEOucwN7Ygn9zJEJJdmCb/Hl6S67xdDi5IWw0vY22Wv1i/jBX6d6VYRU5v/cLS2OU7DXg64ED/9BrM5L97nTP4qcOKG486pF6A1aaYKCmdQa3HU5ZocI6MWvurytIYf2XG45ZAaP6zf1AYIuQG/dNJ/PVXDjR0BFHMKx3Alv/58%2bfKQ9I%2bG72WlpcSEDEm0JIb7CI3%2bHWzHT39KkzbfAiOTMLUo0Hc48cmGeKRv7Si0BbDTChJUyOAuUAc2lfdsKuHERn3wqUnuN2txroUT6/%2bUlCxWjf4xpUXkuR3G/V6AAAEmUlEQVSbiQx6yLprHBGoxuN4RR3D2WJeGOUOkIwwj5aKhoirUjw9EwxKkMNVY1my%2brkRMzJcM8jkSTKKMcLrd577MTQSo9GQFDFVftsMfathrxL98TKYupITHICKwuzXfUPkDlXwGCalLJ6ZHxtk5NYIrfq%2bm0FZR6H2RBRZQoOb0QVkXbFzhsg8y/F7EvIJru34kmSHZfks9pGGyAAZQSO5EM4HckJEG95EOxlADoR4XUCwP%2buHEFTWVJrKt3jOENnd3VMqRxdoyC2vYIkeeoE6ZrnyhRlOlmzNZ7G5uojSfJnmtPlcVJW3bPiGDUaMkMszm4yVY8L8tD9qMdC%2bHlaLH4XkSSXhcYw51g0PLSBNdqqQIoQY20OCXPd87lSuyz0Zbid0/VCSJryNByva4uc5wdyC%2bH9hiNgisOZOcP/hC/z1f/41nvWPocUQEB0RNn6GyKa4QN4OMkNzXnGDbrcS63NOcCudQunSlyjT8C9/fwt7vDS2UMS77/87Tg3t2Dw4kpwgG7t%2bevMSF5ChY/LkC60TvUYHxsdsIstjso3hkXpSBBWd/gSmaO66Q2nYAimMaHU4u/ZrqR2OEdKzWseQLO/A5gljYjqBMV9U9h2BhEjr22nfNZNEmuX18xeKpxkHcHqLWSBthAQNmbdo/LkRP9U%2bRtdkEfW9Y6jrskiKnB%2ba3R/HDf0za4gSDmAlKSfBX8YBQo9nhkj7S5T%2b8Hus2a3YfnuGvbks3t34S7wdahZdYXsl0uOhz5beaDLTOQseq0bRpaMwmKYQf7lmyGTFffr/DUYDJsgFOv0Z2CYCMLlmYe3XAF/8KfYtGgyzxJ7OjNzSAUYc07C7QjCP%2bcg1OqEjl2m0T8nxhDeKdPngvRtcW12h3piHM7UBb3EfboqXJ5KrcGe2qG3CndvBVH6Xzm/DlV6ntnHeHOR7swsUZe2TeyNff8iRH0eD5AZ3aDpsUlAktQO0z6vHu/kk9taWsUHHDJt9ZGi56py3XgqleRua9lHYrBxz4zqk2aCfQm0vvME0YflTzK%2b/I0Dzjnz%2bGXIRgt3FTUSz68gvv6Xfc0jAh3z9ylsU6Di/fIL80rFsi6sMit4iUWI3uViR1FxZEXh6sM8fRt2VxAXvy/H5uV3ZP/hE4/NMj5Vs8J6yzwKqoi3GwioXzx%2bdYI8XT4VPfCALqcwu5a00/jfceSzASvss0X14eETHe%2bf3sq1hXKHcc0Dh9gl1KKtZHwpNhz/ru7PDX73idQpFznNzc0vOrYvy9a78japdOu%2bA8x/5f7NdfPhPHX%2bi8UPySlKQvAojSxZp5EQL02/4RzO7xOv1yid9%2bDqn4HhZnhlqXLnK51MUnAUCARF55Xukqp3u408BKbzlfXnm8w7gPB33HA/h87fxb9gYKnPShH8g/z7ecpOSHLrG4o18neU65ONN9Jb5Ps45cEBWZaTzvtQzU1PQqELa5r/Dz8x/41drla/DM7eH/wiTHP%2bt28WHrnYEt%2bq16nW%2bdvGYH7h676da9V5Zp6Bn5vt/Vf0PuANED5Sprv%2bPNuEn/R/u4WfkZ6124K%2bqO/%2b/tepz/yvAdPTPjFDktwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1442\" alt=\"角色天赋查询\" data-srcset=\"/assets/static/nonebot-talent.82a2fbd.9dd2e781868d79fc38684e00d792b01e.jpg 480w, /assets/static/nonebot-talent.cbab2cf.9dd2e781868d79fc38684e00d792b01e.jpg 1024w, /assets/static/nonebot-talent.d3a0f69.9dd2e781868d79fc38684e00d792b01e.jpg 1442w\" data-sizes=\"(max-width: 1442px) 100vw, 1442px\" data-src=\"/assets/static/nonebot-talent.d3a0f69.9dd2e781868d79fc38684e00d792b01e.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-talent.d3a0f69.9dd2e781868d79fc38684e00d792b01e.jpg\" width=\"1442\" alt=\"角色天赋查询\"></noscript><figcaption>角色天赋查询</figcaption></figure></p>\n</details><br />\n"}},{"node":{"title":"NoneBot2 插件编写尝试","path":"/code/experiences-4-nonebot-2/","cover_image":null,"date":"August 22. 2021","timeToRead":24,"cjkWordCount":2792,"cjkReadTime":9,"description":"实在是受不了这种书看不进去无所事事的日子，于是给自己找了事情忙活。","content":"<p>放假在家本来打算看看考研的书，结果硬是只看进去了一丁点皮毛。实在是受不了这种书看不进去无所事事的日子，于是给自己找了事情忙活。之前一直在用 <a href=\"https://github.com/Tsuk1ko/cq-picsearcher-bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Tsuk1ko/cq-picsearcher-bot</a>，上半年尝试了解了一些 Telegram bot 的东西还顺手给 PagerMaid 修了一个简单的插件 Bug，最近放假发现了好多好玩的 QQ 机器人项目…… 这些让我想自己写个机器人玩，于是便有了下文。</p>\n<h2 id=\"go-cqhttp-和-nonebot\"><a href=\"#go-cqhttp-%E5%92%8C-nonebot\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>go-cqhttp 和 NoneBot</h2>\n<p><a href=\"https://github.com/Mrs4s/go-cqhttp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mrs4s/go-cqhttp</a> 是「使用 mirai 以及 MiraiGo 开发的 cqhttp golang 原生实现」，在酷 Q 倒下之后感觉撑起了 QQ 机器人的半边天，在很多项目中都能看见他。通过 go-cqhttp 的各种 API 接口，开发者能使用 Node.js Python Golang C 等各种编程语言处理机器人收到的信息（Event），做进一步响应。<a href=\"https://github.com/nonebot/nonebot2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nonebot/nonebot2</a> 便是一个能和 go-cqhttp 对接的「跨平台 Python 异步机器人框架」。</p>\n<p>看了几遍《<a href=\"https://v2.nonebot.dev/guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">概览 - NoneBot</a>》后，我觉得 NoneBot 是一个很方便的平台，有自己的脚手架可以快速创建项目；它的商店里所有插件都可供学习，Python 实现的机器人也有很多源码可供参考，官方文档没看懂可以找些大佬写的例子看看；上半年有一小阵子折腾 Telegram bot 时看了一些 Python 的代码，了解了最基本的插件是如何工作的。这些经验让我决定了使用 nonebot2。</p>\n<p>go-cqhttp 和 nonebot2 的安装和配置均可参考对应文档。最终 nonebot2 的项目文件夹可以通过 <code>nb create</code> 快速创建，nonebot2 通信协议 Adapter 选用官方维护的 <code>nonebot-adapter-cqhttp</code> 即可，使用 <code>nonebot_adapter_gocq</code> 可能会存在兼容性问题。go-cqhttp 的反向 WebSocket Universal 地址需要配置为 <code>http:///[HOST]:[PORT]/cqhttp/ws</code>，其中 <code>[HOST]:[PORT]</code> 和 nonebot2 <code>.env</code> 中的配置保持一致，我尝试填写别的地址时连接不上。先登陆一次 go-cqhttp 生成 data device.json 等文件夹和文件，启动机器人时先使用 <code>nb run</code> 或 <code>python3 bot.py</code> 启动 NoneBot，然后进入 go-cqhttp 文件夹下启动 go-cqhttp。在 NoneBot 输出中看到 <code>WebSocket Connection from CQHTTP Bot NNNNNNNNNN Accepted!</code> 就算成功！</p>\n<h2 id=\"虚拟环境-venv\"><a href=\"#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-venv\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>虚拟环境 venv</h2>\n<p>初次尝试 NoneBot 后我发现通过 <code>pip</code> 安装插件的方式虽然方便，但是很容易出现依赖版本冲突，这时候虚拟环境就显得很重要。这也是我第一次尝试虚拟环境。NoneBot 推荐使用 Poetry，但我用了下不太习惯，尤其是最新版本的 <code>nb-cli</code> 创建的项目文件夹中 <code>pyproject.toml</code> 依赖却是低版本的。最终我还是选择了 <code>venv</code>。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># 安装 venv</span>\npython3 <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> venv\n<span class=\"token comment\"># 在 /path/to/thisvenv 文件夹下创建一个虚拟环境</span>\npython3 <span class=\"token parameter variable\">-m</span> venv /path/to/thisvenv\n\n<span class=\"token comment\"># 进入 /path/to/myBots 文件夹并启用虚拟环境</span>\n<span class=\"token builtin class-name\">cd</span> /path/to/myBots\n<span class=\"token builtin class-name\">source</span> /path/to/thisvenv\n<span class=\"token comment\"># 启用后命令行前会多出当前虚拟环境的名字</span>\n<span class=\"token punctuation\">(</span>thisvenv<span class=\"token punctuation\">)</span> user@host: myBots$\n\n<span class=\"token comment\"># 使用 pip 安装各种依赖</span>\n<span class=\"token comment\"># pip install -i https://pypi.tuna.tsinghua.edu.cn/simple packagename</span>\npip <span class=\"token function\">install</span> nb-cli nonebot-adapter-cqhttp\n\nnb create\n<span class=\"token builtin class-name\">cd</span> abot\n<span class=\"token comment\"># ...</span>\nnb run\n\n<span class=\"token comment\"># 退出虚拟环境</span>\ndeactivate<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果创建虚拟环境时使用 <code>python3</code> 那么在虚拟环境中 <code>python</code> 和 <code>pip</code> 也都指向最新版本。在整个项目完成后可以生成当前环境中各种依赖版本：</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">></span> requirements.txt    <span class=\"token comment\"># 备份当前的依赖版本</span>\n\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt  <span class=\"token comment\"># 安装指定的依赖版本</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"第一个插件\"><a href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>第一个插件</h2>\n<p>根据《<a href=\"https://v2.nonebot.dev/guide/creating-a-plugin.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">创建插件 - NoneBot</a>》的指导并参考众多 NoneBot 插件做法，插件目录一般为 <code>src/plugins</code>，在其中创建一个文件夹或单个文件都可以被 NoneBot 加载为插件。</p>\n<p>我的第一个插件是用于获取 Epic Game Store 限时免费游戏的，因为某天打开群时看到有人说 <a href=\"https://github.com/DIYgod/RSSHub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@DIYgod/RSSHub</a> 的 Epic <a href=\"https://docs.rsshub.app/game.html#epic-games-store\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">免费游戏</a> 不能用了，我第一感觉就是他懒没有自己部署罢了…… 我自己去部署了一下果然还是好使的。看了看这个路由的 <a href=\"https://github.com/DIYgod/RSSHub/tree/master/lib/routes/epicgames\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源码</a>，感觉还挺好玩的。于是决定将他改成机器人插件。</p>\n<p>这种插件的形式是检测到符合要求的命令之后，向某个网站 API 发起 HTTP 请求，根据返回的信息（一般是 JSON）处理之后返回给用户。机器人的大多数功能都可以通过这种形式写出来，因为网上各种可供调用的 API 实在是太多了，什么搜图、翻译、段子、涩图、天气、查快递都有（好像混入了奇怪的东西）。@DIYgod/RSSHub <code>/epicgames/freegames</code> 路由的实现方法特别之处是向 Epic 的 GraphQL 服务器发起 <code>query</code> 查询请求，我见得少觉得很新颖。</p>\n<p>NoneBot 最大的特点就是「异步」，所以发起 HTTP 请求的方式不推荐用 <code>requests</code>，自带的 <code>httpx</code> 或者 <code>aiohttp</code> 都是很合适的异步网络请求工具，这里给出改写后的 <code>httpx</code> 实现。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># async 定义一个异步函数，NoneBot 中插件的函数大都以此定义</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_Epicgame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 发起请求的地址</span>\n  epic_url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.epicgames.com/store/backend/graphql-proxy\"</span>\n  <span class=\"token comment\"># HTTP 请求的 Headers</span>\n  headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Referer\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.epicgames.com/store/zh-CN/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json; charset=utf-8\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\"># 要发送的 JSON 数据包，query 部分不完整</span>\n  data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"query searchStoreQuery($allowCountries: String, ... \"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"variables\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"allowCountries\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"category\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"freegames\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"count\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"country\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zh-CN\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sortBy\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"effectiveDate\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sortDir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"asc\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"withPrice\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"withPromotions\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\"># 使用异步 API 创建 Client，HTTP Headers 可以在此传递</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 通过 json=data 的方式传递上面定义的 JSON 数据，发起 POST 请求</span>\n      res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>epic_url<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># res 为获取到的数据，通过 .json() 转为 JSON 数据</span>\n      resJson <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># 简单的挑选响应结果中有用的部分</span>\n      games <span class=\"token operator\">=</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Catalog'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'searchStore'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'elements'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">return</span> games\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样一个简单的能执行 HTTP 异步请求的函数就写好了，在调用异步函数的地方使用类似 <code>res = await asyncFunctionName()</code> 的语句。为了测试这一函数是否可用，我通常会将其单独拎出来，放在下面这样的文件中单独执行测试。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> httpx\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> httpx<span class=\"token punctuation\">.</span>AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.example.com/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># return 改为 print</span>\n\nasyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>像这种获取数据供插件使用的函数 NoneBot 推荐写在插件文件夹下 <code>data_source.py</code> 里。在其他需要的地方通过 <code>import</code> 导入。关于 <code>httpx</code> 的更多操作可以在《<a href=\"https://www.python-httpx.org/quickstart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">QuickStart - HTTPX</a>》中查找，现学现卖完全够用。</p>\n<p>回到此插件，获取到 HTTP 响应的数据之后还需要挑选其中有用的部分，我这里获取的 JSON 数据包含了拥有折扣的众多游戏信息，为了挑选出其中的限免游戏我写了另外一个函数 <code>get_Epicfree()</code> 放在 <code>data_source.py</code> 里。这里讲个插曲，写完获取数据的函数后我才发现 python 原来已经有写好的包可以直接用 <a href=\"https://github.com/SD4RK/epicstore_api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@SD4RK/epicstore_api</a>，而且这个包里给出了更多 <code>query</code> 查询语句，免费游戏的例子他也写出来了。好家伙，处理 JSON 数据的逻辑我直接照搬，省下了大把功夫。</p>\n<p>这样 <code>data_source.py</code> 的大部分功能就完成了，接下来新建 <code>__init__.py</code> 文件，这里将告诉机器人插件何时响应用户，如何响应用户。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> nonebot <span class=\"token keyword\">import</span> on_regex\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>typing <span class=\"token keyword\">import</span> T_State\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>adapters<span class=\"token punctuation\">.</span>cqhttp <span class=\"token keyword\">import</span> Bot<span class=\"token punctuation\">,</span> Event<span class=\"token punctuation\">,</span> Message\n\n<span class=\"token comment\"># 导入 .data_source 里需要用到的函数</span>\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>data_source <span class=\"token keyword\">import</span> get_Epicfree\n\n<span class=\"token comment\"># 注册了一个事件响应器 matcher，这里只要符合正则就响应</span>\nmatcher <span class=\"token operator\">=</span> on_regex<span class=\"token punctuation\">(</span><span class=\"token string\">\"((E|e)(P|p)(I|i)(C|c))?喜(加一|\\+1)\"</span><span class=\"token punctuation\">,</span> priority<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 事件响应器 matcher 的事件处理函数</span>\n<span class=\"token decorator annotation punctuation\">@matcher<span class=\"token punctuation\">.</span>handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> Event<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 异步调用 data_source 里的函数</span>\n  <span class=\"token comment\"># 我的 get_Epicfree 里调用了发起 HTTP 请求的 get_Epicgame 并处理出最终的消息文本</span>\n  imfree <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> get_Epicfree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 有的时候需要使用 Message() 将对象转换为可用的消息对象</span>\n  msg <span class=\"token operator\">=</span> Message<span class=\"token punctuation\">(</span>imfree<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 事件响应器的 finish() 结束事件响应，此外还有 send() 等可用</span>\n  <span class=\"token keyword\">await</span> matcher<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此，一个最基本的插件就做好了。重新启动 NoneBot 后启用此插件。关于这个插件的所有代码均可在仓库 <a href=\"https://github.com/monsterxcn/nonebot_plugin_epicfree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/nonebot_plugin_epicfree</a> 查看。你也可以通过 <code>nb</code> 或 <code>pip</code> 安装 <code>nonebot_plugin_epicfree</code> 体验。</p>\n<h2 id=\"pillow-画图插件\"><a href=\"#pillow-%E7%94%BB%E5%9B%BE%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pillow 画图插件</h2>\n<p>很多时候咱有发图片的需求，比如「无内鬼，搞点…」什么的，其中图片除了像第一个插件一样通过请求 API 返回图片的 URL，有的时候可能还需要添加一些细节。比如 <a href=\"https://github.com/Xtao-Labs/PagerMaid_Plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Xtao-Labs/PagerMaid_Plugins</a> Telegram 人形自走机器人插件仓库中的吃 / 丢用户头像功能，需要获取用户的头像然后自行拼接到背景图片上；又比如我想做一个原神每日素材的功能，事先准备好了各种素材对应角色或武器的图片，希望机器人来处理拼接这些图片成为当日素材。</p>\n<p>这里就以原神每日素材的功能需求为例，交代我的实现方法。@Xtao-Labs/PagerMaid_Plugins 中的功能可以作为进阶操作，我自己也照着原仓库代码改写出来了，但是代码理解的不够深，就不拿出来献丑了，说不定什么时候没人我就悄咪咪传到 Gist 存个档留念。</p>\n<p>各种素材图片来源于 <a href=\"https://genshin.pub/daily\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">今日素材表 - 可莉特调</a>，我通过 Chrome 开发者工具中 <code>Ctrl</code> <code>Shift</code> <code>P</code> 调用 <code>[Screenshot] Capture node screenshot</code> 手动获取，算是个笨办法了。将每种素材对应截取一张图片，3 个区域 18 种素材 18 张图片，分别命名成 <code>{区域名}.{星期数}.png</code> 的格式。我还另外截取了「今日素材可升天赋角色」「今日素材可突破武器」两张头图，命名为 <code>header.png</code>。</p>\n<p>接下来编写 <code>getMaterial(type)</code> 函数用来获取包含了 <code>type</code> 对应头图和蒙德、璃月、稻妻三个区域 <code>type</code> 对应素材图片的 <code>Image</code> 类型列表，函数内调用 <code>datetime</code> 库获取当日星期数。<code>Image</code> 类型是 Python 绘图库 <code>Pillow</code> 内定义的，它包含了图片的色彩模式、像素大小等信息，使用 <code>image.open(filename)</code> 或者 <code>Image.new()</code> 均可得到一个 Image 类型的对象。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getMaterial</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  day <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>    <span class=\"token comment\"># 星期一对应 1，星期日对应 7</span>\n  imgList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                            <span class=\"token comment\"># 存放 Image 类型数据的列表，默认为空</span>\n  filename <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>day<span class=\"token punctuation\">}</span></span><span class=\"token string\">.png'</span></span>          <span class=\"token comment\"># 供后续调用，是将要生成的图片名</span>\n  width<span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                  <span class=\"token comment\"># 供后续调用，是将要生成的图片大小，默认为 0</span>\n  <span class=\"token keyword\">if</span> day <span class=\"token operator\">!=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n    daily <span class=\"token operator\">=</span> day <span class=\"token keyword\">if</span> day <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token keyword\">else</span> day <span class=\"token operator\">-</span> <span class=\"token number\">3</span>   <span class=\"token comment\"># 周四周五周六素材分别于周一周二周三相同</span>\n    countries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Mondstadt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Liyue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Inazuma\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 通过 append() 将 Image.open() 获取的 Image 类型数据加入列表</span>\n    imgList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>resPath <span class=\"token operator\">+</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/header.png\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 头图</span>\n    <span class=\"token keyword\">for</span> country <span class=\"token keyword\">in</span> countries<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 遍历三个区域，取出所需 type 的素材分图</span>\n      image <span class=\"token operator\">=</span> resPath <span class=\"token operator\">+</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>country<span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>daily<span class=\"token punctuation\">}</span></span><span class=\"token string\">.png\"</span></span>\n      imgList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 遍历生成的 Image 类型数据列表，获取即将生成的图片总高度、总宽度</span>\n    <span class=\"token keyword\">for</span> img <span class=\"token keyword\">in</span> imgList<span class=\"token punctuation\">:</span>\n      w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>size\n      height <span class=\"token operator\">+=</span> h              <span class=\"token comment\"># 高度累加，后续我将图片列表的 Image 从上到下拼接</span>\n      width <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 宽度为最大的宽度，实际我的图片宽度都一样</span>\n  <span class=\"token keyword\">return</span> imgList<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> filename<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好，这个函数将返回包含待处理图片的 Image 类型列表、预计生成图片的宽度和高度、待生成的图片名。如果时间为周日则返回一个空的列表，后续可以判断列表是否为空决定最终返回的消息。因为周日所有素材均可获取。接下来编写画图的函数，这部分可能需要结合《<a href=\"https://pillow.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pillow - Pliiow (PIL Fork) Documentation</a>》相关函数的说明理解。不过此例还算简单了，基本只用到了一个粘贴的函数 <code>Image.paste()</code>，如果要实现前面所说的吃头像功能还要到文档里学习更多。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">msgTranslate</span><span class=\"token punctuation\">(</span>imgList<span class=\"token punctuation\">,</span> totalWidth<span class=\"token punctuation\">,</span> totalHeight<span class=\"token punctuation\">,</span> saveAs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> imgList <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"哈！今天是周日，所有天赋秘境和武器秘境全部开放哦🥰\"</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 新建一个 Image 对象，颜色制式与 imgList[0] 一样，背景颜色为纯色 #F6F2EE</span>\n    result <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>imgList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>totalWidth<span class=\"token punctuation\">,</span> totalHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#F6F2EE\"</span><span class=\"token punctuation\">)</span>\n    drawFromHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span>        <span class=\"token comment\"># 初始绘制时的动作点高度</span>\n    <span class=\"token keyword\">for</span> img <span class=\"token keyword\">in</span> imgList<span class=\"token punctuation\">:</span>\n      w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>size         <span class=\"token comment\"># 获取当前图片的宽度、高度</span>\n      <span class=\"token comment\"># 向 result 这个 Image 中粘贴 img，box 的参数是粘贴图片的左上角坐标</span>\n      result<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> box<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>totalWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> w <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> drawFromHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      drawFromHeight <span class=\"token operator\">+=</span> h     <span class=\"token comment\"># 一张图片粘贴完后累加高度</span>\n    result<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>saveAs<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 将 Image 对象 result 保存为文件 saveAs，注意要带上完整路径</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"[CQ:image,file=file://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>saveAs<span class=\"token punctuation\">}</span></span><span class=\"token string\">]\"</span></span>\n    <span class=\"token keyword\">return</span> msg<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此，图片就绘制好了，<code>result</code> 是一个 Image 类型数据，并不能直接通过 NoneBot 发送。使用 <code>result.save(\"/path/to/.png\")</code> 可以将其生成为一张图片，这样使用 CQ 码 <code>[CQ:image,file=file:///path/to/.png]</code> 就可以发送出去了。</p>\n<p>最后是事件响应器，我在 <code>__init__.py</code> 中使用了如下逻辑：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">materialMatch <span class=\"token operator\">=</span> on_command<span class=\"token punctuation\">(</span><span class=\"token string\">'今天打什么'</span><span class=\"token punctuation\">,</span> priority<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@materialMatch<span class=\"token punctuation\">.</span>handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">send_mt</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> GroupMessageEvent<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 获取消息。比如发送了「今天打什么天赋」后 bot 会获取到 searchFor='天赋'</span>\n  searchFor <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>get_message<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> searchFor <span class=\"token operator\">==</span> <span class=\"token string\">'天赋'</span> <span class=\"token keyword\">or</span> searchFor <span class=\"token operator\">==</span> <span class=\"token string\">'武器'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">'talent'</span> <span class=\"token keyword\">if</span> searchFor <span class=\"token operator\">==</span> <span class=\"token string\">'天赋'</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'weapon'</span>\n    <span class=\"token comment\"># 调用刚才编写的两个函数</span>\n    material <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> getMaterial<span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> msgTranslate<span class=\"token punctuation\">(</span>material<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 发送消息，也可以先将图片转为 Base64 编码再发送</span>\n    <span class=\"token keyword\">await</span> materialMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 没有检测到要打什么</span>\n    <span class=\"token keyword\">await</span> materialMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span><span class=\"token string\">\"打什么？[CQ:face,id=32]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> at_sender<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当然以上这些只是大概讲了下我做这个功能的思路，还有一些细节可以优化优化，比如：这里只简单判断了星期数，没有判断时间是否过了凌晨 4 点；图像是每次使用时都重新生成，也没有做缓存。完整的代码我可能什么时候觉得整理得差不多了再放到 GitHub。</p>\n<h2 id=\"heu-定时打卡插件\"><a href=\"#heu-%E5%AE%9A%E6%97%B6%E6%89%93%E5%8D%A1%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HEU 定时打卡插件</h2>\n<p>写了两个插件之后我觉得自己还蛮厉害的，于是开始想办法将之前做的学校疫情打卡实现到机器人上。最近疫情有所反弹，学校又开始了返校前的打卡活动。另外大家都要注意防疫哦。</p>\n<p>打卡的插件原本是需要自己获取 <code>formData</code> <code>boundFields</code> 等参数的，还要处理 HEU CAS 认证的相关 Cookies 等，如何使用 <code>httpx</code> 实现这些功能我还不太理解，于是妥协以模拟浏览器操作的方式实现。这里使用了 <a href=\"https://github.com/microsoft/playwright-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@microsoft/playwright-python</a>，它是个不错的自动化测试工具。通过 <code>pip</code> 安装好 <code>playwright</code> 后，还需要执行一次 <code>playwright install</code> 让 <code>playwright</code> 安装可用的浏览器组件及 <code>ffmpeg</code>。我本来以为国内服务器上安装 <code>chromium</code> 可能会卡住，不过实际用阿里云北京的服务器试了一下并没出现网络问题。</p>\n<p>与前述步骤一样，最好的参考文档仍然是《<a href=\"https://playwright.dev/python/docs/intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting Started - Playwright Python</a>》。实现打卡部分的代码我已经放在了 Gist <a href=\"https://gist.github.com/monsterxcn/f0a7a083ee65d52b1400596ace43687b#file-nonebot_plugin_checkin-py-L53-L98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/nonebot_plugin_checkin.py</a> L53-98。感觉结合文档比较容易理解，看函数名也容易理解是什么作用，总之 Playwright 是很好上手的。</p>\n<p>接下来是定时任务的实现，这需要安装 NoneBot APScheduler 定时任务插件 <a href=\"https://github.com/nonebot/plugin-apscheduler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nonebot/plugin-apscheduler</a>，参考仓库里的「使用方法」即可。在 <code>__init__.py</code> 中定义定时任务，比如实现定时打卡的功能可以这么写：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">scheduler <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"nonebot_plugin_apscheduler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scheduler\n<span class=\"token decorator annotation punctuation\">@scheduler<span class=\"token punctuation\">.</span>scheduled_job</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cron\"</span><span class=\"token punctuation\">,</span> hour<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> minute<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">auto_checkin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 获取 bot 信息</span>\n  <span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonebot<span class=\"token punctuation\">.</span>get_bots<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> customer <span class=\"token keyword\">in</span> customers<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 拼接 CQ 码 at 某人</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"[CQ:at,qq=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>customer<span class=\"token punctuation\">}</span></span><span class=\"token string\">] \"</span></span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 传入了最后一个参数 mode=auto，打卡任务将不输出执行过程提示</span>\n      msg <span class=\"token operator\">+=</span> <span class=\"token keyword\">await</span> checkin<span class=\"token punctuation\">(</span>customers<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> customers<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> bot<span class=\"token punctuation\">.</span>send_group_msg<span class=\"token punctuation\">(</span>group_id<span class=\"token operator\">=</span>GROUPNUMBER<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span>Message<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># 如果定时任务执行出错了将向管理员用户私信报错信息</span>\n      <span class=\"token keyword\">await</span> bot<span class=\"token punctuation\">.</span>send_private_msg<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>ADMIN<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>customer<span class=\"token punctuation\">}</span></span><span class=\"token string\">(学号</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>customers<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) 今日打卡定时任务执行出错了！\"</span></span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里值得注意的是在定时任务事件处理函数中如何调用机器人主动发送消息，这种方法在其他场合应该也是通用的。首先通过 L5 获取 <code>bot</code> 对象，然后通过 <code>_ApiCall</code> 方式调用 go-cqhttp API，比如 L12 L16 分别调用了发送群消息、发送私聊消息的接口。</p>\n<p>通过此插件主要学习了 Playwright Python 的使用和定时任务的添加。完整插件的代码可以通过前面的 Gist 链接查看。如果有时间我觉得还可以添加上 JSON 操作：将学号密码写入 JSON，执行时读入，判断不存在后令用户输入并写入 JSON。</p>\n<h2 id=\"连续对话的抽签插件\"><a href=\"#%E8%BF%9E%E7%BB%AD%E5%AF%B9%E8%AF%9D%E7%9A%84%E6%8A%BD%E7%AD%BE%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>连续对话的抽签插件</h2>\n<p>做原神每日素材插件的时候，我就想整一个像可莉特调那样的原神黄历、抽签功能。撸完了定时打卡的插件之后我又看了看 Playwright 文档，发现它不仅能用来模拟浏览器操作执行打卡，还带有 <code>screenshot()</code> 函数可以实现网页截图，<code>inner_text()</code> <code>inner_html()</code> 函数可以用来做爬虫。我一拍脑袋，想法有了：通过 Playwright 写一个爬虫爬取诸葛神算测字三百八十四爻（也就是可莉特调使用的运势签），再通过 <code>screenshot()</code> 截取指定选择器的网页截图（使用 Pillow 绘制的话感觉会很麻烦）。写这部分代码参考了群友的机器人 <a href=\"https://github.com/FYWinds/takker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@FYWinds/takker</a> 和 Playwright 文档。</p>\n<p>爬虫的编写不在此讲解，思路其实很简单，代码见 Gist <a href=\"https://gist.github.com/monsterxcn/47681a6db630887d69946cc7f0faa0e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/chims-crawler.py</a>。爬到的三百八十四签我也都顺便放在了这个 Gist 里，可以直接拿来用。至于为什么不用网上大把的抽签接口，我是觉得既然决定要折腾，那不如就折腾到底。</p>\n<p>Playwright 网页截图也很好实现，与上面插件类似，在打开网页后使用下面这样的语句即可：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> async_playwright<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> p<span class=\"token punctuation\">:</span>\n  browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p<span class=\"token punctuation\">.</span>chromium<span class=\"token punctuation\">.</span>launch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>new_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 这里打开的本地 html 文件是接下来我要做的抽签模板文件</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>goto<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"file://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">card/tmp.html\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 设置网页窗口大小</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>set_viewport_size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1080</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 等待指定选择器加载</span>\n  chim <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span><span class=\"token string\">\".container\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">assert</span> chim <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n  <span class=\"token comment\"># 截图到路径 {resPath}card/ 文件夹下 tmp.png</span>\n  <span class=\"token keyword\">await</span> chim<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">card/tmp.png\"</span></span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>那么如何实现抽签功能呢？我的思路是使用随机数 <code>random.randint(1, 384)</code> 生成签号，然后读取 JSON 文件取出对应签号的签的信息。接下来打开事先编写好的卡片 HTML 模板，使用 <code>replace(\"模板中的占位符\", \"签的信息\")</code> 替换并保存一个临时文件。执行 Playwright 指定选择器的网页截图。</p>\n<p>卡片 HTML 模板我已经放在了 <a href=\"https://gist.github.com/monsterxcn/d933cafcdc6662c6bdcbd561fe921e8c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gist</a>，样式参考可莉特调做了一些调整，字体使用原神游戏客户端的文件即可，路径如下：</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">Genshin Impact\\Genshin Impact Game\\YuanShen_Data\\StreamingAssets\\MiHoYoSDKRes\\HttpServerResources\\font<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>读取 <code>.json</code> 使用了自带的 <code>json</code> 库，我将卡片模板分别命名为抽签 <code>poem.html</code> 和解签 <code>intp.html</code>。生成图片时调用的是同一个函数，通过参数决定使用哪一个模板。由于无论是之前生成的随机数还是 json 文件中的签号均是阿拉伯数字，写入模板时，还需要一个将阿拉伯数字转换为中文繁体数字的函数，这个算是小细节。代码不难，我就不放在这里占用篇幅了。</p>\n<p>这个插件最后一个点是如何连续对话：发送抽签命令后机器人发出了一张图片，接下来应该询问是否需要解签，根据用户回答决定整个流程是否结束。这里用到的是《<a href=\"https://v2.nonebot.dev/2.0.0a7/api/matcher.html#classmethod-got-key-prompt-none-args-parser-none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nonebot.matcher 模块 - NoneBot</a>》的 <code>got()</code> 函数，文档里介绍得不多，我学得也比较蒙，但是最后写出来还是能用的：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># __init__.py</span>\n\nchimMatch <span class=\"token operator\">=</span> on_command<span class=\"token punctuation\">(</span><span class=\"token string\">'抽签'</span><span class=\"token punctuation\">,</span> priority<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@chimMatch<span class=\"token punctuation\">.</span>handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">chim</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> GroupMessageEvent<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># getChim 函数用来生成随机数并读取 JSON 输出签号、吉凶、签诗、解签</span>\n    <span class=\"token comment\"># 将其赋值进 state[] 可以在下面 got() 中继续调用，chimNum 这些都是自己定义的</span>\n    state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimNum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimLuck\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimPoem\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimIntp\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> getChim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># genrChimImg 函数用来读取模板并替换占位符为签的内容，最后一个参数用来决定使用哪个 HTML 模板</span>\n    chimImg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> genrChimImg<span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimNum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimLuck\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimPoem\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poem\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span>chimImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> at_sender<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span><span class=\"token string\">\"抽签发生了错误🤕\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># got() 指示当 action 不存在时发送 prompt 消息并接收用户新的一条消息</span>\n<span class=\"token decorator annotation punctuation\">@chimMatch<span class=\"token punctuation\">.</span>got</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">,</span> prompt<span class=\"token operator\">=</span><span class=\"token string\">'你需要解签吗？'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> GroupMessageEvent<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token string\">\"不\"</span> <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 用户说了包含「不」得句子就判定为不需要解签，结束流程</span>\n    <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span><span class=\"token string\">\"好吧\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 从 state[] 读取签的信息，这样不用重新读 JSON，传入最后一个参数用来决定使用解签的 HTML 模板</span>\n      intpImg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> genrChimImg<span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimNum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimLuck\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimIntp\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"intp\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span>intpImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># await chimMatch.finish(\"解签发生了错误🤕\")</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好啦，这个能连续对话、实现抽签解签功能的插件就做好了！主要学习了 NoneBot <code>matcher.got()</code> 和 Playwright <code>page.screenshot()</code>，前者让机器人能从后续对话中获取变量决定程序走向，后者能在 Pillow 绘图较复杂不易实现时提供替代方案。</p>\n<hr>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1702' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0592dc1342fd4de13a6f33a46732e1c0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0592dc1342fd4de13a6f33a46732e1c0)' width='2560' height='1702' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAArCAIAAABHOBkQAAAACXBIWXMAAA7DAAAOwwHHb6hkAAANZ0lEQVRo3tVZ628c133lH1I0CNAPjfslCNzAbZCiaZwHGqBogCRuUBSFm6B1UzcfCiNACzQIaiRO0qZOqthKJUNOKlm2VKdqbdmWIlIUxeWSy93lY5e7XC65r9nhPmZn5z33Mc%2bcO8OlVhRJNC2qqBcXw%2bVweef3POfcOzPxLzI45/SBoarqeDx2HIeygDCfMiZmMoIgiP%2bPx8z/3gHbti3LgtWx3YmsVkQcn9jwAeP/hwOwlTNq0mCrfnu9fvNO295RTNMwRiM1iqJH1AE2KRIMh9DYJ2/J/Fdvxx/KxO%2bfjz9XiGzbMXQjCMNfrgN4fPSgA4QSlI3ruiQZ%2bOFRIpv09Q5/o80vtr3MgAVcdMIvuYSCZE47wV3dV7YdSx8MFFjuTQbjuPjIQzrDSaE9DAeowI2jE2DCqB8P5kJt3bPcANF2qQi0Y/BhE/FWlFGv1zNNs9/vDwZDS1e41XMpd1wXFeUSmiTqoTjgEM9xk0num7brnd2o/m1Bem6NXpO8MWKujDmHe6I49GSgkOCDbpiOrXlkhGaG3Zyzwy55GA64JCAUZgUu8dIJ6xFs0/X%2bpBh/dDF44i7/%2b4oXc98RpX4IPAz9wNIfnAUec1nMpffc7lt9xXRNjTgOfAt/wSaGw/y4gUih2bjncy9EtaY304fPUBeI5451i/oRC2OX%2bYc%2b2C5XLG9owW7xK%2b7Tg9IQvZt6gmqJOX254X8%2bH3256H4x5/5xPvhmLdA0faSM4EB0ygiDKPTDZKQ30EmHK08PxAKQAVOJIRHHpA7qlMIR/GmGySXDtLbWKtVCpVbcltt9LwhRKtwLPC8IfDHxGY3huvgH1MW9OsHDHJdEjJxreH9UCL%2b8ET29Lub36r7HKJ2C2umBftI0DRhAuU94DM6zCSP0tCFW4gEdN1jrtWqvVxmgaO1BfwADZhghI0l54uNfeOyZv/y1P/2zp774bBwcwz6%2bH6JPKHE8q%2bdYpizvI63IuOf7CFvAiE/dkFFMtH/EKTvVoMT6gI6qvHfTs7TANmCGm/Z%2bkuHj/gUrM9kOPpENP3w3XBsxaugI34wXxdKe/Hu//dlP//lXP/X0Vz73hWeikxwgAbVUTy5TW%2beuqatKt9OWpc6gv8%2bpE3r3bL7/%2bSTN1VF7mO8b7X5/7flN%2b6Udd2xY/f3eREcxMhnTq%2bAPlkt%2bKgm2UR00HsfNGe5Hsjz8ww/91ic%2b%2bMRv/u5nPvOlZ4X5D0iAJAMcCzJKDMOs1lrdrqz0u6NBt7q5Vq1Wa/UqYnhcuEXhpT13XyEREnr%2bhh4/fjf65HIIgxABUCRX96jRHwyHuqYhudMJIclasQfip5wd3J3xg7jR3P/Yr//Gy0/%2byj9%2b8v2//%2bxf%2bMfhQ%2boAsozPMPfvvvZcYe7GjX//z7M/uvLO5auvvfijNy9c9kP/wRZkrkFcG4IVgi%2bFr6kh6m3foiObeqlBSMCwyY2Rblr9wWismb4vgBhfPVwZ/Yt5%2bJgZj0fdofrY4x/%2b7GPv%2b/RHPvDU9/4hPjUDqHhVGayvzHdq5Woxv7KY3Sqs52bvbmZW/OCIAyLnXN6g%2bkDVNCfpGXSwnQwwnpCxphlwGvreVKkwzw90tbvfzEn1ZW1QZk6Pn4BOwgG0JkCm0e5s1XY39xr7Yy2x/yQHCFCp05b%2b%2bcVzc7fuNKuVarWxeP3t%2bVu3csVV4joPQg41VI%2bzVqvVaDSGw2G3293e3t7c3Gw2m7hZqVRMy8L60/3tBbEq5VrF843VC3v5c1L5mh9EJzog0J15Y3UkjOMeZBrUwf7%2b/kBQryLLMiSDLwA1Sh3wg7DX2vnpD19448wrl8%2bcP/cvb968cHlUr8QBP/4Z3EcHYDXE/ggNpKERfBCG0w6gagbN5crPXmxdP7Mze6ZTfisIIwFcJzkAREBZF4vF9fX1nXo9TTFKFlstNF9au8iA63pJCfGhMrpxOyt3Zeg2j5jN7cri4koml6HHPIMwZ0wcC7yGNVM4mh7HIiwyoEirO3fP7l39p%2bbiOUW6DaV4YgYAr7ZDCsVCfjWP0W63keLd3V3kGi4h/Eg0Pqc8AOkMid/arV88%2b7KpqdQcu5ZmDPdl4KncpqKE7u8Bgh7YpMZwpI5T3vB9Qb34kLJvKgo8z7svA2Hc31msLp1rz720O/uD/fo7%2bKfTSohQ3mw0arXa4mKmVC7Pzs7iM3IyPz%2b/tLSUzWYlqQNRcwCjnBua1t3b9ahNbIM6JnMthj0k1A8LHBYSxt17PEaIqaEHUIoICqKD0seHer2OR0AOpoWE6yHIJponsJR6f%2b%2b94c7N/vZ1vb%2bGEj7NAZewzXJ5dXV1EaWwsgwARp1MlCaGCZF8wMSHSm4KFvAzZG7sefEwEyoLzHJ8yBXBrG6KKogxHNjb20MfIxy5XA6fUa5ra2vILWTFdBNTIWkZagZYBLtxBZIydiKzJw5QvyiZJdnalJ2tAd3o86JM27ovGUFbD5pa0DECMP%2bhmCMT41JygXy42ePP18Lvl9rf3mh8Y5O83qKIgjJUYLqIKOdABZQiMrCczSJS%2bLVQKMCHubk59Pe0A566x/RebzDQdQ0VJ3ZL7DRdAgc4jMv04%2brIKw/I0p7VGrN9wzsCFymMJtDOUmZNXRFq1CNfrwaP342fzMUfzcafysV/sxWSRLQdlATnMF2SJNgN3NzY2EAh7SQDXVfZqsBV9AZJeB5E5lljdTze2toqlUr4zmg0Qs9MEj4lLpI7M2h6h/Pnlq49/x/f%2buGlcxf%2bq5OC2/FiTsgUw3Hs4VCB7an6FXRFaMdkkkEkk7QMqjt0ShmJkkPxoCDx5fQQCfWJyoFlaIMjPSA2TNwD9PUHfUAIoNxxnInM5uLoibKUidMgzqAExpZ6MfPXL333/HeeWVxdUk4kMog5W/XBrI6h6cYQO7Sx7icZFpsvdm/yqUClGUibGN2LkKP40Qmzt269%2b%2b67aANxdjDFAwfkAUE/GYmOcFM5TZsXrbHsmTonrq4bKYyGhqFfXXnhSvbKv1769npjKz5JCwGvHMd3zcF%2bd20lo0i1Unb27uz8eDRCzKBs3WQ37JKjavhQ%2bnhiM4UrBzJYFjZSwoKjGZhsmB6gC%2bY6RuxICz3nqby/M3bVfk/IacROtYw3yudXyufPXPrY23deiU4Wc1gKWrtdr928dH5j9vrda5ffuXhdG5ncYyfBnAgnYy3Nr438xtjfVvyq4jW0cHccdoxoV/XLfW7SEFA7sdNLekzMZM1DNSqyEPvBwtD7fD7YM1jscwRrBjkf2PZs84V%2b/%2bu388%2butX5yyPAP9oDYVQSe3BrcuJT52dWVpVul4lzJNZ1TgEKQN2cNlWdbtCizfJfmJLrSJqsdkpdopkXhA552L13WkDm6oqBILRACE6ckfErqEQhYKGohp8lEzImkhqMwMuLIjiMSn5oBONBt929cWdrI1Iit6Hrfsa3THEgyYLNIscORE47dUHVDjUQ6jcYkHNjgvuCeA4zwfpUq7Z5U6O4uDNrL6v6qbSqMedO7AneqxwQPwEtZ6g8VCBbLMGz0PoACkg7iEUCB/sP3J0wMMRdIrd1b1y501ubmrty8%2bNLVYX8A2jmphNImbjUbK9lMIZ/rtJuqMsS1A05YyhQLq7ncCnAmZYwDLWFrjcJPWqvnm4tna0tntMEO98Iju7OjUqJU2sQsl0ugG3wVKAb8ShsIq4udRzDZD/j%2boCMvvPne9Vev52dLo24P3zh1%2byscAKjn84VCsbizU19f31hb36hWytnl7PydhfLW1hSRCeImrrW9dEEq/pu89Gote05X9vgpUiIVc1A%2bALiUYvAwaJVUvoPz4VK5VAKrJ7qVgh3bTfn2zXy7LjVK5dpOVdfVBJJPO1jAUsgqsB9XLI7oxEw1dLXd7oDdwFOTIhRbX%2bIau6uXpPLr8tpr0tZrhtpg/FQHLNstFgrQbdCh5XL5zp35TCaTW1kBC25ubuD%2bwsICtlD4pivUqN/akUu5Shy5FpCsK0E0HX/sLkS4f8jlR67hFEgcUn4iS7nraNU7rzTzF6Tl8/WVl7Vh/UgJHePAVqVii1LhjiO2fLppGqYFk6HjLNuxHJdxf6KFxLmBeBA0ILonOV1yjq0ict/R4qHpR3Yz03CX0hYAU5Xzajc76q4o0pJjQlP57Oh%2b%2bmAkYo75BZlWFV4esMqQr/fY1tDrmhBzftvwW7rfNQPmhUI1HXPkxGA9FAG0g0ehltxERBAhCDh/SKfTqLCOxjsaa45Ze8xqQ6o6HoKDjVw4mWJLQX16woEVNubC2u4NLr%2btqCYxdUeoHT38n7/giO6fp74fOPbvSOz0nLzgYEcOqtKz0e/s%2bL%2bTif9gmX48Q57MRl%2brhLpmiLPRh/aKKfrvuSzQGpwiVM3BQZU4G%2bXk1Zb39Frw1VL0lc3orzaDM7t%2beoKcnuo8Su/ImMMNybGNXn8Arjh4PcNY6NE4YHGIwvPE1SMsEWSP1FtKkRXuaJ68ha0wVD3CnxI2UAt5GCjG/n5P6kggcjbZ7jxyr1nTIz5csRsE8WFDiI1/bnW1sLpcmvuxlJxeyeIIIxXx5FF8T0wS6IRGQqRxHSdjOOh7w%2bqhgoUDD%2b0l388BQN9enxRk3rgAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"2560\" alt=\"NoneBot 插件效果\" data-srcset=\"/assets/static/nonebot-plugins.82a2fbd.84ef61192020cfd403b677d18b100f82.png 480w, /assets/static/nonebot-plugins.cbab2cf.84ef61192020cfd403b677d18b100f82.png 1024w, /assets/static/nonebot-plugins.2665e34.84ef61192020cfd403b677d18b100f82.png 1920w, /assets/static/nonebot-plugins.42db587.84ef61192020cfd403b677d18b100f82.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/nonebot-plugins.42db587.84ef61192020cfd403b677d18b100f82.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-plugins.42db587.84ef61192020cfd403b677d18b100f82.png\" width=\"2560\" alt=\"NoneBot 插件效果\"></noscript><figcaption>NoneBot 插件效果</figcaption></figure></p>\n<p>本来以为这点经验写不了多少的，结果码点代码、加点注释就撑起了大半篇幅，希望读者有所收获！Python 新手难免出错，如果你发现了欢迎指正！( •̀ ω •́ )y</p>\n"}},{"node":{"title":"为 Gridsome 添加 Artalk 自托管评论系统","path":"/code/use-self-hosted-comment-system-in-gridsome/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/gridsome-artalk.a209973.7111a5ea162c336715a3a8768910baf5.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/gridsome-artalk.a67b0b2.7111a5ea162c336715a3a8768910baf5.png 480w","/assets/static/gridsome-artalk.a209973.7111a5ea162c336715a3a8768910baf5.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1bb0cf23d13033bfc2c81c6932a8a519'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1bb0cf23d13033bfc2c81c6932a8a519)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAGPElEQVRIx%2b1WaVBTVxS%2bCQRUpK64VDu1dawbrRtCq9iKiiKoYBFQBLHsSwJ5hKySsMoukAgoqyBkeS8bBAgBKpuQhCWBEAgJCIr6wy5/%2b6P/%2bgK4O4P%2bceqMM2fuvLx7ct/5zjn3fB8AvPhP2z4D%2bF8CwKArFwJc4puGbvFJ73B%2bD8N8PABcCMuFbBAaaqvFiZukKWtEicsRmi1CtxKQQV3c685E85s5bK8bNGcvz5xz%2bygAMDwSpBaLjYNNk8PKR6aRpzOdMwaBQQ0b1JVj93c1ZoG6WCxahzq0JtBaCWt7U%2bYGaTJ2Pkrzaj4Ex09YhtAAjzQf/SpR4k/tnC%2bE9Dkk0Fspe49AudDiAMxh1cZ%2b35TdNjnaqhvWTT4Ym5rRmqba9TreYF%2bNuqdtbIQ11DiXS2hFPSt4EIFnhxue6sWPdfgB8QohA/DjsXACqMEfuVecoJGtQOjgbhy4S9ivyOfPanc0ZQEeEdvAeBlTrfkogJDn0wHuxpofXoQ0367zW2IqeKt73wmAcFCe3zk5pjFODkyYGrSDvIG%2bu/091eruClWnSKtO1TSjACzFtL05sfXaPtpYy6FWduSItPKZ7ocONiiLWsaOsO3I2JIRfig52rY1bWkj01rCcFQU1j/R71TkguIwC5/DFuYiQDgxfXVLGtqcICfIsuGalYi2Wp62XMbECim4SDdwMwxEuWGqY1c1peAQCiB4gLJogGZnUQA/KgpGZx8OG6ea9VquRsnXqgRaFbryNSrF%2bEiaRg5qYja3Z5%2bIvuJbmbG0Hs06ZJkdtDHC064S%2bjYleOuhfRelNx2gK%2b7V1%2b0Ko3bj/SLhYs60snF21FVd5cgM379nj30%2bcYM83bmYFnT7%2bikmHrv3mz3s%2bKuSYmda2C/ZUJRW4hp88UBl4ooLP0cq4StVORE9vC/POAN2MEZIebPf3gZwpI0z%2bfSJyjCRJ29MESNVrW235S15soY7Le2KvoGaCSVa920d%2bd5QxIGCeFBPX1IYdsT3LPNW/l4vV88c6jE/r2NIdrgaLtXc2%2bdyOLW65GhNWvGMsvvP6YDe2l9jQkIrcrcEnEaLduzc6a1EP99C1j6P48n3kCp1%2b4nU2NNnPLzL0l0IQekKwVFCED0v4ygtXP7XlHdoEOCEYEXvAcC5lT3%2b%2bFH32Fh0aWngjYLUai7rTi2xtJxUUFoukImmhix5pHWtGS7RgXjh7Y1DRYDq%2bdVxx1SkMoCT7F%2be6UQOtuq6fq6zgv9QE8xJ8ySEgGhX545ixd/TTrfpmxx2n40PX3dgR3av7GRkIIDjt/GYXnHhwn9nA1gkO6L3mfBAO4b/5qvuZb3yg16n9jk54O/VVf2h88ugWlfg0RbCLH4HWvKV08ZOvT6/sYHOr0sSClioIfxMoQhu6yrRd6G3CteYuP6yaxQB75KMd8olHg29mMmrPFFIDZXc2u95EqRf8lHWVuvvowCg60k7/d1vPLg/8M8zxxh/H04SZ0ZFz067lEH1pxDcW4qoSvGR8x4JSOm5kMtr486f%2bc1/c9LVraFeRR31bnEhRTLY3teN0i/1uJkIKmKA4D3uAAqgzajr1I/2GMYbdEMCjQrRqJpHtejPAZMpa1hhHgtwgkVJxK48fPSd/AptR5aqaQvjCkjxu6CqO1mRApJ9HH/nRPQjtqmBbmxGgb4jc6KDMSLfU5vEGGmufToS3StYXxF/uaWs3KRkT/dtLyE5FFEutVcuo1zwrsv9TpRiz0sK6%2bV9XU2jGRTp3RJ6n2h3FQNU4zEC0uJj1N48RnVynVY9YRwwmtDLoDZMDBlNXWP6PqMhcVBm5gF0wMMJllL62ubUTbLUlZJEXP01IKLg%2bOQlUgYQkS34JCuYgpXQbBuT1khY1gIyTkDGIOQlCHWdmIVuAQHJSkhdLWYuhamov7WUYYVQsVL6cinTEibjhBRrhGr%2bBD9hvSzFRkQHSMLiY/QFkcUoYdjQLzUOdc6Mq2YnlbOmtgejYuPQrdGu7bIMdIxi%2baTn/DqvMl6hJ7MGeU5P3PgFhwVufqFQnlOeeQta%2bDv3ub3k8rmHOdr5IC0EYbjEZTDVBqatFF1bL02ykzBRHWGDUFF%2bfVNKfLjIwXxEMfeqnlvIDeaddfwspz8D%2bGTtP6u6N7Wa%2bMTxAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"date":"August 21. 2020","timeToRead":13,"cjkWordCount":2912,"cjkReadTime":9,"description":"考虑到小站的访客还不是人均科学上网的水平，我折腾了一天从 Disqus 换到了友链写的自托管评论系统 Artalk，数据迁移啥就以后再说吧，咕咕咕..","content":"<p>本文介绍在 Gridsome 博客中启用 Artalk 自托管评论系统的方法。欢迎尝试这款小众的、漂亮的评论系统！</p>\n<p>刚开这个小站时打算一劳永逸吃上 Disqus 这块香饽饽，结果没两天我的宝贝室友就跟我说：你站怎么没法评论啊？我深思熟虑之后决定还是不用 Disqus 了。换 Gitalk？不行不行，Gitalk 虽好但是每一个新站点都需要 GitHub 账号授权一次，而且国内访问也体验不佳。Valine 之流我不太喜欢，其他的评论系统我都不甚了解。那该何去何从呢？</p>\n<h2 id=\"选择-artalk-的理由\"><a href=\"#%E9%80%89%E6%8B%A9-artalk-%E7%9A%84%E7%90%86%E7%94%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>选择 Artalk 的理由</h2>\n<p>由于水平不足，我是没法自己写一个评论系统的，于是我决定在友链 <a href=\"https://qwqaq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@QWQAQ</a> 和 <a href=\"https://www.ouorz.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@TonyHe</a> 两位大佬的两个评论系统里选一个，要知道缝合代码、借用轮子这种事我最擅长了。那么是用 <a href=\"https://github.com/qwqcode/Artalk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@qwqcode/Artalk</a> 还是 <a href=\"https://github.com/HelipengTony/nexment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@HelipengTony/nexment</a> 呢？</p>\n<p>外行人看热闹，我以一个前端菜鸟的水平不足以在架构上对两个评论系统做出优劣比较，所以以下只是我个人选择的理由。</p>\n<p>Nexment 是 <del>React.js 编写</del> 「计划全平台、全框架适配」的基于 LeanCloud 实现 Serverless 的评论系统，官方提供了 React.js 和 Vue.js 示例，有自己的文档（虽然 Tony 好像还没有写详细，但至少有一个站点在那）。官方示例站点 <a href=\"https://nexment-demo.ouorz.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nextment for React Demo</a> / <a href=\"https://nexment-vue-demo.ouorz.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nextment for Vue Demo</a>，我觉得新颖的点在弹窗显示多级评论上，在我逛的博客圈子里比较少见。部署的话需要提前配置 LeanCloud 的数据库，这让我停止了思考（我的数据库放在别人那里想想就不靠谱啊喂）。Nexment 诞生于最近一月，截至本文发布前最后一次提交在三天前，作者 TonyHe 感觉是个努力 Coding 的巨佬，毕竟即将出国留学了。</p>\n<p>Artalk 是 TypeScript 编写的需要自行部署后端的「一款简洁有趣的自托管评论系统」，数据存放在 JSON 文件中，后续听说也计划增加 MySQL 的支持（我：那样听起来就不太简洁了呢）。需要自行搭建后端估计劝退了很多人，而且目前只支持 PHP 后端，README 里写的 Go、Node.js、Python 后端均迟迟未上线。官方给的示例只有几个 HTML，相当的「简洁」，基本都是在 HTML 引入 <code>Artalk.css</code> <code>Artalk.js</code> 后一些简单的配置。官方示例站点 <a href=\"https://artalk.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Artalk DEMO</a>，听说在这里可以观察到开发者立 Flag 现场。Artalk 诞生于 2018 年 10 月，截至本文发布前最后一次提交在今年 5 月，考虑到作者 QWQAQ 的学业繁忙，摸鱼也是可以理解的。</p>\n<p>简单了解两个评论系统之后，再看自身的 Gridsome 平台，基于 Vue.js。怎么看我都应该选择 Nexment，但是我却选择了 Artalk。原因嘛，自然是图个简单。Artalk 之前就搭建了自己的后端使用过一段时间，官方搭配的滑稽表情包在别的评论系统一众阿鲁表情包、贴吧表情包中独树一帜。更重要的是 Artalk 的代码我能看懂一些，进行自定义修改很方便。Nexment 虽好，但是外观相比 Artalk 我还是更喜欢后者，弹窗多级评论显示对我来说也需求不高，要我看 React.js 项目代码更是劝退。</p>\n<h2 id=\"对-artalk-的修改\"><a href=\"#%E5%AF%B9-artalk-%E7%9A%84%E4%BF%AE%E6%94%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>对 Artalk 的修改</h2>\n<p>Artalk 目前还没有支持夜间模式，原本的样式和本站也不太搭。于是我 Fork 了一份代码针对这两个问题进行修改。</p>\n<p>夜间模式主要按照当前主题和部分 Disqus 的配色、样式进行调整。其实之前也尝试配过一个夜间模式，用在自己修改后的 Typecho 主题上，但是代码过于粗糙。我调整颜色的方法甚至是直接将原版压缩后的 <code>.css</code> 打开后按 <code>Ctrl</code> <code>F2</code> 全部替换！剩下的样式代码压缩后即使找工具美化也看的我云里雾里。这次直接克隆仓库安装依赖从源头编译，方便那不是一星半点！</p>\n<p>到本文发布为止，我共进行了十余次提交，主要对以下这些地方进行了修改：</p>\n<ul>\n<li>夜间模式</li>\n<li>小屏幕样式部分适配</li>\n<li>评论显示效果嵌套层数自定义</li>\n<li>控制台版权去除</li>\n<li>「Power By Artalk」 调整</li>\n<li>侧边栏通知中心细节调整</li>\n</ul>\n<p>夜间模式的配色均在 <a href=\"https://github.com/monsterxcn/Artalk/blob/master/src/css/_variables.less\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">_variables.less</a> 中定义，以 <code>--at-</code> 为前缀。GitHub 仓库地址 <a href=\"https://github.com/monsterxcn/Artalk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/Artalk</a>，我搭了个示例站点 <a href=\"https://artalk.vercel.app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Artalk ♂</a>。我没有系统学过 CSS 写法，所以让本应简洁的代码变得不简洁了，希望各位多发挥才智、创作自己的二次开发版 Artalk！<del>今天发现评论区的 <code>&#x3C;pre></code> 代码块样式还存在问题，</del> 探索中 😣……</p>\n<h2 id=\"在-gridsome-上调试\"><a href=\"#%E5%9C%A8-gridsome-%E4%B8%8A%E8%B0%83%E8%AF%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>在 Gridsome 上调试</h2>\n<p>刚使用 Gridsome 大约一周，对它的了解很少，Vue.js 水平连门都入不了。但是这样的我还是花了几个小时将 Artalk 成功适配到了博客。中间踩了几个坑在这里提一下解决方法。</p>\n<h3 id=\"安装-artalk\"><a href=\"#%E5%AE%89%E8%A3%85-artalk\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Artalk</h3>\n<p>Artalk 提供了 npm 包，所以可以直接在命令行安装</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> artalk <span class=\"token parameter variable\">--save</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>如果需要安装我修改之后的版本则需要在 <code>package.json</code> 中手动写入仓库地址：</p>\n<pre class=\"language-diff line-numbers\"><code class=\"language-diff\">{\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"name\": \"gridsome-starter-blog\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"private\": true,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"build\": \"gridsome build\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"develop\": \"gridsome develop\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"explore\": \"gridsome explore\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"dependencies\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/plugin-google-analytics\": \"^0.1.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/remark-prismjs\": \"^0.2.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/source-filesystem\": \"^0.6.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/transformer-remark\": \"^0.3.0\",\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   \"gridsome\": \"^0.7.0\"\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"gridsome\": \"^0.7.0\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"artalk\": \"https://github.com/monsterxcn/Artalk.git\",\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"devDependencies\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"node-sass\": \"^4.12.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"sass-loader\": \"^8.0.0\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span>}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里 L16 会直接引用我修改后的最新开发版，但是如果用于自动构建发布站点的 GitHub Actions 中使用了依赖缓存，则总是使用第一次执行工作流时安装的版本，无法获得后续更新。<del>为了解决这一问题，将 Git 链接修改为指定 commit 时刻的地址即可</del> 这好像也不可行。</p>\n<h3 id=\"引入-artalkcss\"><a href=\"#%E5%BC%95%E5%85%A5-artalkcss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>引入 <code>Artalk.css</code></h3>\n<p>接下来引用 <code>Artalk.css</code> 和 <code>Artalk.js</code>，建议单独新建 <code>ArtalkCards.vue</code> 文件存放 Artalk 评论组件的代码，只在该模板中引入 <code>Artalk.css</code> 即可。</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token string\">'artalk/dist/Artalk.css'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>当前不必要的 <code>.css</code> 文件我们都让它在不得不引入时再加载。</p>\n<h3 id=\"引入-artalkjs\"><a href=\"#%E5%BC%95%E5%85%A5-artalkjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>引入 <code>Artalk.js</code></h3>\n<p>最初引入 <code>Artalk.js</code> 时，我参考主题使用 DisqusJS 的方法在 <code>.vue</code> 模板文件的 <code>&#x3C;script></code> 标签中这样写：</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token string\">'artalk/dist/Artalk.css'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Artalk</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'artalk'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Initialize post comment by Artalk</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> artalk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Artalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#artalkcomments'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">placeholder</span><span class=\"token operator\">:</span> <span class=\"token string\">'说点什么 (づ￣ 3￣)づ'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">defaultAvatar</span><span class=\"token operator\">:</span> <span class=\"token string\">'mp'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// maxNest: 2,</span>\n        <span class=\"token literal-property property\">pageKey</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://blog.monsterx.cn/some-page/'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">serverUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://monsterx.cn/ArtalkServer'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">readMore</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">pageSize</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">autoLoad</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>gridsome develop</code> 预览正常，但是发布时遇到「ReferenceError: window is not defined」，提示的报错信息都来自 <code>node_modules/artalk/dist/Artalk.js</code>，我以为是自己修改 Artalk 出的问题，于是又回去修改 Artalk 代码，将网上用来解决这个问题的几个方法都试了一遍依旧报错。正当我迷惑时，突然想到了 Gridsome 的源头 Vue.js 本身，于是我一拍脑袋在搜索时加了关键词 <code>gridsome</code>，这才发现原来和「Client API」有关。</p>\n<p>几个参考链接《<a href=\"https://stackoverflow.com/questions/40707481/window-is-not-defined-in-vue-js-2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">javascript - 'window' is not defined in Vue.js 2 - Stack Overflow</a>》《<a href=\"https://github.com/gridsome/gridsome/issues/646\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Failed to render / ReferenceError: window is not defined (vue2-leaflet) - issue #646 - GitHub @gridsome/gridsome</a>》《<a href=\"https://gridsome.org/docs/client-api/#isclient\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Client API - Gridsome</a>》</p>\n<p>虽然不知道这是个什么东西，但是大概说的是有些代码只能在客户端跑，服务端无法 <del>执行</del>「渲染」，比如 <code>window</code> 的操作。要说专业点，应该是关乎 S(erver) S(ide) R(ender)「服务器端渲染」的机制。根据上面第二个链接中 <a href=\"https://github.com/gridsome/gridsome/issues/646#issuecomment-578367659\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IHIutch 的回答</a>，成功找到了解决方案：</p>\n<pre class=\"language-diff line-numbers\"><code class=\"language-diff\">import 'artalk/dist/Artalk.css'\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">import Artalk from 'artalk'\n</span></span>\nexport default {\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // ...\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> mounted() {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   // Initialize post comment by Artalk\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   if (process.env.NODE_ENV === 'production') {\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     let Artalk = require('artalk')\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     var artalk = new Artalk({\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       el: '#artalkcomments',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       placeholder: '说点什么 (づ￣ 3￣)づ',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       defaultAvatar: 'mp',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       // maxNest: 2,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       pageKey: 'https://blog.monsterx.cn/some-page/',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       serverUrl: 'https://lab.mocurio.com/artalk/',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       readMore: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">         pageSize: 15,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">         autoLoad: true,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     })\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span>}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>L10 <code>process.env.NODE_ENV === 'production'</code> 和 <code>process.isClient</code> 实际体验应该都差不多。上面两处注释掉的 <code>maxNest</code> 是我修改后具有的功能，原版开启后不会有效果，该项不设置时默认显示三层嵌套。</p>\n<h2 id=\"最终模板\"><a href=\"#%E6%9C%80%E7%BB%88%E6%A8%A1%E6%9D%BF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>最终模板</h2>\n<p><del>在 <code>/src/components</code> 新建 <code>ArtalkCards.vue</code> 作为 Artalk 评论区模板</del> 我对 Gridsome 的模板还不太熟悉，总之直接在需要引入评论区的页面直接加好了：</p>\n<pre class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token comment\">&lt;!-- --></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>artalk-cards<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admonition admonition-warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">></span></span>\n        Comment on this blog\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n        评论如无特殊原因均不会被删除，提交前请三思。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span>\n        你应该懂得如何发表适当的观点，请对自己的言论负责。\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LetsArtalk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token comment\">&lt;!-- --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'artalk/dist/Artalk.css'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Initialize post comment by Artalk</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token maybe-class-name\">Artalk</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'artalk'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">var</span> artalk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Artalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#LetsArtalk'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">placeholder</span><span class=\"token operator\">:</span> <span class=\"token string\">'说点什么 (づ￣ 3￣)づ'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">defaultAvatar</span><span class=\"token operator\">:</span> <span class=\"token string\">'mp'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// maxNest: 2,</span>\n        <span class=\"token literal-property property\">pageKey</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://blog.monsterx.cn'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$page</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">post</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">serverUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://monsterx.cn/ArtalkServer'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">readMore</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">pageSize</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">autoLoad</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>page-query</span><span class=\"token punctuation\">></span></span>\nquery Post ($id: ID!) {\n\n  // ...\n\n  post: post (id: $id) {\n    path\n  }\n}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>page-query</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scss<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\"><span class=\"token class\">.artalk-cards</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--at-bg-main</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--radius</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--content-width</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span> auto <span class=\"token number\">100</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">5</span><span class=\"token unit\">px</span> <span class=\"token number\">0</span> <span class=\"token color\"><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">15</span><span class=\"token unit\">px</span> <span class=\"token number\">0</span> <span class=\"token color\"><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\">details</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top-left-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--radius</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top-right-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--radius</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">summary</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token unit\">px</span> auto <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--cb-admonition-icon-color</span><span class=\"token punctuation\">)</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.75</span><span class=\"token unit\">rem</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span><span class=\"token unit\">rem</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--title-font-family</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">summary<span class=\"token pseudo-element\">::-webkit-details-marker</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--at-font-color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token id\">#LetsArtalk</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">767.5</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">details <span class=\"token combinator\">></span> p</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token id\">#LetsArtalk</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** */</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据需要自己修改下 <code>&#x3C;template></code> 的内容，注意保证只存在一个「主标签」，比如我的是 <code>&#x3C;div class=\"artalk-cards\"></code>。修改 L29-37 为自己的 Artalk 参数，<code>pageKey</code> 需要自行拼接为页面 URL，否则后端发送的邮件中「查看回复」按钮可能链接到奇怪的地方导致体验极差，其他参数查阅 <a href=\"https://github.com/monsterxcn/Artalk/blob/master/types/artalk-config.d.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">artalk-config.d.ts</a>。<code>&#x3C;style></code> 是我针对当前主题做的一点适配。</p>\n<p>考虑到能看到这里并且有意愿尝试 Artalk 的人应该极少，我悄悄说一句大家可以使用我搭的 Artalk PHP 后端尝尝鲜吖，它运行在 <del>阿里云北京</del> 腾讯云上海的机器上，并发访问除了我自己的站点应该就没了，而我自己的站点访问也很少，所以服务器压力不大，给大家玩玩还是可以的。将配置中的 <code>serverUrl</code> 字段填写为 <code>https://monsterx.cn/ArtalkServer</code> 来使用本站后端，跨域访问目前允许，不必向我申请。</p>\n<blockquote>\n<p>其实通过 phpcomposer 安装搭建 Artalk PHP 后端也十分简单。目前发现需要注意的是 PHP 得开启 GD 库和 FreeType 支持，否则无法生成图形验证码。<br />\n使用别人的后端存在一些不足之处：邮件模板、发信设置只能使用搭建者的，目前 Artalk 对多站点的支持尚不完整。<br />\n担心引用本站后端存在数据安全或其他问题可以尝试自行搭建。<del>以后有空可能写一篇 Docker Artalk PHP 后端的文。</del> 如果对上述内容有问题欢迎留言。</p>\n</blockquote>\n"}},{"node":{"title":"GitHub README.md 显示博文并自动更新","path":"/code/update-your-posts-in-readme/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/readme-update-posts.a209973.f393ea57d8de7faf75fb828605c2dbee.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/readme-update-posts.a67b0b2.f393ea57d8de7faf75fb828605c2dbee.png 480w","/assets/static/readme-update-posts.a209973.f393ea57d8de7faf75fb828605c2dbee.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-08b4391f22145ab56f4ff295572763eb'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-08b4391f22145ab56f4ff295572763eb)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAJg0lEQVRIx5WXeVCU9xnHF4XIsfe%2bC3vA1Dbapl6JphKixgsBcbkXdt37YFm52QsQFhaQe7nvZblvAQMsCwhGq4lxNE1TxzTWmJq0Hm2mdiaZdPpXp9Pp83t3PUgV6cwz7yw7sDyf5/k%2b3%2bdZAqYZYCT3Pwt1H0PVw1DZ6QobXdZBEzVRE2spseXkqGJSRJ6/wsYxLnD0Do5%2bHp5cw3yQwfkT0wJX78Cy55hZ8I6TY5iHYMPv6Ob8VT00YQNV2ECXtNHlXXRpB3ohaaWdbKIK6qn8GkpMGSk8lxxfQdI6vZOXiMpRuqydobQz1L3ufCA9zQCWMvyyIGCaQcbzDPCXKrsbQNpOEzRQ4yvJ0aWk46cpJ8zsjLMcoxOScwVXDwALHJ3TP9sRXn9F0fPJDvMySzfPRQwOhKGbY2VOBaQMYfJOuqQdUqeLmt3ZJ9ZSE6rI0Ra/MFOQpmdr8XV/3UWGqg/%2bKaqguucpAPYqgKHVHcDLr%2bymyzpp4hZqkpUSewbKTwwzMpJqITOWbg5SDzQ4UZb6uUDD/LsVF2Nars5%2b9ujynb9N/%2bZBcNkHLJ3D1QcW9AF6Av2Rd9GEjbSTjVSoiKAOz74aGkviFTNiig6ULfNsd3dZriBOeZergkgLeEpQ4rUAVpU/ue%2b58ndAqSgJ1eSYUlJkISnMFKDu5ZoW3bU3zAcaF7i5y4GmpZK5Lz5/%2bP3Vu491EzeBIabtGiNnHsBATmzgNC6w0ydoSVYqijp4gqgo/FpKfAUlupTIs/z0ZNXr2t6d5gt7zU7UJWW3G%2bAJw6sAVpW/111%2b0KukHRoN/4YcZSGG51F4ReysaY678A4WJJc5yZI2s1Td27IGGi98deGLbz/%2b8tuOS/e42n7/5F6ucRH6w0ofR5Og6IZig9wpsWUUKMehVDLPTIm2oE8%2bYfaPNgen1G3Xtm3V2qHtqwAQQy8GClw3wAv0Q%2bIVgX4wYYN7NPW4uGGUMyboR9MYcZYAYbW8arTt7EqlbeJgySxd2hqg7GSljWHCWiyhFONXkA%2bnEveriSEy4uF0Mq/Id0ek368ExENpfiFSr2DZzqhTOkvD3hQrA6oG%2bvkxQN8a2f8IYLV%2bhE0Ufg2un9NIPykD4D9s/Rz4D8IAAEgx0kCOK9%2bfWicu6pIU2wwltdtM0wxZG5ZYwYgtph/XMwXV1KNpfntFPvtU3iFy4pEM0pFM3xCZ39EsYojEZ0/iz45INMYKS3XL5vjTFKkNMawGwEBC2mEUrwZ46j9y3H9AqeA/SD%2b5lOgSds77HIPLOpFRBhqdWNZsdMPF/stftV%2b4s/L5X2av3U6p7Gcl96AWZU5CsDOn/TPPwRR5hxo8Rd0e8iHPk53e/HpPUZenYsgzoYEjrBUXdr0uKBMVdARndvkJWxCAwvZ8E9AAuABegkF4gX7gU8StSD9x5aQTRcRjRkzcHGgCTTtc/uPaAAG6%2be1FKzWLd75%2b/M9P//Td1KcPdhcv%2bufMAVsgDIBhYXP%2b4q5C5xZxNUdk9VCMeqjGCaqJZyEZ2CKrk5QNEUUdIVm2rcomcmIdA3wWxuApAwyAZngVgHY9ADAAohYqGAVsGdBPRB7r1AgXB3ANAHg8JBp85oPS2d/XLv4BDFRiv54z9rufF5xH6jI4goxOcNKdxct3/vrDf/79L033hwTh4EblGEExSoAnhGocGuKT1BRjGY0um8Jknd5im6%2bkiyJqRbtC/oQB9PM015dgEF4yAI34likhhuXSYs9wcmY4Btd6mscl5ACD/2XhUqXz9s373928/33huVu/KFiCpLn4rwUZF4DBN2Wieura3QePfRQDmzQT2/Jn6WmTBMWYhxIFQTkO4aUeY2qHfQXNXmI7tGWDcoQo6WSImt12tAbAEwzCcxcEAHSjAXAZKOiHZwb9MGUd%2bPi6dxMKoxP0s6/yUuPKl/Xn72oHfztx4/7B6ovMHAfX6HR3ybSIpYwExeS/nWEjaSfeNs/vNzt2GcZ9NSPAgFqBFIUY0I%2boOSOuN73kg2RRC2gY5gHK%2bmwJaF8cqwBWDQAY6PECcmQBK23CBcDGdzCKzMkg/Uxc85Vbj3747JvHIx/fq1m4vTl/GRrFzj7HMS7CxLN1s5ioySdYToiqDsyePjPQYumuaBsuFNfX%2b6ZMBeqmQUIE6QBBOogA1JOE5EmC%2bizikfRBH16T91MUvfhBAafE0P8DgAagmcqvhvuHGG6iJ1Rx8aQ5%2bHHGNS0FSJvJgrrQguGs5snctqnUmkFNZd/B3H52xiQr2c6IMQNnQEo/PdIIxu%2b9PXIjv8ErrubirHBlMqq5KX6vMnWb0npA17lTWko5kcdWtG0xzdAkrYQ4qwc4Fb9pw7FcxKMc91EOYmo7vonXBdD7DAA2ABgor4gUbvRX2mD7Qk5wGuAAi/Q4y2ZN1zFdy6GMBl1NT1XXmLq4mZFUxeSfYSaWQ96YqD4gbYzyrthnB%2b%2b13XwAIBw2hCsEiTlqSkIxM8b8psC4R3z6cHrtG0n5x83Dgtr3dwjzN4YaPQ7rCO9lEiIKcV2NEuV2TAVjANfo0Boq%2bh8AKT4AcGbB%2bckzo7ri4uHgT65pgaYZSm%2beybcvxpZPnV2%2bZp/7SNHoCFDbA8SNTFkL86SVlTrCSp%2bgHMv2eYvvGVHoEW/1iK8j8GoIEWWE6Fqy0k4XN3nzrW%2bmdx7S297R2d8z9oad7g/N73vjVIe/qM6Xb/VKPrtJNUKVdaKxRAfpugDwIQYLkrRRE61goLC/GAKry/vhAmXhDFyDg5HtGLnx0PbRn2Pbr9dfuHfz4T%2bSum7Qs52Beec5piU479DA5MyQI/J8Qk0bYEyRuCc9kic9NFPoNWwANXonyIgqgmXNcPWzByqWY5ouJbZeTmi5sq9ihZY%2bRVUPgJmissKtmbLuDjwFIEeVgP0HJPfh1z%2baXZZ7CThgAQs7r33y9d8Hr35j%2b/Ufl2492l2yjGXPcPQ4IRzSRidTZffbp9kUU4l8BrwF2f/okxe457h%2blI/gMeqpHudkTb9VOLfH7HjH4tygHCXKuhlKGzJ3GOJ1AUCoeugugCQrmWehxpbB%2bcl2XT74EYHyw5/wTqj1Muzg7iv3TjR9CEvNZf9cfEPD/UyPL/fZfwrOB1Rvd8avCsQzCuvCTzu5QT5Ic30rQPoZXHsVrN7ECnwJJNWBhDBpu2tnuY/QJ/m5HAnLnqVlzjCyZpnZc64vN1z8Syb6kpA1TTqa7R2W56EcXW/2zzBQ%2bMh60BLAv1Viaw4AxH8BmBiwkh0ecp8AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"date":"August 18. 2020","timeToRead":18,"cjkWordCount":3494,"cjkReadTime":11,"description":"看见别人的 GitHub 主页都换上了 README，我就也安排上了。顺便网上冲浪现学 Python 做了个通过 RSS 获取最近博文并自动更新到 README 的小玩意。","content":"<p>今年 GitHub 推出了 profile-level README 的新特性，只要新建与用户名同名仓库并创建 <code>README.md</code> 就可以在 GitHub 个人主页上看到其内容。比起单纯的固定仓库或 Gist 在个人主页，我觉得这会让 GitHub 主页变得更多姿多彩，戳官方 <a href=\"https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-your-profile-readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a> 了解更多。然而，像我这种菜鸟想了很久都没有想清楚在个人主页上到底写点什么，拿得出手的项目是不存在的，刷 commit 也只是满足下自己的虚荣心而已，能力提升微乎其微。</p>\n<p>这段时间看了很多个人介绍仓库之后，发现我想多了：GitHub 是什么？<del>全球最大的同性交友网站啊！</del> 又不是世纪佳缘，写得漂亮能找着对象吗？开心就好，介绍下自己，放张关于自己仓库的小卡片，留点 E-mail Twitter 之外更丰富的社交链接，这个 <code>README.md</code> 就达标辣！（靠 GitHub 找工作的话那当我没说。</p>\n<p>单单写 READMD 没什么好记录的，本文就记录一下自己为了让 README 稍稍有点逼格，制作「从 RSS 获取最近更新并以 Markdown 格式写入 README」功能的经过吧。毕竟对于萌新我来说，做出点有意思的东西是很有成就感的。</p>\n<blockquote>\n<p>写着写着就变成了幼儿读物的感觉，请不要笑话我了，毕竟我是个萌新，阿巴阿巴 🤪 <br />\n看完这篇文章你至少会了解到「萌新如何开始学习别人的代码」「GitHub Actions 如何跨仓库执行」「从 <code>workflows_run</code> 触发工作流」</p>\n</blockquote>\n<h2 id=\"从文章中学习\"><a href=\"#%E4%BB%8E%E6%96%87%E7%AB%A0%E4%B8%AD%E5%AD%A6%E4%B9%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>从文章中学习</h2>\n<p>一切是从这里开始的：《<a href=\"https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a self-updating profile README for GitHub - Simon Willison’s Weblog</a>》，这位作者的仓库 <a href=\"https://github.com/simonw/simonw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@simonw/simonw</a> 显示了三栏自动更新的内容，包括 GitHub 上的打包发布、博客文章和另外一个站点 T(hings) I L(earned) 的条目。这三栏分别使用了三种途径获取最新内容的，均由 Python 实现：</p>\n<ul>\n<li>「GitHub GraphQL API -> python_graphql_client -> Latest Release」</li>\n<li>「RSS Atom feed -> feedparser -> Latest posts」</li>\n<li>「Datasette API -> SQL query -> Latest entries」</li>\n</ul>\n<p>第一个和第三个我都不了解，只有 RSS 的格式稍微懂一点，巧的是这正好能用来获取博客最新的文章。动手开始！</p>\n<h2 id=\"面向谷歌编程\"><a href=\"#%E9%9D%A2%E5%90%91%E8%B0%B7%E6%AD%8C%E7%BC%96%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>面向谷歌编程</h2>\n<p>查看仓库现成的 <code>build_readme.py</code> 文件，一眼扫下来有 218 行，有点晕。一遍看下来 GitHub GraphQL API 和 Datasette API 相关的占了较大篇幅，这说明通过 RSS 获取博客内容的代码较少。这时候我选择找到第一个版本的文件，我觉得最初的版本大概率应该是最简陋的，能让我最快的搞清楚代码的大体结构。第一个版本的 <a href=\"https://github.com/simonw/simonw/commit/d2b5e8ba30b0d2b1a867e0bfafa1215a2b5ef287#diff-b8502c56279bd4ac52ccb69f70e81a13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build_readme.py</a> L139，就从这里开始吧。</p>\n<details><summary><strong>从零开始学 Copy</strong></summary><br />\n<p>从 L107 <code>if __name__ == \"__main__\"</code> 处开始读，截取在下面 L1。这句相当于 C 语言的 <code>int main()</code>（尝试白嫖腾讯云无服务器环境的时候从环境设置里学到的。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    readme <span class=\"token operator\">=</span> root <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n    releases <span class=\"token operator\">=</span> fetch_releases<span class=\"token punctuation\">(</span>TOKEN<span class=\"token punctuation\">)</span>\n    releases<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> r<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">[</span><span class=\"token string\">\"published_at\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"* [{repo} {release}]({url}) - {published_at}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>release<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> release <span class=\"token keyword\">in</span> releases<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    readme_contents <span class=\"token operator\">=</span> readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>readme_contents<span class=\"token punctuation\">,</span> <span class=\"token string\">\"recent_releases\"</span><span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span>\n\n    tils <span class=\"token operator\">=</span> fetch_tils<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tils_md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"* [{title}]({url}) - {created_at}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                url<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                created_at<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"created_utc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> til <span class=\"token keyword\">in</span> tils\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tils\"</span><span class=\"token punctuation\">,</span> tils_md<span class=\"token punctuation\">)</span>\n\n    entries <span class=\"token operator\">=</span> fetch_blog_entries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n    entries_md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"* [{title}]({url}) - {published}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>entry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> entries<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blog\"</span><span class=\"token punctuation\">,</span> entries_md<span class=\"token punctuation\">)</span>\n\n    readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>release</code> <code>til</code> 命名的很显然是获取 GitHub 和 TIL 最新内容相关，于是获取博客更新的主要代码就筛选出来了：L1-2 L27-33。L2 用到的变量 <code>root</code> 并没有出现定义，接下来找他的定义和用到的函数 <code>fetch_blog_entries()</code> <code>replace_chunk()</code>。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">root <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 库 pathlib</span>\n\n<span class=\"token comment\">## ...</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">replace_chunk</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    r <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>                               <span class=\"token comment\"># 库 re</span>\n        <span class=\"token string\">r\"&lt;!\\-\\- {} starts \\-\\->.*&lt;!\\-\\- {} ends \\-\\->\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>marker<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    chunk <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- {} starts -->\\n{}\\n&lt;!-- {} ends -->\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>marker<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">## ...</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch_blog_entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 库 feedparser</span>\n    entries <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://simonwillison.net/atom/entries/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"entries\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"published\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"published\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> entries\n    <span class=\"token punctuation\">]</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看起来有些许复杂，此时应该提取出用到的 Python 库，实际调试的时候只要尝试单独运行这些代码块会得到未定义之类的错误，然后就能定位到缺失的库。在 Python 文件开头使用 <code>import</code> 导入。</p>\n</details><br />\n<p>下面是正式的面向谷歌编程，也就是学习用轮子（作者用到的那些库 pathlib、re、feedparser）：pathlib 库看起来没有需要谷歌的，一个能获取文件路径的库。re 库用到了正则表达式，结合作者在仓库第一版 <code>README.md</code> 中写的 <code>&#x3C;!-- blog starts --></code> <code>&#x3C;!-- blog ends --></code> 这样的标记，不难理解是将结果通过正则匹配找到位置，然后进行替换。feedparser 库从一个 Atom 链接获取了包含文章信息的数组，是为「源头」。</p>\n<h3 id=\"feedparser-解析-rss\"><a href=\"#feedparser-%E8%A7%A3%E6%9E%90-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>feedparser 解析 RSS</h3>\n<p>《<a href=\"https://vimsky.com/article/4399.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在 Python 中使用 Feedparser 解析 RSS - 纯净天空</a>》一篇足矣，或者看英文版《<a href=\"https://www.pythonforbeginners.com/feedparser/using-feedparser-in-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Feedparser in Python - PythonForBeginners</a>》。当然，RSS 文件也要有一丢丢了解。XML 格式由 HTML 触类旁通不难理解，可以试着戳 <a href=\"https://blog.monsterx.cn/feed.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a> 看看本站的 RSS 源格式。在每个 <code>&#x3C;item></code> 中包含了 <code>&#x3C;title></code> <code>&#x3C;link></code> <code>&#x3C;pubDate></code>，用来输出到 <code>README.md</code> 够了。</p>\n<p>参考链接文章用的是 <code>dic['feed']</code> 这种格式，用起来和 <code>dic.feed</code> 是一样的，就用后面这种短一点的写个示例。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> feedparser\n\n<span class=\"token comment\"># 解析本站的 RSS 源</span>\ndic <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'https://blog.monsterx.cn/feed.xml'</span><span class=\"token punctuation\">)</span>\nchannel <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">.</span>feed                 <span class=\"token comment\"># 获取 &lt;channel> 数据</span>\nitems <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">.</span>entries                <span class=\"token comment\"># 获取 &lt;item> 数据</span>\nitem <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>                    <span class=\"token comment\"># 获取第一个 &lt;item> 数据</span>\nsitetitle <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>title          <span class=\"token comment\"># 获取 &lt;channel>&lt;title> 数据</span>\nsitelink <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>link            <span class=\"token comment\"># 获取 &lt;channel>&lt;link> 数据</span>\nposttitle <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title         <span class=\"token comment\"># 获取 &lt;item>&lt;title> 数据</span>\npostlink <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>link           <span class=\"token comment\"># 获取 &lt;item>&lt;link> 数据</span>\npostdate <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>published      <span class=\"token comment\"># 获取 &lt;item>&lt;pubDate> 数据</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sitetitle<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RSS 数据较多时 <code>print(dic)</code> 可能让人头皮发麻，自行体会吧。下面给出更直观的对比：</p>\n<pre class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rss</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>dc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://purl.org/dc/elements/1.1/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://purl.org/rss/1.0/modules/content/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>atom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/Atom<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>channel</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Monstx's Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>Monsterx CN - 学生 / 前端 / 电气<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lastBuildDate</span><span class=\"token punctuation\">></span></span>Tue, 18 Aug 2020 04:11:01 GMT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lastBuildDate</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docs</span><span class=\"token punctuation\">></span></span>https://validator.w3.org/feed/docs/rss2.html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docs</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>generator</span><span class=\"token punctuation\">></span></span>Gridsome Feed Plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>generator</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">atom:</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://blog.monsterx.cn/feed.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>self<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application/rss+xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token cdata\">&lt;![CDATA[ New Start ]]></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/life/new-start-with-gridsome/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>guid</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/life/new-start-with-gridsome/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>guid</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pubDate</span><span class=\"token punctuation\">></span></span>Sat, 15 Aug 2020 00:00:00 GMT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pubDate</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">content:</span>encoded</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token cdata\">&lt;![CDATA[ &lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p> ]]></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">content:</span>encoded</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!-- 另外一篇文章 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!-- 另外一篇文章 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>channel</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rss</span><span class=\"token punctuation\">></span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解析后：</p>\n<details><summary><strong>freeparser 解析结构</strong></summary><br />\n<pre class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  'feed'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'title'<span class=\"token operator\">:</span> <span class=\"token string\">\"Monstx's Blog\"</span><span class=\"token punctuation\">,</span> \n    'title_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      'type'<span class=\"token operator\">:</span> 'text/plain'<span class=\"token punctuation\">,</span> \n      'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n      'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n      'value'<span class=\"token operator\">:</span> <span class=\"token string\">\"Monstx's Blog\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'links'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        'rel'<span class=\"token operator\">:</span> 'alternate'<span class=\"token punctuation\">,</span> \n        'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n        'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n        'rel'<span class=\"token operator\">:</span> 'self'<span class=\"token punctuation\">,</span> \n        'type'<span class=\"token operator\">:</span> 'application/rss+xml'\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n    'link'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/', </span>\n    'subtitle'<span class=\"token operator\">:</span> 'Monsterx CN - 学生 / 前端 / 电气'<span class=\"token punctuation\">,</span> \n    'subtitle_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n      'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n      'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n      'value'<span class=\"token operator\">:</span> 'Monsterx CN - 学生 / 前端 / 电气'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'updated'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">01</span> GMT'<span class=\"token punctuation\">,</span> \n    'updated_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">18</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">11</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">231</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n    'docs'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//validator.w3.org/feed/docs/rss2.html', </span>\n    'generator_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>'name'<span class=\"token operator\">:</span> 'Gridsome Feed Plugin'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'generator'<span class=\"token operator\">:</span> 'Gridsome Feed Plugin'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  'entries'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      'title'<span class=\"token operator\">:</span> 'New Start'<span class=\"token punctuation\">,</span> \n      'title_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        'type'<span class=\"token operator\">:</span> 'text/plain'<span class=\"token punctuation\">,</span> \n        'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n        'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n        'value'<span class=\"token operator\">:</span> 'New Start'\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n      'links'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          'rel'<span class=\"token operator\">:</span> 'alternate'<span class=\"token punctuation\">,</span> \n          'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n          'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n      'link'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/', </span>\n      'id'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/', </span>\n      'guidislink'<span class=\"token operator\">:</span> False<span class=\"token punctuation\">,</span> \n      'published'<span class=\"token operator\">:</span> 'Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> GMT'<span class=\"token punctuation\">,</span> \n      'published_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">15</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">5</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">228</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n      'content'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n          'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n          'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n          'value'<span class=\"token operator\">:</span> '&lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p>'\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n      'summary'<span class=\"token operator\">:</span> '&lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p>'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 另外一篇文章</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n  'bozo'<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \n  'headers'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'Server'<span class=\"token operator\">:</span> 'Tengine'<span class=\"token punctuation\">,</span> \n    'Content-Type'<span class=\"token operator\">:</span> 'application/xml'<span class=\"token punctuation\">,</span> \n    'Transfer-Encoding'<span class=\"token operator\">:</span> 'chunked'<span class=\"token punctuation\">,</span> \n    'Connection'<span class=\"token operator\">:</span> 'close'<span class=\"token punctuation\">,</span> \n    'Vary'<span class=\"token operator\">:</span> 'Accept-Encoding'<span class=\"token punctuation\">,</span> \n    'Strict-Transport-Security'<span class=\"token operator\">:</span> 'max-age=<span class=\"token number\">31536000</span>'<span class=\"token punctuation\">,</span> \n    'Date'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span><span class=\"token number\">37</span><span class=\"token operator\">:</span><span class=\"token number\">32</span> GMT'<span class=\"token punctuation\">,</span> \n    'x-oss-request-id'<span class=\"token operator\">:</span> '5F3BD99C7DD3BB333136465D'<span class=\"token punctuation\">,</span> \n    'x-oss-cdn-auth'<span class=\"token operator\">:</span> 'success'<span class=\"token punctuation\">,</span> \n    'ETag'<span class=\"token operator\">:</span> 'W/<span class=\"token string\">\"7885150FF626A52F9C8E511300EDC191\"</span>'<span class=\"token punctuation\">,</span> \n    'Last-Modified'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">35</span> GMT'<span class=\"token punctuation\">,</span> \n    'x-oss-object-type'<span class=\"token operator\">:</span> 'Normal'<span class=\"token punctuation\">,</span> \n    'x-oss-hash-crc64ecma'<span class=\"token operator\">:</span> '<span class=\"token number\">904326687370716414</span>'<span class=\"token punctuation\">,</span> \n    'x-oss-storage-class'<span class=\"token operator\">:</span> 'Standard'<span class=\"token punctuation\">,</span> \n    'x-oss-server-side-encryption'<span class=\"token operator\">:</span> 'AES256'<span class=\"token punctuation\">,</span> \n    'Content-MD5'<span class=\"token operator\">:</span> 'eIUVD/YmpS+cjlETAO3BkQ=='<span class=\"token punctuation\">,</span> \n    'x-oss-server-time'<span class=\"token operator\">:</span> '<span class=\"token number\">40</span>'<span class=\"token punctuation\">,</span> \n    'Via'<span class=\"token operator\">:</span> 'cache36.l2cm9<span class=\"token number\">-5</span><span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kunlun8.cn2479<span class=\"token punctuation\">[</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>'<span class=\"token punctuation\">,</span> \n    'Timing-Allow-Origin'<span class=\"token operator\">:</span> '*'<span class=\"token punctuation\">,</span> \n    'EagleId'<span class=\"token operator\">:</span> '249c511c15977578523801838e'<span class=\"token punctuation\">,</span> \n    'Content-Encoding'<span class=\"token operator\">:</span> 'gzip'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  'etag'<span class=\"token operator\">:</span> 'W/<span class=\"token string\">\"7885150FF626A52F9C8E511300EDC191\"</span>'<span class=\"token punctuation\">,</span> \n  'updated'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">35</span> GMT'<span class=\"token punctuation\">,</span> \n  'updated_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">18</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">11</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">35</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">231</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n  'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n  'status'<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> \n  'encoding'<span class=\"token operator\">:</span> 'utf<span class=\"token number\">-8</span>'<span class=\"token punctuation\">,</span> \n  'version'<span class=\"token operator\">:</span> 'rss20'<span class=\"token punctuation\">,</span> \n  'namespaces'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'dc'<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//purl.org/dc/elements/1.1/', </span>\n    'content'<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//purl.org/rss/1.0/modules/content/', </span>\n    ''<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//www.w3.org/2005/Atom'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>可以看到解析出来像是 JSON 格式，而且不仅仅包含 XML 文件可见内容，HTTP Header 信息也在其中。值得注意的地方： <code>&#x3C;item>&#x3C;pubDate></code> 并不是通过形如 <code>items[0].pubDate</code> 获取，而是 <code>items[0].published</code> 。根据这个结构更加灵活的运用 feedparser 吧！实现 README 自动更新最近博文并不需要这些，我给的示例足够用了。</p>\n<h3 id=\"re-正则表达式替换\"><a href=\"#re-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9B%BF%E6%8D%A2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>re 正则表达式替换</h3>\n<p>学 re 库从 Python 官方文档开始：《<a href=\"https://docs.python.org/zh-cn/3/library/re.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">re --- 正则表达式操作 - Python 3 中文文档</a>》。不过最重要的还是学会写正则表达式，多写一些多搜一搜，时间久了自然就会了，我是这么想的。这里给出用于匹配 <strong>指定字符串之间所有内容且不包含指定字符串</strong> 的正则表达式。</p>\n<ul>\n<li><code>(?&#x3C;=MARK)</code> 指定以 <code>MARK</code> 开头，遇到 <code>MARK</code> 后开始匹配</li>\n<li><code>(?=MARK)</code> 指定 <code>MARK</code> 结尾，遇到 <code>MARK</code> 前停止匹配</li>\n<li><code>.</code> 在默认模式匹配除了换行的任意字符。re 库中如果指定了标签 <code>DOTALL</code> 则匹配包括换行符的任意字符</li>\n<li><code>*</code> 对它前面的正则式匹配 0 到任意次重复，尽可能多地匹配</li>\n</ul>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 拼接正则表达式并指定标签 DOTALL</span>\n<span class=\"token comment\"># (?&lt;=(STARTMARK)).*(?=(ENDMARK))</span>\n\nstart <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- posts start -->\"</span>\nend <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- posts end -->\"</span>\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n    re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>re.compile()</code> 将正则表达式的样式编译为一个正则表达式对象（正则对象），如果需要多次使用一个正则表达式的话，使用 <code>re.compile()</code> 保存这个正则对象以便复用，可以让程序更加高效。参数：<code>re.compile(pattern, flags=0)</code>，参考官方文档给出介绍如下：</p>\n<blockquote>\n<p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong> <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> <br />\n返回通过使用 <code>repl</code> 替换在 <code>string</code> 最左边非重叠出现的 <code>pattern</code> 匹配的字符串。</p>\n</blockquote>\n<ul>\n<li><code>pattern</code> 可以是字符串或对象，在无匹配到时原样返回 <code>string</code></li>\n<li><code>repl</code> 可以是字符串或函数。<code>pattern</code> 为字符串时 <code>repl</code> 中任何反斜杠转义序列都会被处理，如 <code>\\n</code> 会被转换为换行符、<code>\\r</code> 会被转换为回车符。ASCII 字符的未知转义符会被保留供将来使用并被视为错误。其他未知转义符例如 <code>\\&#x26;</code> 会保持原样。反向引用（Backreferences）例如 <code>\\6</code> 将被替换为 <code>pattern</code> 所匹配到的第 6 组的子字符串</li>\n<li>\n<p><code>repl</code> 是字符串时，对所述的转义符和反向引用（Backreferences）中有几处特殊需要说明</p>\n<ul>\n<li>形如 <code>\\g&#x3C;name></code> 用作 <code>(?P&#x3C;name>…)</code> 语法定义的 <code>name</code> 组的匹配到的子字符串</li>\n<li>形如 <code>\\g&#x3C;number></code> 用作对应数字的组，例如 <code>\\g&#x3C;2></code> 就是 <code>\\2</code>，但它避免了同 <code>\\g&#x3C;2>0</code> 的歧义</li>\n<li>形如 <code>\\20</code> 会被解释为组 <code>20</code>，而不是组 <code>2</code> 后面跟随一个字符 <code>0</code></li>\n<li>反向引用（Backreferences）例如 <code>\\g&#x3C;0></code> 等同于由 <code>pattern</code> 匹配的整个子字符串</li>\n</ul>\n</li>\n<li><code>repl</code> 是函数时，在每次非重叠出现 <code>pattern</code> 时都会被调用。这个函数只能有一个 <em>匹配对象</em> 参数，并返回替换后的字符串</li>\n<li>可选参数 <code>count</code> 是要替换的最大次数，必须为非负整数。如果忽略这个参数或设置为 0，所有的匹配都会被替换</li>\n<li>空匹配（Empty matches）仅在不与先前的空匹配相邻时，才被替换。所以 <code>sub('x*', '-', 'abxd')</code> 将返回 <code>-a-b--d-</code></li>\n</ul>\n<p>文档太专业了，总之 <code>re.sub(pattern, repl, string)</code> 可以用 <code>repl</code> 替换掉 <code>string</code> 内所有与 <code>pattern</code> 匹配的内容，这便是最基础的用法了。使用编译后的样式 <code>pattern.sub(repl, string)</code> 效果一样。</p>\n<p>写个示例：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\nstart <span class=\"token operator\">=</span> <span class=\"token string\">\"STARTMARK\"</span>\nend <span class=\"token operator\">=</span> <span class=\"token string\">\"ENDMARK\"</span>\nrepl <span class=\"token operator\">=</span> <span class=\"token string\">\"text used to replace\"</span>\ncontents <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"text wait STARTMARK ing for being ENDMARK replaced\"\"\"</span>\n\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n  re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\npattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最终输出 <code>contents</code> 为 <code>text wait STARTMARKtext used to replaceENDMARK replaced</code>。</p>\n<h3 id=\"python-文件读写\"><a href=\"#python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python 文件读写</h3>\n<p>懒得深究了，因为从之前作者的代码里找到了关于读写的:</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 当前文件的文件夹路径</span>\nthisdir <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># .py 与 README.md 同级时获取 README 完整路径</span>\nthisfile <span class=\"token operator\">=</span> thisdir <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n<span class=\"token comment\"># 取得 README 内容</span>\ncontents <span class=\"token operator\">=</span> thisfile<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结合之前的 re 库示例实现替换</span>\nreadme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>C 语言文件读写 <code>fopen()</code> 后还有 <code>fclose()</code> 的，作者的代码里没有找到 close 之类的。应该是程序结束默认关闭了吧，急于实现功能，此处没有留意。</p>\n<h2 id=\"整理整套代码\"><a href=\"#%E6%95%B4%E7%90%86%E6%95%B4%E5%A5%97%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>整理整套代码</h2>\n<p>以上所有学习途径自以为都交代清楚了，最后整合时用了 <code>for</code> 循环和数组的 <code>[start:end:step]</code> 分割（像数学上的区间表示法）来获取最近的固定篇数，完整实现这个「从 RSS 获取最近更新并以 Markdown 格式写入 README」的功能需要的代码篇幅很短，Python 真有趣！</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> feedparser\n<span class=\"token keyword\">import</span> pathlib\n<span class=\"token keyword\">import</span> re\n\nrssUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://blog.monsterx.cn/feed.xml\"</span>\nstartMark <span class=\"token operator\">=</span> <span class=\"token string\">r\"&lt;!-- posts start -->\"</span>\nendMark <span class=\"token operator\">=</span> <span class=\"token string\">r\"&lt;!-- posts end -->\"</span>\nNUM <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_readme</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> repl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Splicing complete regular expressions</span>\n    pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n        re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Get contents and rewrite README.md</span>\n    readme <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n    readme_contents <span class=\"token operator\">=</span> readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> repl <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> readme_contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch_posts</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    blog <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    posts <span class=\"token operator\">=</span> blog<span class=\"token punctuation\">[</span><span class=\"token string\">'entries'</span><span class=\"token punctuation\">]</span>\n    markdown <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span>\n    <span class=\"token comment\"># Fetch only 5 latest posts' info</span>\n    <span class=\"token comment\"># My post.published return \"Tue, 30 Jun 2020 00:00:00 GMT\"</span>\n    <span class=\"token comment\"># So I just intercept the middle part of the character</span>\n    <span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> posts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># markdown += \" ※ 《[\" + post.title + \"](\" + post.link + \")》\" + post.published + \"&lt;br />\\n\"</span>\n        markdown <span class=\"token operator\">+=</span> <span class=\"token string\">\" ※ 《[\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\"](\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>link <span class=\"token operator\">+</span> <span class=\"token string\">\")》\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>published<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br />\\n\"</span>\n    markdown <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\\n [Read more..](\"</span> <span class=\"token operator\">+</span> blog<span class=\"token punctuation\">[</span><span class=\"token string\">'feed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\\n\"</span>\n    <span class=\"token keyword\">return</span> markdown\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    postsNew <span class=\"token operator\">=</span> fetch_posts<span class=\"token punctuation\">(</span>rssUrl<span class=\"token punctuation\">)</span>\n    update_readme<span class=\"token punctuation\">(</span>startMark<span class=\"token punctuation\">,</span> endMark<span class=\"token punctuation\">,</span> postsNew<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按需小小修改一下，执行 <code>python this.py</code> 即可替换指定字符串之间内容为最新的博客文章。「自动」的事情依旧交给 GitHub Actions，设置自己点 Star 触发和定时执行即可。给出我的工作流配置 <a href=\"https://github.com/monsterxcn/monsterxcn/blob/master/.github/workflows/new.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">new.yml</a>，和之前打卡项目相同的原理。（看到这里的你也许有兴趣读读我之前编写这种定时工作流的文章 🤣。</p>\n<p>上面的定时执行工作流也许对于像我这种更新缓慢的博客来说有点浪费，于是我又写了个从「博客」仓库执行的工作流，这样只要「博客」仓库有文章更新就会第一时间更新 README！使用前先根据《<a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Creating a personal access token - GitHub Docs</a>》创建一个 Personal Access Token，要有写入仓库的权限。然后将生成的 Token 作为 Secrets 写入「博客」仓库。最后在「博客」仓库新建 <code>readme.yml</code>。</p>\n<p>由于我的博客仓库暂时没有公开（想到稳定两周年那天再公开，整点仪式感），所以直接将仓库里的工作流贴在这里吧。只需要将自己的站点发布工作流名称、Token 在「博客」仓库中的 Secrets 名称、README 仓库地址修改到下面 L10 L22-23 即可。</p>\n<p>编写参考 <a href=\"https://github.com/actions/checkout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@actions/checkout</a> 和《<a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_run\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Events that trigger workflows #workflow_run - GitHub Docs</a>》</p>\n<details><summary><strong>从「博客」仓库更新 profile README 的工作流 readme.yml</strong></summary><br />\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update README\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 直接使用 push 触发可能无法获取最新状态</span>\n  <span class=\"token comment\"># 这里设为在发布工作流执行完毕之后触发</span>\n  <span class=\"token comment\"># push:</span>\n  <span class=\"token comment\">#   branches:</span>\n  <span class=\"token comment\">#     - master</span>\n  <span class=\"token key atrule\">workflow_run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">workflows</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Deploy to OSS\"</span><span class=\"token punctuation\">]</span>      <span class=\"token comment\"># 修改为你的站点发布工作流 name</span>\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> \n      <span class=\"token punctuation\">-</span> completed\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.UPDATE_README <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\"># 修改为自定义的 Secrets 名</span>\n          <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> monsterxcn/monsterxcn     <span class=\"token comment\"># 修改为 README 仓库地址</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.x'</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pip install feedparser\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> python build_readme.py\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Commit\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.md\n          git commit -m \\\n          \":beers: Update from BlogRepo at \\\n          $(date +\"%Y-%m-%d %H:%M\") \\\n          \" --allow-empty\n          git push</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<blockquote>\n<p>我的 README <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> 使用了 <a href=\"https://github.com/anuraghazra/github-readme-stats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@anuraghazra/github-readme-stats</a> 展示 GitHub 账号的统计信息，使用了 <a href=\"https://shields.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shields.io</a> 和 <a href=\"https://simpleicons.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple Icons</a> 生成精致的图标。快来给自己也安排一个吧！</p>\n</blockquote>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>《<a href=\"https://docs.python.org/zh-cn/3/library/re.html#re.sub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">re --- 正则表达式操作 --- re.sub - Python 3 中文文档</a>》</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>GitHub 仓库地址 <a href=\"https://github.com/monsterxcn/monsterxcn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/monsterxcn</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>\n"}},{"node":{"title":"Mark 并调试 HEU 自动打卡代码","path":"/code/heu-auto-checkin-covid19/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/auto-checkin-covid19.a209973.c87091a851f8ca767e5cbc6ea41ac4d9.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/auto-checkin-covid19.a67b0b2.c87091a851f8ca767e5cbc6ea41ac4d9.png 480w","/assets/static/auto-checkin-covid19.a209973.c87091a851f8ca767e5cbc6ea41ac4d9.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e9f822d21a3f4fb948604bebd5e5f005'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e9f822d21a3f4fb948604bebd5e5f005)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAJOElEQVRIx21XWW8b1xXmD0lbicNluO8iKVLiNpzh7Jwhh8NNi2VqsyxZuy1brpfYlpLa9ZI6dpM0St04TaIoCWKrSWqgqJHABtrYTVsUbZ8KJH1o6vil7Q/ombnkiLYDXAwOee%2bc%2bc4531muCXNQsCzOgsPHdcm81VXAnCBT2v/OQq%2bdhJ/uAI97GLND%2b2l103DG6qLhPLxlximbm7G5aaQEZNzLdmQa97aVw3kkg2ZdZo2PwivoAPoJT7uHRQIsgIG2kGx8yGS8r%2bsqoEPGE/4HZLiX7usvclxVKTdKcoPlquGoAAd6bKSui0FK7B4GPmkARTIYCUqQKvRVENDnQHMHEL8H1M93A9VlbQvOG84CPZoSXbMJ7ekb5NOG%2bnlwdrCPK8nVqtqoq82a2lTK1UpZrapNhlFiCcHhZRAg4y1ArIMjkRlOP2%2bYhGTkewDdbQwyz9DThtiOA9MJMgnRM3wPb8Ey6aBZjTAOZBxjOAz30OEYVypVVaVWLlXLJRWeJVmFBUJNrecIudfeJgwC1E0SZIyuEIXUAMcYJLFo5MwjcLBrxARMNQLbDRqiqmOjDK8hChW%2bi2SML8RwXFmWFKlYKYplgZOkogLoZVhFBf4XRcXlA3x7Gg0KWbQ4dJJK872gsRE%2b5CyADB/SkspBpclRVpzKM%2bMUP1HgJ4KxMliiIdPNQ1iNpNKVkx1/tZWbEEe7SdYha8EfolmmKPAyLJoWSJIFG0ShBIvjJJ6XZakcT4o29x7vjTh0kkojjMWetTnzmD1rdRAYTlgd%2bV5r1hUArTNldY4Rp7LkEMm0iuVZWZ0lmJZVR2nG87iPt3t5DNgIkCCp2goLemBpFNjuHEAkY2EPuSGRJJkCT5Ecy4g0xazPHzizOCHyRbogqFKJoXmOFbNE8akERYHWZC2wJB4oYuRxc/8kFttvJ1atfcPmYM0arrPDzxcXbmQr6%2bmxl9O1s5nRy%2bTszTBxgBm/3EfN9iZmrMlpjDiGZdcsyRlbfs0crGrGuxjcx3UnVdsAg3AgtOPgogOhDElQilTK5uifnFn739/u/PXXb8y1RlJp%2bvqZlWFFJkkukxUQfUEXCrdFIwmqKgUMz9vDFYzdwLgfmdWfY%2bJFTN3qEa%2bERl4nxy4lx7eofReCynk7fdouvOjf91a%2bup6rnVJa59ziprVwEiucxphNa3rRVryIBVWLbgCqrR2mMCajfoELYQ/QoIqOewWrc3BiSP3y1vWGWv3xidXPt69%2bfX976/wPi4L874e3NlZnMlk6n29HoKt6UEaV0JQ7aSCPPToEXsdcLOYtOiIqWzoUTQ0R4lwstz%2bYbNClBYKdcidGUlSr3FyRq/MDhaket2j1l2x9Q5hHxMINi78MRcXc1anaOQBFqqvdsEZpg/9dvkyRF/7%2byavXNo9f3zz%2b1f33vnl4%2b%2b72te2fvvjowYfnT6yAAam04A0JhhdQghrVoy07KbsLGJWH1LQ4SLubrg0tFZVZSZnhpalqc2lpZXN%2b6RzIsjrHFqcbo6usOPk9cwZOOr2MlgPge9RSOwYg2FoOoFQwzNATEZ0jzXbCbA0fX5j86t7OF7tbQKHHf/rVvx7eevzH3TtvXqpXqgTBuwO0xYiAkzI7nqjcbTOg/thBWx4AAQ6woVJfqNTm4SlVZgX5wPDYWnN0mZOmy9V5SZkbGTsMpen7WAYw6DGkjEqDFKL2iqqt6YnK3dXewQyKa01NLy4tr23fvPH7OzuP/nDr0Ze3v3l46z9/%2bfgXV84GwmQswds97eINueXw0IFg4dnKjfsFZ7iMByRPrO7uq7r6VL6yINTXxPqRJLEvSU2W64tS80g0O0aJM5lCi5QXs8yEO1aHk3Z/0e4TvDHI4DzWrpac0eMgJUzGl/TCx6GpBswQpKGpmcXRiTlWbg5PLt77ZOfxgw%2b/vr/z7cOP/vvn22PN1nOWrDvIId%2bDj3vwAjHIVmihF6c6DR9GIwYc7x8cG1RODpaO9RfX0tUzcX45X1pqLr9WmdwsT54vz13Pq8fokXOUerQ2taHsPzO08npSPjogr8e4ZXe0BqUp09hwBEsQQMsz/DR1t/pOHLTy5/EnfJHBaIoJxHLTc6t3t6//8/Ob337x/j/u3jy1vNqLa0FEvtc6oM6NMkkLObbX0RmNtNbD9dpy3sQwMXohQs700YeSpXUABH5VZ6/w6jLfONo4fIOvHZH2nWbr68XRU8PLr8qTF%2bLiWpicCeWmPRElMLgvxq9aPRyut2EjsKghmIyURRuY1goYX7wZjJe8wf5gdDAYzx04dPiDl09/9trRt186OToyHklIKUIdzCqGpyECQoYa4ahGgRqIUUZb0Pzipl0h2R2t%2b1P7cZ/gDsnOSKXHmnVHymL5oFxfATMEdUlUDgnVZbm2mCLHHCEFmAasg5M2DwfQ7eBZvTV1T25oNDIZVcmi93xvtB4aHIvnD/ZT833pMW8o7fRGhvYffPfyiTePD3t8EXcg3j%2bQSedIilGhB4ObgTMeL1mlciqZq8Mzn4UJ74mZGaoz1AMbAZ%2bAhgpsRtSCA30JpcC10vnhXGEsS44EoqUeWw56MOw6NKAUAto986KJwehaJmN8gL7jjTXC6YlwajyUaoVTrUh6KpxuOXypgli9cGz%2b7DifSiatzgCGe%2bKJtC8M9wStfAH74xFCzaVKmZSSS0nplM2lzVddo1FB73SCkWydTkfBJIeQgfADK2HzMF3jzN5YuRfqPQoBPxngsJYD%2bhhI4j7JGxvyRJvw9KEVH4bljlSSWfHqqYVXDpdvXz0aCEVd3mA0KVjdWusF6gPpE305aTAmDCSkdJJJDlidT1Xk9oxt3DTad5fO/IyuTU81EJRjhu91hFx310LeaVchrYsFSvaggsMKVfCQ6gipzrDqCNecweLsSOql5w99en3%2bd2%2bdfePapc2NF5ojS8HEcK9LfA7LAbJAWKAGiFIuxQ/EiWh/Z37WJzknZVy7UMbD9No1Mz/T9cC7XWMl6gBP3jf2ulb7QoPuRFaPYHELFnh6RIu3aIXlk2x%2bqQfPk3l%2b%2buDyyuLqvbcvPvjtx7vvv/PZpx/t7rz7wsbFc6c3f7n1s92dd36z%2b8F7W9f4gX4iEnJ5SGdANCb%2b7gvXdxLD2LVrFGpfUMHBXXc91pgdwObuwP4fenLbqpcgDcYAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"date":"April 5. 2020","timeToRead":15,"cjkWordCount":3549,"cjkReadTime":11,"description":"找资料逛博客的时候碰巧进入了一个学长的博客，发现了懒人福音的自动打卡 Python 脚本。本文记录 Python 萌新的调试过程（造轮子不行，用轮子一流..","content":"<p>最近这几天又不知道干点啥，天天上课累死了，前面的还没掌握就又要接新的知识，真是太难了。心血来潮想好好学一下 JavaScript 什么的前端基础，找资料逛博客的时候碰巧发现了一个学长的博客，看到《<a href=\"https://zjw1.top/2020/03/10/auto_checkin_during_covid19_and_cas_sso_learning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">疫情期间自动健康打卡暨 CAS 单点登录认证实践 - SiteForZJW</a>》这篇文章，常年起不来床的我赶紧点开了，啊啊啊我为什么没有早点发现这种好东西啊，生气。</p>\n<p>第一次看的时候了解到这个 Python 代码要自己先手动执行一边获取表单数据。Emmm，那是啥，好像不太了解呢，先 Mark 了！</p>\n<h2 id=\"python-和依赖\"><a href=\"#python-%E5%92%8C%E4%BE%9D%E8%B5%96\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python 和依赖</h2>\n<p>什么？你说这个年头还有人电脑上没装 Python？なんと！</p>\n<p>Windows 系统直接上 Python 官网下载安装包，注意将 Python 安装目录添加到 PATH 环境变量，一并安装 pip。如果运行时显示缺少模块就 pip 安装一下。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">python <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">--upgrade</span> pip\npip <span class=\"token function\">install</span> requests lxml<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h2 id=\"获取-form-data\"><a href=\"#%E8%8E%B7%E5%8F%96-form-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>获取 form Data</h2>\n<p>今天早上起来的出奇的早（7 点半我就醒了），一想到学校的打卡十点前就要完成，我突然想到了那个自动打卡、表单数据的事情。于是我点开了浏览器开始尝试。</p>\n<p>打开 <a href=\"http://one.hrbeu.edu.cn/infoplus/form/JKXXSB/start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">网上办事中心 - 平安行动</a> ，虽然不知道是啥，但 F12 肯定会告诉我的。选择 Network 栏，网页从打开这个菜单后加载的所有请求都会在这里显示，先刷新一遍网页，找了一遍好像什么也没有（一开始我以为表单数据是缓存下来的什么东西），Emmm，提交一遍试试，点完确认提交之后 Network 最下面显示了一个新的名叫 <code>doAction</code> 资源，那一定就是你了！<strong>注意此时不要点确定，点确定之后该资源会被刷新掉。</strong></p>\n<p>好的，<code>Form Data</code> Get√ 。选择 <code>view parsed</code> <code>view decoded</code> 就能看到这个表单的所有数据，也就是之前 Python 自动打卡需要自定义的。完整存好 <code>formData</code> <code>boundFields</code> 的内容。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1901 1000' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b614ee0887ec85536d75e1e090ff7ac9'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b614ee0887ec85536d75e1e090ff7ac9)' width='1901' height='1000' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAIAAABgN0jYAAAACXBIWXMAAAsSAAALEgHS3X78AAAK70lEQVRYw6WZSXYbuRmAeZ3cLDfINjlBbpBN1v2y6SyyS%2bclrx2727baMiXKokSyyJrJmlFzVT7gJ8vU1O2n/IYhAIVC/fMAztI0LQ34vp9lGQN6P/DzokjiOAxDzw%2bCIAyDINaQTFDX9TiOQ9/neRZFUdu2evoN0Pf9M6vj2Js2nB1SqKKpmht/ecijNz%2b%2bORgwaMSgXRRFnucz0OUPE3CdVkGIPo5iqGJ3FMX7MBT09f80pVNKVVVVVhU7mUI50/oF4JHK81Lxr5Rdsl%2bfUJZ121a23S1uhtvb%2bu5erxhIUv0VN/KTLFmtVqAnBEgPqnx3VtYNpzR13TYNvW5NAzv5S88mz3N93zsYHkMYp3OoYOC6LociIE40O72nqHNabmDn2ksn8uIi9BzX87ScfR%2bugYTjOOnbd9vF8n65yd7%2b7N7ducHZoySFfRweGibyIYiRp5wwU0mUZekhS/mj%2bzSNTmB4H%2b2BMARFxocTyIZpUTZP68fXzTPZgNzyjx%2b3y9tby1n5iWPvQMi2bVgAKpzufrxY/PDm6l/v/J8/WKsVTPE9nw3b7RaMYRY9jBO5lYaDHHtxcTG7DIrV0mqWy3q1Lpd3uWXlRYlO6VboVohWZfkDMHonQ9n39VFx9mKhzEArW7rZxPt9VhRZ1SqDDQ9gDjRAjGXvoGq7WTuet7PtwNeWxzoSEMZPfAkNMID9PJ397rvgT3/5T7a6/u/i4%2bZuoX58yzfyLDvDU%2bVlmaPrrCszliljVeinelAe14sTVQa5rWUhAmQNAegZK2hOqo0oNaaUwuP1em1ZFtjsD4ftdhcGoTwSUYfafQQiXl6nF8XbG0A/Z398n/7tHxf9zWd/MU%2bv5/Wny7SslBGXbgysrbq6VpeXKgjUxlK3S3XzRc3nyrGVZSnH1Yv3K724WKj9QWWFvAsVYaStUEg6nAEYi%2bWABOjCaTZ0BrA0qIXO1oAsMmVRntKLcI2h1jO81i6q5qvDxsnWTrIKy6Tqy6ZXx9aptFDBQbmBypSKUnVI1D5WXqjXaSzGmV5kj79XRaXqTt4t2z4oWtxibTwVHx4N4B/BBmc6nsC4j3qashOyjWs9AlNx0wLiu2Q86/oeAi638W2Q3Qb5Fy/Lqw4CqnaoWk1J2Y3lMLK9GcZqGItuVL2elt1wbEx7s2cwi00vrWr6MKsH8z0wEPc/0TARcI7oOTxaf2k642%2b0T8LtbrfdblYr%2boyPg6gqq1oPun7oup6Wppn2AW1fN8z51%2btH0psNuumVYwPhSLUTAY9iGWw%2bRbDxPMAJWr0BGeheH/Zgp7yuCWDNjbP1dovFoo7Iumq1rNHi5kysQJamOlwYksZvg6Q8EoDKovdoPJRI6KRnEWeywTvFMe4Sw2WVqeO6bMNSsVd24mpwqffLJSdoH3AG%2bIAZdIRRjmUnOfpcZkWZVl3dDXy57QcGU%2btAfRjzWut30z149Gxjz774KgGw53siCmEwA/DDgrEBesll8P9QB4N5ixW8aRln74Lbv2%2bskWBrLFtCrZg7KjQc9uluvblfrTcby7YdDJeMpNH2ruU2NYIqK6DVQsfZ%2bkuNPfGZCh20l9zCzsnBT%2bEPC2ZqWRvmt24aJqprdfwG/8RkL1GRbbOsa5rqlJhImIcLWoWCVG22W9/zcNtaT4yGwIbqZOkCfAm96l6lQpMEQFSw3%2b12koBABvxmBeXB/185mZ/wXYRTQKqoHBkJR3UnmNwrMtQEeHG%2bsZ2Ntb27X/vhHk8Ciq1p50YpUyy8brX8u99qj4wYAohZ4E3opdea7fvoMevwkpW7uzsyj8%2b7xInyvmuJZuxEDsQ8PEpU6DytfioBiIgOWegFLpINQuIhoV7jqjX%2bSIY0%2bE5T2sP2Xf/g0bONPYeHKiTYIwF6o96BZL5wFHqQD9Z9lMDQaxUyEoBI8LXzpjyp/mQDRgKjNuLtBheqQUut1iEDMs9jh/ZCRMcG7r9ShfAquxNgDKJOnAlhIMQiLgi8iEhuXKAmqBOk8iJpEC79Jqq7dtDR10S9xoCxgXFwD%2blqs1mv6DZkGWXTSvCrH7pR/YH6NQTUJnAKAZIPa4%2bJvybDM9k4qIht4GDndhIkahw6Qo6k0OiYTgqr%2bvvgYl8WPc7nAQHD4McYseP6QZzmeKCs6rSr6Uesuem%2btta40aLWUbbtHjx6trXajTbiD1KTpYOl5JW4FhhPLxKAr%2bBK2o2uz3fpfZDbUSFCk/pLVylt8/Zg40gHbBhFmFQIj4cN7F3P1Rm4Dxm5DlamxsNhnzXjGEcMoNHudeh/q2nrUo3RvVTcJZEIIaM/lgEsQeoNRM0i/rKsmis7uXHT%2bS7Bx7qOg%2bgQka57qzrKa1KtWNVxcazmjirkHdLl3d1yufxyc8MHdBzQbMsfqRAYoAqviMSiQvAbFaKf/KAEMghgyuE6eDXtjYMEirsgPwYyeIovUgWn/RjNf3/z1z98TP88L%2bHQZMSj5R3watQX%2byAgnSeIsigyOsdGdE7cyyuMGGaLBCR5lvobesCPDdi0mMfO8Q5JRoEB2UEQIhnZX9UVuv%2bd9%2bYqpixVVh4Q7U8S2CNinCf5Y6eqNlEtSoQYdL7Qfm1YBS2velX3Tfvg0bONPfv8AQHgKpVAaGpcAAIYwynXALZ969EyzEBKcMxGS94UA5Itjv3ol4fvg/dhlZ1sIMoIY9RF641l2U5hVEi/0Pei99LMQt8YHz%2berb/UgPhMAkms8zY4LeWYVAjihdBVaMK9w/drO1362cIheCnfeCFA9PkYxTDoSucUH%2bJ122kJjPY%2bvb1fWZgRbu76uix0BqHtRqlzfeCgV6cSYOP4e4kAkgVBg9x6MAYtpKGvO6oaI1646bW%2bi0gxAB7JBYTEL4HK3KFUta6ZdD1woJLa7drddvx8OSwWVdX8Ck4mSL/GBnZuKEkENIC0aIUYsSRzWDoEzO104WZXtibAM%2baBiB4RUBsCMIuyk1QiyqsoJdcEdSwhqztKlvL2Xl3dVMFe58akIQ0hsMP/FmVTVhSjenrspbX9o9a0/T5vhlMFSBFSnYCpVJhTaQJOUqyYdH0oGr0ublCQfqZkMzd5s6HvDmVHzmKS%2bFF/m1y6KJOfPux%2b%2blD/89/1/bp%2bf1FfzmtrV3%2b%2bqq9v6l8%2b1x9/qT/N6/l1fXNbf/pcOx5v/Xo9UD0EuSArT3C8vSP8m1u2XntasvdO0p7mZZjhlIu6i4qGAJGUTWparur0l3n0/iK9t0gD4ziPU1276zYNkkKPiypOizivdHx52CIOKTVf9bWUKnAmGPHO5O34IhSJKUq1PYEoGCmSFGLnUDwHysAsSvI4Saoi4itJmodRhhf2oxQ34MRFQswrz0B4pnthnjqulOqlJgm9fEwHLFQ7y1mW257GcFjb5ROZnAvqKcjVC/YzC%2bLG38dj45E/BWn5xc2CrCKS/3y/f7cMg7QypfT4/4DUxOQFO9v59GX9ZaVjkySkJNdIAwuW3G7ylZJiyMXRU97jISHecdzFYjHDPZt5pu%2bsKR2yhAm9ytOSWiKOOUJqP4FpLJfsMpju/aZ70nMwV8JKXxJ7rr3bOvZufwKTouJYbXNR1UyZFJizHzp523idampMiwLfRcnvkf/PzDVeSr4lBX9iIgu8oZiAPeTslFFTKcgjvoqOSg0uK1KjsGe6ypRLhwn0jwlV9Q1yPC%2bovxVmjy4qBJInIJzmkVibCPH4i8H5zx4Gzo%2bShJl%2bupB6ekX19G7r7HePF2gdjnv%2bBzaCWi%2bQr5yGAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1901\" alt=\"Network\" data-srcset=\"/assets/static/heu-checkin1.82a2fbd.2e35e2c967dd8ae72bbd6d3ad3bee786.png 480w, /assets/static/heu-checkin1.cbab2cf.2e35e2c967dd8ae72bbd6d3ad3bee786.png 1024w, /assets/static/heu-checkin1.eaff22a.2e35e2c967dd8ae72bbd6d3ad3bee786.png 1901w\" data-sizes=\"(max-width: 1901px) 100vw, 1901px\" data-src=\"/assets/static/heu-checkin1.eaff22a.2e35e2c967dd8ae72bbd6d3ad3bee786.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/heu-checkin1.eaff22a.2e35e2c967dd8ae72bbd6d3ad3bee786.png\" width=\"1901\" alt=\"Network\"></noscript><figcaption>Network</figcaption></figure><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1901 1000' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0de6a417156f0b67252112b29abcd96b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0de6a417156f0b67252112b29abcd96b)' width='1901' height='1000' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAIAAABgN0jYAAAACXBIWXMAAAsSAAALEgHS3X78AAAM8UlEQVRYw7VYV3fbyBXmr8pz/kZe8ivyZFuyZKqwNzSCdFzkLiWbbPZ4rbU3Ttl4Ja3tldWLxQ4SBNgAkiBBgqLyzQxFU267zjm5uh4PLmaIe%2bf2cTWbzQ6FSqXSarW63S5GOm83TaNarWp6BWO1UjVN0zAMjM0mBtO27eFwOBgM2u12o9Ho9/t4PP0l%2bBVL3oFlWT27d6Kn663G%2bto6vl6v1/EtykPTouACu2wGJhkVFKxrUbY0Ta/Xsa2Bt2ynYZARAJl7vR7EgAB4hOSY9z4BeNO1rG6XrhpRbLZ%2bPA76/dOBw970KbDDVetlo2Vk0hkwBh4gBhsZqy671%2b/Sn8SG8ffYvO84VqdTLpc1TYNIIGJk0uIb%2bOlSqYRvVKpERRADKyk3I2ScYVebQrFcSqkNzbCqmlrWdHxb13VshFJLJRULlHItU9TaVkcrE8ArnIuqlltmixiCpsEuwDq%2bns1m2Vv8gguG0iY2AU6oZZjNMTZbLRCxp1FvGA0YT9MwqBEZbNnIotgugGFc3H7%2bg/S8zPbWlpJKpZVyTjfVUlHTdcgPtqrVGrjRde1tXjvM4bFeyOd1CligKMU2ZOp0ICFYxwRKZCdYq9W2t7ddR4XyUa5YhqT4U9XSp6BYPJ/QOcMRqASL9NUk4NdUtVgs4kv4XjObaVQqZqttdnrtdosZAFjHKpx3oVBQi0qxkFPpFhx2tVKBKvBQr9cMdnJ0xBYYAiaQsFhUXL%2bZuvXbP4QFWZgO%2b/xCTI7HRYBEkYEkibIsJhIiXjHEI3D8OEnEYrpXikscFwuFgqFQ6LvV7%2bCRcCZogoQLsN4m3ONMYZ75PJhXdL2C9wVFgUKgYcNs1qE606w2DOp%2bxH2xAIiVRLxqDc%2bOc%2bb6vf/W7y4HJZHzhQOhaETguRjHx2I8x1GMcZzPx127xl29ygUCnMfDzc1zbjc3M0PoHi/n9xPi4iIhYlkoRLbQvbEYFwxHQ8Hg6uoqnMGsN6iGobo3hfzLamW3qu9W9J1adR/Y6WTtbs62c3Y3a9v5jvnWLm93q/u2umW10x0rY1npdivV7WTZI9Du5rvtddc3X60EIpw7JPqikjcqAqNCnJdkXopTlHkIFAjxvgDP8XwkyocjfCjMB4J8lCMYAzFG6MEQIfICL7LtshCXoVlQ/v79951up2Y3ETB6tlWrHmm6iojSbhtATJrNOhABvNtpkjDebZqFbPXJt9nnz5tPv6vVdaMBJejlsoJlcI16TW82q4iCfeuOa3l5eSEQnfFG5oIxdyDm9kdjgiSIcUGKC6JMJnFZkBNCIililBN8PMGTSZLQJ5ERJbrlHMO8BKmfPXvWd/rtfuf0DDBoNQtFhCTiI2XqRypMCIHJcU4RP3s9B46KmJHbP6zlFMdsOgOSP84uAvLJcHg27P/NtbKy4vcHQ16v1%2bdbXFz0eb1EACnO4SwF/B%2bXpBFGcd4Awpk0Jn4E4yMERPg4bIkI0O8j5dEP900jVyyq8E8qAzErxCJEK8dxWNi1rDZimFavVUyzXKupGmKrdfY%2b0NNwvoYAy55gxOPzxaIRADwPDijLsgBbEIRkMpFIyAyj0Ygo4qzluBwfEz%2bDyYQcE98JkM/nNRL%2bkYeyxRJyS1lRFBARcyAEYi4TAKedzedLBwfFV6/L2zulV68r%2bQJi1sB5D3rw4IH9ZyKALxgOhsI4X5x6DChIOGZIIQKl%2bBglOQEiR99O0j%2bDEZjQuQA06uGwi7VqqqRq4BgRvT0BLHueDgYZpZB9%2biz3/fPc2lp%2b9bvq3r5pWQbNJhOASNppm/dHJuT3eBZgQIvQhA%2b%2bC9YlArACeYw0ohLrEi/SL6D8DgGIB0wAnBiiIbISHLFaOVFVEuIRDTUKbAJ5sAwFVSabRc1wZveGnc7Q6qDeGp6dfc6EfKEoPCAQCHi8nlgsKlFWOBIM%2bUQyObaJcDgMFyB6AGsfM5oEyBOYlOXYRQGIs6oFCMB8gGUlJHpkOigEGkC%2bgwml02lkibNfgAkBvCH4AHTgnV9YROIhIYX6Y0IUExjHKJIRaSouShfoFIm1TXjwuRNLYwGQd6CBUqlQq6XLZVIF4cgHE4A1kAECZDKZLxJgxR8II4kFggQhAAdL4YWV6Zkl9/ztmWu3Z90jvDa3dG3uxoz75oz7HZHirVn33WtzD6dnPyMA04Bpoi7IQYBU6gQZGI6BOgJOzEpGxCJw9T8IEPJ7vcQFFhZCwQB8IMkLd2fdN%2b/effTw4QOGDx7cu0/gHsUHF%2bHhw4e3bt26755PxJnxE0hcNCFoAE6s66pRz4Bb/LESDUDLCwLQCXzgS01oxRMIL0IA6sXhYJAIIIg3pqaPUynotUm7nFFR/7GKH4aLn1pfX7s5fTUpy58RAGWPomTLWiqbQwBFNihCA%2bAVZsNCI%2buKvlQDy16SB/z%2bQDAcQeAmwTse429enc0oikN7AMbipwCfpAKsJy9PydKFyItMjFLiyZMnOAK4rFIstpqNulFAHkASgAmxH%2b%2bfA8sDX6aB5ZWVQCAcIQ4QDASCGDkR1YJ4%2b%2bpsVlHG/H3yZ4bDhtXDZGNj44%2bXp5PxxDikIpRG%2bTjS%2bbePH8M8mAkVChlNPUAFncsSYH3SuJcifdlgAAFgV19kQiEYz/z8vNvt9ngWmQn98fKVVCZD1vSd4eAUreyHeHZ6ihIhp7cg4k/razeuTF0nhvNxE0L5C1%2bFCRlmXtOrhaKSpU7MehTwjbNn5caXmdCfVlYW/UEUQlwshvNH9EfRluCFpVl38s6dew8e3Ll/n%2bESHW/fu7d07/6YeBcO/fDBvYcPkjdu3p2bT37aiVFCIAop%2bYy29UPqx43Uv39Ira2l0um3FBCIyM1BpYKckM5kINOvEWDYpxrw%2bsOwfqRYXkQdKkVRrnHCyqWpG9Mz1y9duX55ahLlS1cSly5QkpcI3p6aWb48TWrYCQy/KyWcXFFHHlBgQj%2buHn/z5PirvxZfrBWKaiEPZ4A/l3K5PLCQL6CRY6r4ZQ0M/kIEgA9ABahHPUCUEsgDOEdRTIridUkaIxIZKHBSTCbpDJPIZZIkfyIK9ZEHarSh0dRG6ofKv76u1naM%2bn61sqNrW/Xabr22V6/u1qo7qrZTUrea7fTAyfd7uYFTGPTzTj9/eqoML2DhbKhb5qORD8yTOsgT9noj12YFjo/LCVgUSgk5CbdMMCQ5DtW0nEDrOCZOonwRLphQv1/RNWSsAjLWxnqnWHDOhk6/h%2b6yUa/1el209QOnB2fYV%2bpHqoER5Roq7narWdHLdbrGtjtA9PTdbsfuWkbX3j84pInMF0B/KHq9yenp6263iE4kfl7gjKqeBGMPxTUt5EaUcRE0WvmpWujpU2cwQDFJ%2bn6EzzdvUFK0WlaP3LhY6G8dZ4BmF9HC7jlvy61MxTout9C%2bgVir1YHw88FwSDLFYABl9h1SdzT7zvHh8SiMimHU%2bhJpYUQJDQGqiQvWLL6bcAJ1lXevJIrx96x/wge4Z8%2bfo5iurW8oGxuF/7xQ19a115uljQ39501zd097%2bdp%2be6L8uN4%2bOLSO3m6/2D7a2N39cdvY2Suubxg7u%2bWXr%2bo/b9qFQo82DOwGDXG31u1uHu67VpaXA1EUmQmBdrFkpDkITu2bXxDnFgT3nHBlSpieETxe4eqsMOsWrs4Il6fIOHONvJ2%2bKnh9dO%2bHAsTR4z/75z97ubzx93%2bU19bL/3nR3d2zd/fZ2H6zBcG6O3v1n17Zu3ud7d3Mi83c2mZh7Y29d2BtbTd%2bemW%2b/tne2u4dHFKrG8GpMzB77RO96Fp%2b9CgS49D7RXgxyosxNgoSMBrj0UaiX49EYhEyGSMoHEE2x4i2nhc/RPwINPD06VN8slYuF1IpNZslFymptJJK59%2beaAhA6Uz%2b5ARjKZtV0mk9n0eSa1eryHxWvdFpGFajYZ3fCI6hTS%2b5%2bnbPdefuvVAoJPJRgeejsVgoEo3GuGAk6g9F/WHwzwnEsAQ6ok2mKEwgP0H/ANGUootYXV11SKdrwXbrZstsWTCCaq3WME1q0ATsCSftdO3u%2bQUliOw6rkM5HgOsqNVu6RXddfPuo0V/4LoURGgJRfm5ABeKCbO%2b6KWF8KX5cDCGtjgpj/IrHd%2bPNufEj7Y4ySREZy0luRNSy3sn%2bZMsajitSC8kUEJjgsiE2mFUMlJgXQ69zHr/7AH0GtPA3uPjY9edO0uhUBCnjo4%2bFo3y%2bBeNYBS4GBBPEQrRc/jwcUz8EPDK7/c/fvwYZ8yKfmQytUQuGxkg9SoUiH5oKcoAfLMOAWvGV9njC21ICzrKEKRw19LSEr4RiYQZhNDb%2bEl3BiL6Y2S3hfl5D57JtQtKVn8wGGSvJsFPtnjYerSm4XOADKBAAHbff/Z/ABcqp4ODg8NPw%2bTbo6Ojly9fbm5uYnL4qwGfwJkNJ%2bC9avzDgvejKz%2b65r%2bQKjzVgMzXLAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1901\" alt=\"doAction - Form Data\" data-srcset=\"/assets/static/heu-checkin2.82a2fbd.a282637541e4f36d4a8e50f3a438dbec.png 480w, /assets/static/heu-checkin2.cbab2cf.a282637541e4f36d4a8e50f3a438dbec.png 1024w, /assets/static/heu-checkin2.eaff22a.a282637541e4f36d4a8e50f3a438dbec.png 1901w\" data-sizes=\"(max-width: 1901px) 100vw, 1901px\" data-src=\"/assets/static/heu-checkin2.eaff22a.a282637541e4f36d4a8e50f3a438dbec.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/heu-checkin2.eaff22a.a282637541e4f36d4a8e50f3a438dbec.png\" width=\"1901\" alt=\"doAction - Form Data\"></noscript><figcaption>doAction - Form Data</figcaption></figure></p>\n<h2 id=\"调试\"><a href=\"#%E8%B0%83%E8%AF%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>调试</h2>\n<p>表单数据有了，开始调试 Python 。</p>\n<h3 id=\"邮件提醒\"><a href=\"#%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>邮件提醒</h3>\n<p>源代码最后的发送邮件部分需要自行引用发送邮件的 <code>.py</code> 文件，但是谷歌找到的好几个 <code>sendmail.py</code> 补上去之后都有奇怪的报错，比如 <code>if</code> 条件右括号报语法错误，我明明是直接复制的啊 QaQ ，看了好几遍也不应该有错啊（后来发觉可能是 Python 版本问题）。最终我索性直接搜 Python SMTP 的用法，找了一段代码补上去。</p>\n<p>在 Linux 下试运行的时候发现打卡段没问题，但是后面邮件发送这段报错：</p>\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"checkin.py\"</span><span class=\"token punctuation\">,</span> line 151<span class=\"token punctuation\">,</span> in &lt;module>\n    smtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> 25<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 25 为 SMTP 端口号</span>\n  File <span class=\"token string\">\"/usr/lib64/python3.6/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 336<span class=\"token punctuation\">,</span> in connect\n    self<span class=\"token punctuation\">.</span>sock = self<span class=\"token punctuation\">.</span>_get_socket<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/usr/lib64/python3.6/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 307<span class=\"token punctuation\">,</span> in _get_socket\n    self<span class=\"token punctuation\">.</span>source_address<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/usr/lib64/python3.6/socket.py\"</span><span class=\"token punctuation\">,</span> line 724<span class=\"token punctuation\">,</span> in create_connection\n    raise err\n  File <span class=\"token string\">\"/usr/lib64/python3.6/socket.py\"</span><span class=\"token punctuation\">,</span> line 713<span class=\"token punctuation\">,</span> in create_connection\n    sock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>sa<span class=\"token punctuation\">)</span>\nTimeoutError: <span class=\"token namespace\">[Errno 110]</span> Connection timed out<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>搜索了一圈发现 Linux 下 SMTP 发信加密程度要求更高，所以得加密发信，将原来的发信替换为 SSL 加密发信：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">smtpObj <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP_SSL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nsmtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> <span class=\"token number\">465</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 一般加密发信 smtp 端口号为 465</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>在 3.7 版本以上的 Python 中需要此脚本时必须使用 <code>smtpObj = smtplib.SMTP_SSL(mail_host)</code> ，否则邮件发信会报错 ValueError 如下：</p>\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"/home/Project/Python/HEUCheckin-2018041015.py\"</span><span class=\"token punctuation\">,</span> line 170<span class=\"token punctuation\">,</span> in &lt;module>\n    smtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> 465<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 加密时 SMTP 端口号为 465</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 339<span class=\"token punctuation\">,</span> in connect\n    self<span class=\"token punctuation\">.</span>sock = self<span class=\"token punctuation\">.</span>_get_socket<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 1042<span class=\"token punctuation\">,</span> in _get_socket\n    new_socket = self<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>new_socket<span class=\"token punctuation\">,</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/ssl.py\"</span><span class=\"token punctuation\">,</span> line 500<span class=\"token punctuation\">,</span> in wrap_socket\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>sslsocket_class<span class=\"token punctuation\">.</span>_create<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/ssl.py\"</span><span class=\"token punctuation\">,</span> line 1031<span class=\"token punctuation\">,</span> in _create\n    self<span class=\"token punctuation\">.</span>_sslobj = self<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span>_wrap_socket<span class=\"token punctuation\">(</span>\nValueError: server_hostname cannot be an empty string or <span class=\"token function\">start</span> with a leading dot<span class=\"token punctuation\">.</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关闭代理\"><a href=\"#%E5%85%B3%E9%97%AD%E4%BB%A3%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>关闭代理</h3>\n<p>本地调试的时候，由于我平时习惯开 Clash 代理挂着，没注意这个，结果就报错了，信息如下：</p>\n<details><summary><strong>Python Traceback</strong></summary><br />\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 665<span class=\"token punctuation\">,</span> in urlopen\n    httplib_response = self<span class=\"token punctuation\">.</span>_make_request<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 421<span class=\"token punctuation\">,</span> in _make_request\n    six<span class=\"token punctuation\">.</span>raise_from<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"&lt;string>\"</span><span class=\"token punctuation\">,</span> line 3<span class=\"token punctuation\">,</span> in raise_from\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 416<span class=\"token punctuation\">,</span> in _make_request\n    httplib_response = conn<span class=\"token punctuation\">.</span>getresponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\http\\client.py\"</span><span class=\"token punctuation\">,</span> line 1322<span class=\"token punctuation\">,</span> in getresponse\n    response<span class=\"token punctuation\">.</span><span class=\"token keyword\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\http\\client.py\"</span><span class=\"token punctuation\">,</span> line 303<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">begin</span>\n    version<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> reason = self<span class=\"token punctuation\">.</span>_read_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\http\\client.py\"</span><span class=\"token punctuation\">,</span> line 272<span class=\"token punctuation\">,</span> in _read_status\n    raise RemoteDisconnected<span class=\"token punctuation\">(</span><span class=\"token string\">\"Remote end closed connection without\"</span>\nhttp<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>RemoteDisconnected: Remote <span class=\"token keyword\">end</span> closed connection without response\n\nDuring handling of the above exception<span class=\"token punctuation\">,</span> another exception occurred:\n\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\adapters.py\"</span><span class=\"token punctuation\">,</span> line 439<span class=\"token punctuation\">,</span> in send\n    resp = conn<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 719<span class=\"token punctuation\">,</span> in urlopen\n    retries = retries<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\util\\retry.py\"</span><span class=\"token punctuation\">,</span> line 436<span class=\"token punctuation\">,</span> in increment\n    raise MaxRetryError<span class=\"token punctuation\">(</span>_pool<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> error or ResponseError<span class=\"token punctuation\">(</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nurllib3<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>MaxRetryError: HTTPConnectionPool<span class=\"token punctuation\">(</span>host=<span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> port=7890<span class=\"token punctuation\">)</span>: Max retries exceeded with url: http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>cas<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn/cas/login?service=http%3A%2F%2Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn%2Finfoplus%2Flogin%3FretUrl%3Dhttp%253A%252F%252Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn%252Finfoplus%252Fform%252FJSXNYQSBtest%252Fstart%253Fticket%253DST-3779417-6SDr7iRPSkJxSd3MFyNd-cas01<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>org <span class=\"token punctuation\">(</span>Caused by ProxyError<span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot connect to proxy.'</span><span class=\"token punctuation\">,</span> RemoteDisconnected<span class=\"token punctuation\">(</span><span class=\"token string\">'Remote end closed connection without response'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nDuring handling of the above exception<span class=\"token punctuation\">,</span> another exception occurred:\n\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"d:/workshop/PythonProject/CheckIn/checkin.py\"</span><span class=\"token punctuation\">,</span> line 61<span class=\"token punctuation\">,</span> in &lt;module>\n    response302 = sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span>=user_form<span class=\"token punctuation\">,</span> headers=headers<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 578<span class=\"token punctuation\">,</span> in post\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span>=<span class=\"token keyword\">data</span><span class=\"token punctuation\">,</span> json=json<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 530<span class=\"token punctuation\">,</span> in request\n    resp = self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>prep<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>send_kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 665<span class=\"token punctuation\">,</span> in send\n    history = <span class=\"token namespace\">[resp for resp in gen]</span> <span class=\"token keyword\">if</span> allow_redirects <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 665<span class=\"token punctuation\">,</span> in &lt;listcomp>\n    history = <span class=\"token namespace\">[resp for resp in gen]</span> <span class=\"token keyword\">if</span> allow_redirects <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 237<span class=\"token punctuation\">,</span> in resolve_redirects\n    resp = self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 643<span class=\"token punctuation\">,</span> in send\n    r = adapter<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\adapters.py\"</span><span class=\"token punctuation\">,</span> line 510<span class=\"token punctuation\">,</span> in send\n    raise ProxyError<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> request=request<span class=\"token punctuation\">)</span>\nrequests<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>ProxyError: HTTPConnectionPool<span class=\"token punctuation\">(</span>host=<span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> port=7890<span class=\"token punctuation\">)</span>: Max retries exceeded with url: http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>cas<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn/cas/login?service=http%3A%2F%2Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn%2Finfoplus%2Flogin%3FretUrl%3Dhttp%253A%252F%252Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn%252Finfoplus%252Fform%252FJSXNYQSBtest%252Fstart%253Fticket%253DST-3779417-6SDr7iRPSkJxSd3MFyNd-cas01<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>org <span class=\"token punctuation\">(</span>Caused by ProxyError<span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot connect to proxy.'</span><span class=\"token punctuation\">,</span> RemoteDisconnected<span class=\"token punctuation\">(</span><span class=\"token string\">'Remote end closed connection without response'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>报错一大堆没怎么看懂，<code>ProxyError</code> 看来应该是代理问题，可能和主机的网络设置有关系，没有深究原因，所以解决方案就是 <strong>关掉代理</strong> ！</p>\n<blockquote>\n<p>尝试了在运行前用 <code>export</code> 或者 <code>set</code> 命令设置 <code>http_proxy</code> <code>https_proxy</code> 代理，也一样无法使用。</p>\n</blockquote>\n<h3 id=\"结果判定\"><a href=\"#%E7%BB%93%E6%9E%9C%E5%88%A4%E5%AE%9A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>结果判定</h3>\n<p>调试时还发现个问题，原代码打卡出错的判定有缺陷，只报 Python 脚本出 Exception 时的错，而提交表单时可能成功提交，但是返回的不是打卡成功，而是打卡失败。那么如何判断打卡提交正常但是打卡失败呢，这里关注返回的数据 <code>response_end</code> ，用 requests 库转换成 text 后的 <code>response_end.text</code> 缩进一下长这个样子：</p>\n<pre class=\"language-json line-numbers\"><code class=\"language-json\"># 成功时\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errno\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ecode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"SUCCEED\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"entities\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"stepId\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"办结\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"autoStep1\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"flowStepId\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"executorSelection\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"posts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"parallel\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"hasInstantNotification\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"hasCarbonCopy\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"entryId\"</span><span class=\"token operator\">:</span><span class=\"token number\">2797847</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"entryStatus\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"entryRelease\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n# 失败时\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errno\"</span><span class=\"token operator\">:</span><span class=\"token number\">22001</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ecode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"EVENT_CANCELLED\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"发生异常\\n\\njava.lang.reflect.InvocationTargetException\\n\\tat sun.reflect.GeneratedMethodAccessor457.invoke(Unknown Source)\\n\\t...\\n\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"entities\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到返回的字段中 <code>errno</code> 为 <code>0</code> 代表成功提交，剩下的 <code>ecode</code> 显示 <code>str</code> 型的状态，<code>error</code> 只有出现错误时才有，包含了所有的错误信息，这个错误是在学校服务器上报的，不是本地脚本的问题。<code>entities</code> 包含成功提交后的一些数据。那么这就用 <code>errno</code> 来判定远程提交后返回是否成功。先使用 <code>json.loads()</code> 将其转换为 JSON 格式，注意在返回的数据中 <code>errno</code> 字段为 <code>int</code> 类型，<code>entities</code> 字段为 <code>list</code> 类型，发信的 <code>msg</code> 要用 <code>str()</code> 转换这两个数据。</p>\n<p>实现代码如下：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ......</span>\n\n    response_end <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>submit_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>submit_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    resJson <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response_end<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form url: '</span><span class=\"token punctuation\">,</span> form_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># print('Form status: ', response_end.text)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Status: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form stJson: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取表单返回 Json 数据所有 key 用这个</span>\n    <span class=\"token comment\"># print('Form stJsonkey: ', resJson.keys())</span>\n\n    <span class=\"token comment\"># 加入远程提交返回结果判断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Succeed: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡成功 &lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>submit_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"stepId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">>'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t表单状态: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Error: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡失败！校网出错'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t错误信息: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n:.:.:.:.: Except return :.:.:.:.:'</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Python Error: \\n'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> <span class=\"token string\">'打卡失败！脚本出错'</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t脚本报错: \\n\\n\\t'</span> <span class=\"token operator\">+</span> err<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好啦，现在就差不多完美了，唯一美中不足的就是没有加入 <code>retry</code> 的功能，还不了解这个怎么实现，有空可以试试。</p>\n<h2 id=\"完工\"><a href=\"#%E5%AE%8C%E5%B7%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>完工</h2>\n<details><summary><strong>修补完整的 auto-checkin.py</strong></summary><br />\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n<span class=\"token comment\"># -*- coding: UTF-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\n平安行动自动打卡\n\nCreated on 2020-04-13 20:20\n@author: ZhangJiawei &amp; Monst.x\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> lxml<span class=\"token punctuation\">.</span>html\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> smtplib\n<span class=\"token keyword\">import</span> traceback\n\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Accept-Encoding\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"gzip, deflate, br\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zh-CN\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"max-age=0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"MESSAGE_TICKET=%7B%22times%22%3A0%7D; \"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cas.hrbeu.edu.cn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Referer\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://cas.hrbeu.edu.cn/cas/login?service=http%3A%2F%2Fjkgc.hrbeu.edu.cn%2Finfoplus%2Flogin%3FretUrl%3Dhttp%253A%252F%252Fjkgc.hrbeu.edu.cn%252Finfoplus%252Fform%252FJSXNYQSBtest%252Fstart\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Upgrade-Insecure-Requests\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362\"</span>\n<span class=\"token punctuation\">}</span>\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"studentNumber\"</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\"># 学号</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"password\"</span>                      <span class=\"token comment\"># 教务处密码</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">findStr</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\ntitle <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#get</span>\n    url_login <span class=\"token operator\">=</span> <span class=\"token string\">'https://cas.hrbeu.edu.cn/cas/login?service=http%3A%2F%2Fjkgc.hrbeu.edu.cn%2Finfoplus%2Fform%2FJSXNYQSBtest%2Fstart'</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin to login ...\"</span><span class=\"token punctuation\">)</span>\n    sesh <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    req <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url_login<span class=\"token punctuation\">)</span>\n    html_content <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>text\n\n    <span class=\"token comment\">#post</span>\n    login_html <span class=\"token operator\">=</span> lxml<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>html_content<span class=\"token punctuation\">)</span>\n    hidden_inputs<span class=\"token operator\">=</span>login_html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">r'//div[@id=\"main\"]//input[@type=\"hidden\"]'</span><span class=\"token punctuation\">)</span>\n    user_form <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> hidden_inputs<span class=\"token punctuation\">}</span>\n\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span>\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"captcha\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'登 录'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Set-cookie'</span><span class=\"token punctuation\">]</span>\n\n    req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'https://cas.hrbeu.edu.cn/cas/login;jsessionid=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"JSESSIONID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">?service=http%3A%2F%2Fjkgc.hrbeu.edu.cn%2Finfoplus%2Fform%2FJSXNYQSBtest%2Fstart'</span></span>\n    response302 <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>user_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    casRes <span class=\"token operator\">=</span> response302<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CAS response header\"</span><span class=\"token punctuation\">,</span> findStr<span class=\"token punctuation\">(</span>casRes<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Set-Cookie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'CASTGC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#get</span>\n    jkgc_response <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>response302<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#post</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'*/*'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jkgc_response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Host'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jkgc.hrbeu.edu.cn'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Referer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jkgc_response<span class=\"token punctuation\">.</span>url\n    jkgc_html <span class=\"token operator\">=</span> lxml<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>jkgc_response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    csrfToken <span class=\"token operator\">=</span> jkgc_html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">r'//meta[@itemscope=\"csrfToken\"]'</span><span class=\"token punctuation\">)</span>\n    csrfToken <span class=\"token operator\">=</span> csrfToken<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">]</span>\n    jkgc_form <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'idc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'JSXNYQSBtest'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'release'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'csrfToken'</span><span class=\"token punctuation\">:</span> csrfToken<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'formData'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'_VAR_URL'</span><span class=\"token punctuation\">:</span> jkgc_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'_VAR_URL_Attr'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'ticket'</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'.*ticket=(.*)'</span><span class=\"token punctuation\">,</span> jkgc_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    jkgc_form<span class=\"token punctuation\">[</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>jkgc_form<span class=\"token punctuation\">[</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    jkgc_url <span class=\"token operator\">=</span> <span class=\"token string\">'http://jkgc.hrbeu.edu.cn/infoplus/interface/start'</span>\n    response3 <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>jkgc_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>jkgc_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#get</span>\n    form_url <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response3<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    form_response <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>form_url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#post</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json, text/javascript, */*; q=0.01'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Referer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> form_url\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'X-Requested-With'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'XMLHttpRequest'</span>\n    submit_url <span class=\"token operator\">=</span> <span class=\"token string\">'http://jkgc.hrbeu.edu.cn/infoplus/interface/doAction'</span>\n\n    submit_html <span class=\"token operator\">=</span> lxml<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>form_response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    csrfToken2 <span class=\"token operator\">=</span> submit_html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">r'//meta[@itemscope=\"csrfToken\"]'</span><span class=\"token punctuation\">)</span>\n    csrfToken2 <span class=\"token operator\">=</span> csrfToken2<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">]</span>\n\n    submit_form <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'actionId'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># boundFields 修改位置</span>\n        <span class=\"token string\">'boundFields'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fieldCXXXdqszdjtx,fieldCXXXjtgjbc,...'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'csrfToken'</span><span class=\"token punctuation\">:</span> csrfToken2<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># formData 修改位置</span>\n        <span class=\"token string\">'formData'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">r'{\"_VAR_EXECUTE_INDEP_ORGANIZE_Name\":\"学院\",\"_VAR_ACTION_INDEP_ORGANIZES_Codes\":\"xxxxx\",...}'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'lang'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'nextUsers'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{}'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'rand'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'remark'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'stepId'</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'.*form/(\\d*?)/'</span><span class=\"token punctuation\">,</span>form_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'timestamp'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    response_end <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>submit_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>submit_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    resJson <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response_end<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">## 表单填写完成，返回结果</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form url: '</span><span class=\"token punctuation\">,</span> form_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># print('Form status: ', response_end.text)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Status: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form stJson: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取表单返回 Json 数据所有 key 用这个</span>\n    <span class=\"token comment\"># print('Form stJsonkey: ', resJson.keys())</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Succeed: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡成功 &lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>submit_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"stepId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">>'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t表单状态: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Error: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡失败！校网出错'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t错误信息: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n:.:.:.:.: Except return :.:.:.:.:'</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Python Error: \\n'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> <span class=\"token string\">'打卡失败！脚本出错'</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t脚本报错: \\n\\n\\t'</span> <span class=\"token operator\">+</span> err\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n:.:.:.:.: Finally :.:.:.:.:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">## 发送邮件</span>\n    <span class=\"token comment\"># import sendmail     ## 这个是普通.py文件，不是Python库</span>\n    <span class=\"token comment\"># sendmail.sendmail(title, msg)</span>\n\n    <span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> MIMEText\n    <span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>header <span class=\"token keyword\">import</span> Header\n \n    <span class=\"token comment\"># 第三方 SMTP 服务</span>\n    mail_host<span class=\"token operator\">=</span><span class=\"token string\">\"smtp.exmail.qq.com\"</span>                 <span class=\"token comment\"># 设置 smtp 服务器</span>\n    mail_user<span class=\"token operator\">=</span><span class=\"token string\">\"example@example.com\"</span>                <span class=\"token comment\"># smtp 发信邮箱用户名</span>\n    mail_pass<span class=\"token operator\">=</span><span class=\"token string\">\"emailpassword\"</span>                      <span class=\"token comment\"># smtp 发信邮箱密码</span>\n    sender <span class=\"token operator\">=</span> <span class=\"token string\">'1@example.com'</span>                       <span class=\"token comment\"># 发信邮箱显示</span>\n    receivers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2@example.com'</span><span class=\"token punctuation\">]</span>                  <span class=\"token comment\"># 修改为收件人邮箱，多邮箱以数组形式写</span>\n    message <span class=\"token operator\">=</span> MIMEText<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token string\">'plain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    message<span class=\"token punctuation\">[</span><span class=\"token string\">'From'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Header<span class=\"token punctuation\">(</span><span class=\"token string\">\"1@example.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\"># 发件人邮箱</span>\n    message<span class=\"token punctuation\">[</span><span class=\"token string\">'To'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  Header<span class=\"token punctuation\">(</span><span class=\"token string\">\"2@example.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># 收件人邮箱</span>\n    subject <span class=\"token operator\">=</span> title\n    message<span class=\"token punctuation\">[</span><span class=\"token string\">'Subject'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Header<span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># smtpObj = smtplib.SMTP()              # 使用一般发信</span>\n        <span class=\"token comment\"># smtpObj.connect(mail_host, 25)        # 不加密时 SMTP 端口号为 25</span>\n        <span class=\"token comment\"># smtpObj = smtplib.SMTP_SSL()          # Python 3.7 以下版本 SSL 加密发信</span>\n        smtpObj <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP_SSL<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># Python 3.7 及以上版本 SSL 加密发信</span>\n        smtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> <span class=\"token number\">465</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># 加密时 SMTP 端口号为 465</span>\n        smtpObj<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>mail_user<span class=\"token punctuation\">,</span>mail_pass<span class=\"token punctuation\">)</span>\n        smtpObj<span class=\"token punctuation\">.</span>sendmail<span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> receivers<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>as_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Success: The email was sent successfully\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> smtplib<span class=\"token punctuation\">.</span>SMTPException<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: Can not send mail\"</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>合理地偷个懒，需要修改的地方都在代码注释里了。</p>\n<h2 id=\"定时任务\"><a href=\"#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>定时任务</h2>\n<p>要想让代码实现自动打卡，还需要另外设置定时任务，Linux 可以用 <strong>crontab</strong>，Windows 可以用 <strong>任务计划程序</strong>。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># Linux 下添加 crontab 定时命令，每天 8:00 执行打卡并输出日志到 .log 文件</span>\n<span class=\"token comment\"># 建议先运行测试是否可行</span>\n<span class=\"token comment\"># python3 auto-checkin.py</span>\n\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span>\n<span class=\"token number\">0</span> <span class=\"token number\">8</span> * * * root /path/to/python3 /path/to/auto-checkin.py <span class=\"token operator\">></span> /path/to/checkin.log\n<span class=\"token comment\"># :wq 保存并退出</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Windows 下按 <code>win</code> 搜索“任务计划程序”调出菜单，然后在右栏选择创建基础任务。跟着创建基本任务向导的指示一步一步来就好了，「触发器 -> 每日」设置时间推荐避开 6:00 腐败街预约打卡的高峰，8:00 就不错。「操作 -> 启动程序」的程序或脚本项按下面格式填写。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 870 686' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-779ae8e1118617cc54ca7e07fec05044'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-779ae8e1118617cc54ca7e07fec05044)' width='870' height='686' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAyCAIAAABj4UpDAAAACXBIWXMAAAsSAAALEgHS3X78AAAJVElEQVRo3u1Z%2bW8T2R13pf4d/R%2bqrfpLValdtVLbpb9UVaU9tGUFXdgSYHcrLW23QAMsbAjsbrqlkIUcEAhJ7CR2nDjxFdtx4tvja%2bL7Gp/je2Y84yuJ3e/MkEADm4SqglDlo%2bdvXt68mfc%2b73uOLcBxnKhUcvl8gUWxXC6XOBQ5VPcrKA75fF5QLhUUC3P3RseGh4eW9CtWq0WjWdRoFxcXVSarvdPptNvtzv5Dq9VKJBK1Wk1AUdVas1NrtGimtra2Xq/Xq1W62Ww2Go1Waw3239mXgGNdX19nGEZAV1IbuK6IhaulPH%2bl8yqAtwtWA0zOnV36q0E1Ew14YYgol7NZvFQuJRIYdIql8n4nQNN0LJk3mAyxWBSGnIhFMiNVyGdHHjwQTk7JFMqN9v4mwPkyHo1GwaNZ52g2wbDWWq16vcHUau39b0IQknYINe12%2b9UgsLGxwQ%2b1n8KrQeDlbqW941X%2bcPlpW33oPCJQqVTgD0gwegD0OR9Y2xWt1lZnD7OfdT8PXv98H4YhBUGHlWxnbcsunpCPiYEDC9wu%2b8jIgy%2bvXfv6X7empyZVKsXdu3dDkRhEJ2BF7IBKpcwBprEfDsTeQJIkxAwcz0HhYjIa7A4n3Asj2WwW1oUOW9EUS0SFsFvZqKhfXhYKx01m8%2bDgoFgsVioUoskpWAzqIEEqlSoU8pCWE1gin8/BI5KpFNy/6w5IggBdVWmaokiwQ1gYKpS97J7VOUP/44vev3x69sqVyx8c%2b8PxE13nzp873919/tzfpTOSj06f7L5w8dSpk2PCqXmx6Fe/%2bOVnly6//uMfdX1w/Afff%2b3QG4eOHH7v8LuHs7liPpcTmA3Lg4NDkxPj/bcH8HwRtgF62Xl5mmH8qOf%2byL2RERD3Bu8MSGUyjVpttTm25myT20CRxPjY6NS0RCgSoasogtiX9Xqj2ex0Os1mE8BoNGq1ukg0ZvU4J2RzOjtiRd2LZuPA6OiIWDolXxDKZEWayYEGQsGAHUHisVggECyVK%2bzB7sEACrmcd3U1FA4HAgGv1xfH4hiWgMzNl4o0zYAE/cBZMAzoBrRE8RUkb3VQ7XLVJEmyE1hADQbuRzN0bRONep2CG43m5ry8Kluoy1VNuWpNpakvKJh5OSWWkk4XXigIMtnsWquhVMjVWh2GJakqtaspA4FkKpHJZjAsHo5EstkMns1GIuFQMAiWCFSAFVzy%2bXzpTCYYDEGOB2PNsMhuum6rwZaL4KvNeoOLHptg/wE%2bNF1nmAZNZ776Ojwn887LzA8fmsYm7KLJsFIV1S1FRFOl4RG8XBZkWQJNC2jOYoFlYHO7EoCji8Wj4XDY6UBA3Q6Hw%2b1B7Xab2Wxxu12I0%2blxe/x%2bv9vlXFpaslhsTodj1et1uZweFN3gogeHda49C53OOkzrdCAopceFGEUag75BqeTu7JxIr7fE4vFmPZZKFUXTuWJR4PV6dfqVQDhSpWtgQKUKsXOrcGYNugctg97ZwrvOgj8%2bhoEoTPM%2bDYYBFkJzoDjLgk9lL9CvVBWqqlpDq7XlP/05030J77mOX%2bnNg/y8N3O5J9NzLX3m0/Kt2zhBCHwuq1wiRBFLs1ppMSS09RrZaVBPtzYna1XWhgr5XCgUisdjIEEVYCRgMOFwFKwEgmDliai6bW87hyeCpkkMy/fdSK4YUhptXKXOLRsyClVWqS7rlxOy%2bYxCmZyXl/SGnFhCPBjDSyXBhBnr1RWGrMUBI/7Alhu15m7qs1fVmd7F7e26JnNRkTaECq06HY2GxyfGp6ZEQ0ODA4PD6kXV3JxUOCVRKuUWqx1sbO85YRsBIhItDgy73C63YQW1mH0IYtMvozZ7OhJxGk0ukwm12TwIgsjmidFxHEzoN/9EBb93v9YX/eGN2E/64z%2b7g33vYlBwzPOdE6jgj//RvtuFCg67r8nTnSZZJiiwmhqXt3lrgS4J0ZEkd80hO8cHoljMPxRVpmWEZIGckVem5wjxPLTS1CwpWYAOKZkvT8sK94Vl7RJeKgr6lOF3xxJHx2NHJrD3hYljosRRrvN0Oy5KvDOKyTy59TqNxWOLGvXSkt4M7m82Ly5qDIYVjweNxbH/8vg3EwhE2ygkYpJiSwy%2bdth8r20/0a%2bvtwt0LYdnBeFVRDZ5XyuXrtepTpMz9%2bazWxtki2KqBFWlY%2bHQjHhapV70B/1Op2NlZVmj1ax6/eAG5LcQgJqDKzseFSD8dreKka0%2bBEEsk8%2bWqGp9jaq1oBF0g2SaJN0gNhsMFsl6oUywiSyOJeKJJJZMFUpEqcy24o6tzIUhiCr8iz/NJiyaC0h1mvu641uPlqpC7IIpYGwg%2bXAMT6huJj8wRzb9gRtAKKeqBFmFtUiKrjVaVaYOEhpTh7zRpNgFm2C6kAMEEDf4TPm8ut46uV0jDFyC58fj8XQqHY1ELFZrLBYvlkp4NiOVSiFjYBgWCvo1Gg1iRxwOF%2bTpVDIRDoWgSAv6fbe/6dfpdDdv3Xo4Ojp0p//6l32zM5K%2br/r8wUgJfCCdTj/v7p8XwLRRr1397MKp0x%2be677w4emTfzt7bk42399/8%2bKlS1C0dZ04cbWn58wnn5w9233mzJmJ8fHens%2b7uk7euPVNwOf99aE3enp63nz77cNHjr71u9/%2b9PWff/zxR2%2b%2b9Y7JaofDeREE2OhCEN5VFHK2B12FQsPtdoP6ggHInxE/ZBD24%2bPGPaFwJOBbFYslapVSrVlKJuJKlcqwsuJ0o3bEPiuRjI0LdTot1JHhSLRQKL4gAgCGcxT%2bhYmNuSTJ8CG4xmyBvboZlLnUTUNIAGfjwzVI/nUHngPykQ%2b8MAJP%2bskOlfaTE55O5I%2biFlfPwhGwLzQvjMD/HLDtAwIHBA4IAIFU6kADBwQOCBwQOCBwQOCAwAGB/xcClT2Pv2QC3E88j%2bTjEZKsUgS1bZCTVfIx%2bEvwzpnL5V4aAVg3lUqlOXA/HWTgv3wmZY/kZ5CU1pvV%2bnIaL842H77gzrjjhUwqkUgm4S54Fc5k0slkMhKJvBwCcIrRaGQVRW1mq9OBKJWK6WmxVDqXSiaMQXxWrnFYzUsa9cyMRCad8TjsjtXgih9PxKKxWPTe8PDIvRGT2QIH4PP7XxoB9susUNBmtaEoiiCI1WozW6xwxkBAYw%2b6vEGtCWGb0W51%2bQxozBTMJbEY3IXY7frlZY8HBVUEAoF/A7plcjGZ2sWXAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"870\" alt=\"Windows 定时任务设置\" data-srcset=\"/assets/static/heu-autotask.82a2fbd.22a101484c9f4d4a1d03d2ac7783f0f0.png 480w, /assets/static/heu-autotask.ae085b2.22a101484c9f4d4a1d03d2ac7783f0f0.png 870w\" data-sizes=\"(max-width: 870px) 100vw, 870px\" data-src=\"/assets/static/heu-autotask.ae085b2.22a101484c9f4d4a1d03d2ac7783f0f0.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/heu-autotask.ae085b2.22a101484c9f4d4a1d03d2ac7783f0f0.png\" width=\"870\" alt=\"Windows 定时任务设置\"></noscript><figcaption>Windows 定时任务设置</figcaption></figure></p>\n<p>Okay，睡个回笼觉庆祝一下 🥳..</p>\n<blockquote>\n<p>查看《<a href=\"https://blog.monsterx.cn/tech/modified-github-actions-4-heu-checkin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">照葫芦画瓢 · 编写 Actions 打卡工作流</a>》了解 GitHub Actions 版本。</p>\n</blockquote>\n"}}]}}},"context":{}}