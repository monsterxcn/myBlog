{"hash":"deb9433ee9013e64b7a9d412e6f40c89c2070a9e","data":{"category":{"title":"code","belongsTo":{"edges":[{"node":{"title":"NoneBot 插件编写尝试","path":"/code/experiences-4-nonebot-2/","cover_image":null,"date":"August 22. 2021","timeToRead":24,"cjkWordCount":2792,"cjkReadTime":9,"description":"实在是受不了这种书看不进去无所事事的日子，于是给自己找了事情忙活。","content":"<p>放假在家本来打算看看考研的书，结果硬是只看进去了一丁点皮毛。实在是受不了这种书看不进去无所事事的日子，于是给自己找了事情忙活。之前一直在用 <a href=\"https://github.com/Tsuk1ko/cq-picsearcher-bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Tsuk1ko/cq-picsearcher-bot</a>，上半年尝试了解了一些 Telegram bot 的东西还顺手给 PagerMaid 修了一个简单的插件 Bug，最近放假发现了好多好玩的 QQ 机器人项目…… 这些让我想自己写个机器人玩，于是便有了下文。</p>\n<h2 id=\"go-cqhttp-和-nonebot\"><a href=\"#go-cqhttp-%E5%92%8C-nonebot\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>go-cqhttp 和 NoneBot</h2>\n<p><a href=\"https://github.com/Mrs4s/go-cqhttp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mrs4s/go-cqhttp</a> 是「使用 mirai 以及 MiraiGo 开发的 cqhttp golang 原生实现」，在酷 Q 倒下之后感觉撑起了 QQ 机器人的半边天，在很多项目中都能看见他。通过 go-cqhttp 的各种 API 接口，开发者能使用 Node.js Python Golang C 等各种编程语言处理机器人收到的信息（Event），做进一步响应。<a href=\"https://github.com/nonebot/nonebot2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nonebot/nonebot2</a> 便是一个能和 go-cqhttp 对接的「跨平台 Python 异步机器人框架」。</p>\n<p>看了几遍《<a href=\"https://v2.nonebot.dev/guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">概览 - NoneBot</a>》后，我觉得 NoneBot 是一个很方便的平台，有自己的脚手架可以快速创建项目；它的商店里所有插件都可供学习，Python 实现的机器人也有很多源码可供参考，官方文档没看懂可以找些大佬写的例子看看；上半年有一小阵子折腾 Telegram bot 时看了一些 Python 的代码，了解了最基本的插件是如何工作的。这些经验让我决定了使用 nonebot2。</p>\n<p>go-cqhttp 和 nonebot2 的安装和配置均可参考对应文档。最终 nonebot2 的项目文件夹可以通过 <code>nb create</code> 快速创建，nonebot2 通信协议 Adapter 选用官方维护的 <code>nonebot-adapter-cqhttp</code> 即可，使用 <code>nonebot_adapter_gocq</code> 可能会存在兼容性问题。go-cqhttp 的反向 WebSocket Universal 地址需要配置为 <code>http:///[HOST]:[PORT]/cqhttp/ws</code>，其中 <code>[HOST]:[PORT]</code> 和 nonebot2 <code>.env</code> 中的配置保持一致，我尝试填写别的地址时连接不上。先登陆一次 go-cqhttp 生成 data device.json 等文件夹和文件，启动机器人时先使用 <code>nb run</code> 或 <code>python3 bot.py</code> 启动 NoneBot，然后进入 go-cqhttp 文件夹下启动 go-cqhttp。在 NoneBot 输出中看到 <code>WebSocket Connection from CQHTTP Bot NNNNNNNNNN Accepted!</code> 就算成功！</p>\n<h2 id=\"虚拟环境-venv\"><a href=\"#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-venv\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>虚拟环境 venv</h2>\n<p>初次尝试 NoneBot 后我发现通过 <code>pip</code> 安装插件的方式虽然方便，但是很容易出现依赖版本冲突，这时候虚拟环境就显得很重要。这也是我第一次尝试虚拟环境。NoneBot 推荐使用 Poetry，但我用了下不太习惯，尤其是最新版本的 <code>nb-cli</code> 创建的项目文件夹中 <code>pyproject.toml</code> 依赖却是低版本的。最终我还是选择了 <code>venv</code>。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># 安装 venv</span>\npython3 -m pip <span class=\"token function\">install</span> venv\n<span class=\"token comment\"># 在 /path/to/thisvenv 文件夹下创建一个虚拟环境</span>\npython3 -m venv /path/to/thisvenv\n\n<span class=\"token comment\"># 进入 /path/to/myBots 文件夹并启用虚拟环境</span>\n<span class=\"token builtin class-name\">cd</span> /path/to/myBots\n<span class=\"token builtin class-name\">source</span> /path/to/thisvenv\n<span class=\"token comment\"># 启用后命令行前会多出当前虚拟环境的名字</span>\n<span class=\"token punctuation\">(</span>thisvenv<span class=\"token punctuation\">)</span> user@host: myBots$\n\n<span class=\"token comment\"># 使用 pip 安装各种依赖</span>\n<span class=\"token comment\"># pip install -i https://pypi.tuna.tsinghua.edu.cn/simple packagename</span>\npip <span class=\"token function\">install</span> nb-cli nonebot-adapter-cqhttp\n\nnb create\n<span class=\"token builtin class-name\">cd</span> abot\n<span class=\"token comment\"># ...</span>\nnb run\n\n<span class=\"token comment\"># 退出虚拟环境</span>\ndeactivate<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果创建虚拟环境时使用 <code>python3</code> 那么在虚拟环境中 <code>python</code> 和 <code>pip</code> 也都指向最新版本。在整个项目完成后可以生成当前环境中各种依赖版本：</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">></span> requirements.txt    <span class=\"token comment\"># 备份当前的依赖版本</span>\n\npip <span class=\"token function\">install</span> -r requirements.txt  <span class=\"token comment\"># 安装指定的依赖版本</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"第一个插件\"><a href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>第一个插件</h2>\n<p>根据《<a href=\"https://v2.nonebot.dev/guide/creating-a-plugin.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">创建插件 - NoneBot</a>》的指导并参考众多 NoneBot 插件做法，插件目录一般为 <code>src/plugins</code>，在其中创建一个文件夹或单个文件都可以被 NoneBot 加载为插件。</p>\n<p>我的第一个插件是用于获取 Epic Game Store 限时免费游戏的，因为某天打开群时看到有人说 <a href=\"https://github.com/DIYgod/RSSHub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@DIYgod/RSSHub</a> 的 Epic <a href=\"https://docs.rsshub.app/game.html#epic-games-store\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">免费游戏</a> 不能用了，我第一感觉就是他懒没有自己部署罢了…… 我自己去部署了一下果然还是好使的。看了看这个路由的 <a href=\"https://github.com/DIYgod/RSSHub/tree/master/lib/routes/epicgames\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源码</a>，感觉还挺好玩的。于是决定将他改成机器人插件。</p>\n<p>这种插件的形式是检测到符合要求的命令之后，向某个网站 API 发起 HTTP 请求，根据返回的信息（一般是 JSON）处理之后返回给用户。机器人的大多数功能都可以通过这种形式写出来，因为网上各种可供调用的 API 实在是太多了，什么搜图、翻译、段子、涩图、天气、查快递都有（好像混入了奇怪的东西）。@DIYgod/RSSHub <code>/epicgames/freegames</code> 路由的实现方法特别之处是向 Epic 的 GraphQL 服务器发起 <code>query</code> 查询请求，我见得少觉得很新颖。</p>\n<p>NoneBot 最大的特点就是「异步」，所以发起 HTTP 请求的方式不推荐用 <code>requests</code>，自带的 <code>httpx</code> 或者 <code>aiohttp</code> 都是很合适的异步网络请求工具，这里给出改写后的 <code>httpx</code> 实现。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># async 定义一个异步函数，NoneBot 中插件的函数大都以此定义</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_Epicgame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 发起请求的地址</span>\n  epic_url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.epicgames.com/store/backend/graphql-proxy\"</span>\n  <span class=\"token comment\"># HTTP 请求的 Headers</span>\n  headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Referer\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.epicgames.com/store/zh-CN/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json; charset=utf-8\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\"># 要发送的 JSON 数据包，query 部分不完整</span>\n  data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"query searchStoreQuery($allowCountries: String, ... \"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"variables\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"allowCountries\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"category\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"freegames\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"count\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"country\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zh-CN\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sortBy\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"effectiveDate\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sortDir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"asc\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"withPrice\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"withPromotions\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\"># 使用异步 API 创建 Client，HTTP Headers 可以在此传递</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 通过 json=data 的方式传递上面定义的 JSON 数据，发起 POST 请求</span>\n      res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>epic_url<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># res 为获取到的数据，通过 .json() 转为 JSON 数据</span>\n      resJson <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># 简单的挑选响应结果中有用的部分</span>\n      games <span class=\"token operator\">=</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Catalog'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'searchStore'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'elements'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">return</span> games\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样一个简单的能执行 HTTP 异步请求的函数就写好了，在调用异步函数的地方使用类似 <code>res = await asyncFunctionName()</code> 的语句。为了测试这一函数是否可用，我通常会将其单独拎出来，放在下面这样的文件中单独执行测试。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> httpx\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> httpx<span class=\"token punctuation\">.</span>AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.example.com/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># return 改为 print</span>\n\nasyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>像这种获取数据供插件使用的函数 NoneBot 推荐写在插件文件夹下 <code>data_source.py</code> 里。在其他需要的地方通过 <code>import</code> 导入。关于 <code>httpx</code> 的更多操作可以在《<a href=\"https://www.python-httpx.org/quickstart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">QuickStart - HTTPX</a>》中查找，现学现卖完全够用。</p>\n<p>回到此插件，获取到 HTTP 响应的数据之后还需要挑选其中有用的部分，我这里获取的 JSON 数据包含了拥有折扣的众多游戏信息，为了挑选出其中的限免游戏我写了另外一个函数 <code>get_Epicfree()</code> 放在 <code>data_source.py</code> 里。这里讲个插曲，写完获取数据的函数后我才发现 python 原来已经有写好的包可以直接用 <a href=\"https://github.com/SD4RK/epicstore_api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@SD4RK/epicstore_api</a>，而且这个包里给出了更多 <code>query</code> 查询语句，免费游戏的例子他也写出来了。好家伙，处理 JSON 数据的逻辑我直接照搬，省下了大把功夫。</p>\n<p>这样 <code>data_source.py</code> 的大部分功能就完成了，接下来新建 <code>__init__.py</code> 文件，这里将告诉机器人插件何时响应用户，如何响应用户。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> nonebot <span class=\"token keyword\">import</span> on_regex\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>typing <span class=\"token keyword\">import</span> T_State\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>adapters<span class=\"token punctuation\">.</span>cqhttp <span class=\"token keyword\">import</span> Bot<span class=\"token punctuation\">,</span> Event<span class=\"token punctuation\">,</span> Message\n\n<span class=\"token comment\"># 导入 .data_source 里需要用到的函数</span>\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>data_source <span class=\"token keyword\">import</span> get_Epicfree\n\n<span class=\"token comment\"># 注册了一个事件响应器 matcher，这里只要符合正则就响应</span>\nmatcher <span class=\"token operator\">=</span> on_regex<span class=\"token punctuation\">(</span><span class=\"token string\">\"((E|e)(P|p)(I|i)(C|c))?喜(加一|\\+1)\"</span><span class=\"token punctuation\">,</span> priority<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 事件响应器 matcher 的事件处理函数</span>\n<span class=\"token decorator annotation punctuation\">@matcher<span class=\"token punctuation\">.</span>handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> Event<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 异步调用 data_source 里的函数</span>\n  <span class=\"token comment\"># 我的 get_Epicfree 里调用了发起 HTTP 请求的 get_Epicgame 并处理出最终的消息文本</span>\n  imfree <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> get_Epicfree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 有的时候需要使用 Message() 将对象转换为可用的消息对象</span>\n  msg <span class=\"token operator\">=</span> Message<span class=\"token punctuation\">(</span>imfree<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 事件响应器的 finish() 结束事件响应，此外还有 send() 等可用</span>\n  <span class=\"token keyword\">await</span> matcher<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此，一个最基本的插件就做好了。重新启动 NoneBot 后启用此插件。关于这个插件的所有代码均可在仓库 <a href=\"https://github.com/monsterxcn/nonebot_plugin_epicfree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/nonebot_plugin_epicfree</a> 查看。你也可以通过 <code>nb</code> 或 <code>pip</code> 安装 <code>nonebot_plugin_epicfree</code> 体验。</p>\n<h2 id=\"pillow-画图插件\"><a href=\"#pillow-%E7%94%BB%E5%9B%BE%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pillow 画图插件</h2>\n<p>很多时候咱有发图片的需求，比如「无内鬼，搞点…」什么的，其中图片除了像第一个插件一样通过请求 API 返回图片的 URL，有的时候可能还需要添加一些细节。比如 <a href=\"https://github.com/Xtao-Labs/PagerMaid_Plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Xtao-Labs/PagerMaid_Plugins</a> Telegram 人形自走机器人插件仓库中的吃 / 丢用户头像功能，需要获取用户的头像然后自行拼接到背景图片上；又比如我想做一个原神每日素材的功能，事先准备好了各种素材对应角色或武器的图片，希望机器人来处理拼接这些图片成为当日素材。</p>\n<p>这里就以原神每日素材的功能需求为例，交代我的实现方法。@Xtao-Labs/PagerMaid_Plugins 中的功能可以作为进阶操作，我自己也照着原仓库代码改写出来了，但是代码理解的不够深，就不拿出来献丑了，说不定什么时候没人我就悄咪咪传到 Gist 存个档留念。</p>\n<p>各种素材图片来源于 <a href=\"https://genshin.pub/daily\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">今日素材表 - 可莉特调</a>，我通过 Chrome 开发者工具中 <code>Ctrl</code> <code>Shift</code> <code>P</code> 调用 <code>[Screenshot] Capture node screenshot</code> 手动获取，算是个笨办法了。将每种素材对应截取一张图片，3 个区域 18 种素材 18 张图片，分别命名成 <code>{区域名}.{星期数}.png</code> 的格式。我还另外截取了「今日素材可升天赋角色」「今日素材可突破武器」两张头图，命名为 <code>header.png</code>。</p>\n<p>接下来编写 <code>getMaterial(type)</code> 函数用来获取包含了 <code>type</code> 对应头图和蒙德、璃月、稻妻三个区域 <code>type</code> 对应素材图片的 <code>Image</code> 类型列表，函数内调用 <code>datetime</code> 库获取当日星期数。<code>Image</code> 类型是 Python 绘图库 <code>Pillow</code> 内定义的，它包含了图片的色彩模式、像素大小等信息，使用 <code>image.open(filename)</code> 或者 <code>Image.new()</code> 均可得到一个 Image 类型的对象。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getMaterial</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  day <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>    <span class=\"token comment\"># 星期一对应 1，星期日对应 7</span>\n  imgList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                            <span class=\"token comment\"># 存放 Image 类型数据的列表，默认为空</span>\n  filename <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>day<span class=\"token punctuation\">}</span></span><span class=\"token string\">.png'</span></span>          <span class=\"token comment\"># 供后续调用，是将要生成的图片名</span>\n  width<span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                  <span class=\"token comment\"># 供后续调用，是将要生成的图片大小，默认为 0</span>\n  <span class=\"token keyword\">if</span> day <span class=\"token operator\">!=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n    daily <span class=\"token operator\">=</span> day <span class=\"token keyword\">if</span> day <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token keyword\">else</span> day <span class=\"token operator\">-</span> <span class=\"token number\">3</span>   <span class=\"token comment\"># 周四周五周六素材分别于周一周二周三相同</span>\n    countries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Mondstadt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Liyue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Inazuma\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 通过 append() 将 Image.open() 获取的 Image 类型数据加入列表</span>\n    imgList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>resPath <span class=\"token operator\">+</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/header.png\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 头图</span>\n    <span class=\"token keyword\">for</span> country <span class=\"token keyword\">in</span> countries<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 遍历三个区域，取出所需 type 的素材分图</span>\n      image <span class=\"token operator\">=</span> resPath <span class=\"token operator\">+</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>country<span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>daily<span class=\"token punctuation\">}</span></span><span class=\"token string\">.png\"</span></span>\n      imgList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 遍历生成的 Image 类型数据列表，获取即将生成的图片总高度、总宽度</span>\n    <span class=\"token keyword\">for</span> img <span class=\"token keyword\">in</span> imgList<span class=\"token punctuation\">:</span>\n      w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>size\n      height <span class=\"token operator\">+=</span> h              <span class=\"token comment\"># 高度累加，后续我将图片列表的 Image 从上到下拼接</span>\n      width <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 宽度为最大的宽度，实际我的图片宽度都一样</span>\n  <span class=\"token keyword\">return</span> imgList<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> filename<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好，这个函数将返回包含待处理图片的 Image 类型列表、预计生成图片的宽度和高度、待生成的图片名。如果时间为周日则返回一个空的列表，后续可以判断列表是否为空决定最终返回的消息。因为周日所有素材均可获取。接下来编写画图的函数，这部分可能需要结合《<a href=\"https://pillow.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pillow - Pliiow (PIL Fork) Documentation</a>》相关函数的说明理解。不过此例还算简单了，基本只用到了一个粘贴的函数 <code>Image.paste()</code>，如果要实现前面所说的吃头像功能还要到文档里学习更多。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">msgTranslate</span><span class=\"token punctuation\">(</span>imgList<span class=\"token punctuation\">,</span> totalWidth<span class=\"token punctuation\">,</span> totalHeight<span class=\"token punctuation\">,</span> saveAs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> imgList <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"哈！今天是周日，所有天赋秘境和武器秘境全部开放哦🥰\"</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 新建一个 Image 对象，颜色制式与 imgList[0] 一样，背景颜色为纯色 #F6F2EE</span>\n    result <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>imgList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>totalWidth<span class=\"token punctuation\">,</span> totalHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#F6F2EE\"</span><span class=\"token punctuation\">)</span>\n    drawFromHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span>        <span class=\"token comment\"># 初始绘制时的动作点高度</span>\n    <span class=\"token keyword\">for</span> img <span class=\"token keyword\">in</span> imgList<span class=\"token punctuation\">:</span>\n      w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>size         <span class=\"token comment\"># 获取当前图片的宽度、高度</span>\n      <span class=\"token comment\"># 向 result 这个 Image 中粘贴 img，box 的参数是粘贴图片的左上角坐标</span>\n      result<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> box<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>totalWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> w <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> drawFromHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      drawFromHeight <span class=\"token operator\">+=</span> h     <span class=\"token comment\"># 一张图片粘贴完后累加高度</span>\n    result<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>saveAs<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 将 Image 对象 result 保存为文件 saveAs，注意要带上完整路径</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"[CQ:image,file=file://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>saveAs<span class=\"token punctuation\">}</span></span><span class=\"token string\">]\"</span></span>\n    <span class=\"token keyword\">return</span> msg<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此，图片就绘制好了，<code>result</code> 是一个 Image 类型数据，并不能直接通过 NoneBot 发送。使用 <code>result.save(\"/path/to/.png\")</code> 可以将其生成为一张图片，这样使用 CQ 码 <code>[CQ:image,file=file:///path/to/.png]</code> 就可以发送出去了。</p>\n<p>最后是事件响应器，我在 <code>__init__.py</code> 中使用了如下逻辑：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">materialMatch <span class=\"token operator\">=</span> on_command<span class=\"token punctuation\">(</span><span class=\"token string\">'今天打什么'</span><span class=\"token punctuation\">,</span> priority<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@materialMatch<span class=\"token punctuation\">.</span>handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">send_mt</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> GroupMessageEvent<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 获取消息。比如发送了「今天打什么天赋」后 bot 会获取到 searchFor='天赋'</span>\n  searchFor <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>get_message<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> searchFor <span class=\"token operator\">==</span> <span class=\"token string\">'天赋'</span> <span class=\"token keyword\">or</span> searchFor <span class=\"token operator\">==</span> <span class=\"token string\">'武器'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">'talent'</span> <span class=\"token keyword\">if</span> searchFor <span class=\"token operator\">==</span> <span class=\"token string\">'天赋'</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'weapon'</span>\n    <span class=\"token comment\"># 调用刚才编写的两个函数</span>\n    material <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> getMaterial<span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> msgTranslate<span class=\"token punctuation\">(</span>material<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 发送消息，也可以先将图片转为 Base64 编码再发送</span>\n    <span class=\"token keyword\">await</span> materialMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 没有检测到要打什么</span>\n    <span class=\"token keyword\">await</span> materialMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span><span class=\"token string\">\"打什么？[CQ:face,id=32]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> at_sender<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当然以上这些只是大概讲了下我做这个功能的思路，还有一些细节可以优化优化，比如：这里只简单判断了星期数，没有判断时间是否过了凌晨 4 点；图像是每次使用时都重新生成，也没有做缓存。完整的代码我可能什么时候觉得整理得差不多了再放到 GitHub。</p>\n<h2 id=\"heu-定时打卡插件\"><a href=\"#heu-%E5%AE%9A%E6%97%B6%E6%89%93%E5%8D%A1%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HEU 定时打卡插件</h2>\n<p>写了两个插件之后我觉得自己还蛮厉害的，于是开始想办法将之前做的学校疫情打卡实现到机器人上。最近疫情有所反弹，学校又开始了返校前的打卡活动。另外大家都要注意防疫哦。</p>\n<p>打卡的插件原本是需要自己获取 <code>formData</code> <code>boundFields</code> 等参数的，还要处理 HEU CAS 认证的相关 Cookies 等，如何使用 <code>httpx</code> 实现这些功能我还不太理解，于是妥协以模拟浏览器操作的方式实现。这里使用了 <a href=\"https://github.com/microsoft/playwright-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@microsoft/playwright-python</a>，它是个不错的自动化测试工具。通过 <code>pip</code> 安装好 <code>playwright</code> 后，还需要执行一次 <code>playwright install</code> 让 <code>playwright</code> 安装可用的浏览器组件及 <code>ffmpeg</code>。我本来以为国内服务器上安装 <code>chromium</code> 可能会卡住，不过实际用阿里云北京的服务器试了一下并没出现网络问题。</p>\n<p>与前述步骤一样，最好的参考文档仍然是《<a href=\"https://playwright.dev/python/docs/intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting Started - Playwright Python</a>》。实现打卡部分的代码我已经放在了 Gist <a href=\"https://gist.github.com/monsterxcn/f0a7a083ee65d52b1400596ace43687b#file-nonebot_plugin_checkin-py-L53-L98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/nonebot_plugin_checkin.py</a> L53-98。感觉结合文档比较容易理解，看函数名也容易理解是什么作用，总之 Playwright 是很好上手的。</p>\n<p>接下来是定时任务的实现，这需要安装 NoneBot APScheduler 定时任务插件 <a href=\"https://github.com/nonebot/plugin-apscheduler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nonebot/plugin-apscheduler</a>，参考仓库里的「使用方法」即可。在 <code>__init__.py</code> 中定义定时任务，比如实现定时打卡的功能可以这么写：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">scheduler <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"nonebot_plugin_apscheduler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scheduler\n<span class=\"token decorator annotation punctuation\">@scheduler<span class=\"token punctuation\">.</span>scheduled_job</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cron\"</span><span class=\"token punctuation\">,</span> hour<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> minute<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">auto_checkin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 获取 bot 信息</span>\n  <span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonebot<span class=\"token punctuation\">.</span>get_bots<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> customer <span class=\"token keyword\">in</span> customers<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 拼接 CQ 码 at 某人</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"[CQ:at,qq=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>customer<span class=\"token punctuation\">}</span></span><span class=\"token string\">] \"</span></span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 传入了最后一个参数 mode=auto，打卡任务将不输出执行过程提示</span>\n      msg <span class=\"token operator\">+=</span> <span class=\"token keyword\">await</span> checkin<span class=\"token punctuation\">(</span>customers<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> customers<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> bot<span class=\"token punctuation\">.</span>send_group_msg<span class=\"token punctuation\">(</span>group_id<span class=\"token operator\">=</span>GROUPNUMBER<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span>Message<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># 如果定时任务执行出错了将向管理员用户私信报错信息</span>\n      <span class=\"token keyword\">await</span> bot<span class=\"token punctuation\">.</span>send_private_msg<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>ADMIN<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>customer<span class=\"token punctuation\">}</span></span><span class=\"token string\">(学号</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>customers<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) 今日打卡定时任务执行出错了！\"</span></span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里值得注意的是在定时任务事件处理函数中如何调用机器人主动发送消息，这种方法在其他场合应该也是通用的。首先通过 L5 获取 <code>bot</code> 对象，然后通过 <code>_ApiCall</code> 方式调用 go-cqhttp API，比如 L12 L16 分别调用了发送群消息、发送私聊消息的接口。</p>\n<p>通过此插件主要学习了 Playwright Python 的使用和定时任务的添加。完整插件的代码可以通过前面的 Gist 链接查看。如果有时间我觉得还可以添加上 JSON 操作：将学号密码写入 JSON，执行时读入，判断不存在后令用户输入并写入 JSON。</p>\n<h2 id=\"连续对话的抽签插件\"><a href=\"#%E8%BF%9E%E7%BB%AD%E5%AF%B9%E8%AF%9D%E7%9A%84%E6%8A%BD%E7%AD%BE%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>连续对话的抽签插件</h2>\n<p>做原神每日素材插件的时候，我就想整一个像可莉特调那样的原神黄历、抽签功能。撸完了定时打卡的插件之后我又看了看 Playwright 文档，发现它不仅能用来模拟浏览器操作执行打卡，还带有 <code>screenshot()</code> 函数可以实现网页截图，<code>inner_text()</code> <code>inner_html()</code> 函数可以用来做爬虫。我一拍脑袋，想法有了：通过 Playwright 写一个爬虫爬取诸葛神算测字三百八十四爻（也就是可莉特调使用的运势签），再通过 <code>screenshot()</code> 截取指定选择器的网页截图（使用 Pillow 绘制的话感觉会很麻烦）。写这部分代码参考了群友的机器人 <a href=\"https://github.com/FYWinds/takker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@FYWinds/takker</a> 和 Playwright 文档。</p>\n<p>爬虫的编写不在此讲解，思路其实很简单，代码见 Gist <a href=\"https://gist.github.com/monsterxcn/47681a6db630887d69946cc7f0faa0e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/chims-crawler.py</a>。爬到的三百八十四签我也都顺便放在了这个 Gist 里，可以直接拿来用。至于为什么不用网上大把的抽签接口，我是觉得既然决定要折腾，那不如就折腾到底。</p>\n<p>Playwright 网页截图也很好实现，与上面插件类似，在打开网页后使用下面这样的语句即可：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> async_playwright<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> p<span class=\"token punctuation\">:</span>\n  browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p<span class=\"token punctuation\">.</span>chromium<span class=\"token punctuation\">.</span>launch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>new_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 这里打开的本地 html 文件是接下来我要做的抽签模板文件</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>goto<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"file://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">card/tmp.html\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 设置网页窗口大小</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>set_viewport_size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1080</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 等待指定选择器加载</span>\n  chim <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span><span class=\"token string\">\".container\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">assert</span> chim <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n  <span class=\"token comment\"># 截图到路径 {resPath}card/ 文件夹下 tmp.png</span>\n  <span class=\"token keyword\">await</span> chim<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">card/tmp.png\"</span></span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>那么如何实现抽签功能呢？我的思路是使用随机数 <code>random.randint(1, 384)</code> 生成签号，然后读取 JSON 文件取出对应签号的签的信息。接下来打开事先编写好的卡片 HTML 模板，使用 <code>replace(\"模板中的占位符\", \"签的信息\")</code> 替换并保存一个临时文件。执行 Playwright 指定选择器的网页截图。</p>\n<p>卡片 HTML 模板我已经放在了 <a href=\"https://gist.github.com/monsterxcn/d933cafcdc6662c6bdcbd561fe921e8c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gist</a>，样式参考可莉特调做了一些调整，字体使用原神游戏客户端的文件即可，路径如下：</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">Genshin Impact\\Genshin Impact Game\\YuanShen_Data\\StreamingAssets\\MiHoYoSDKRes\\HttpServerResources\\font<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>读取 <code>.json</code> 使用了自带的 <code>json</code> 库，我将卡片模板分别命名为抽签 <code>poem.html</code> 和解签 <code>intp.html</code>。生成图片时调用的是同一个函数，通过参数决定使用哪一个模板。由于无论是之前生成的随机数还是 json 文件中的签号均是阿拉伯数字，写入模板时，还需要一个将阿拉伯数字转换为中文繁体数字的函数，这个算是小细节。代码不难，我就不放在这里占用篇幅了。</p>\n<p>这个插件最后一个点是如何连续对话：发送抽签命令后机器人发出了一张图片，接下来应该询问是否需要解签，根据用户回答决定整个流程是否结束。这里用到的是《<a href=\"https://v2.nonebot.dev/2.0.0a7/api/matcher.html#classmethod-got-key-prompt-none-args-parser-none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nonebot.matcher 模块 - NoneBot</a>》的 <code>got()</code> 函数，文档里介绍得不多，我学得也比较蒙，但是最后写出来还是能用的：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># __init__.py</span>\n\nchimMatch <span class=\"token operator\">=</span> on_command<span class=\"token punctuation\">(</span><span class=\"token string\">'抽签'</span><span class=\"token punctuation\">,</span> priority<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@chimMatch<span class=\"token punctuation\">.</span>handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">chim</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> GroupMessageEvent<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># getChim 函数用来生成随机数并读取 JSON 输出签号、吉凶、签诗、解签</span>\n    <span class=\"token comment\"># 将其赋值进 state[] 可以在下面 got() 中继续调用，chimNum 这些都是自己定义的</span>\n    state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimNum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimLuck\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimPoem\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimIntp\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> getChim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># genrChimImg 函数用来读取模板并替换占位符为签的内容，最后一个参数用来决定使用哪个 HTML 模板</span>\n    chimImg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> genrChimImg<span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimNum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimLuck\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimPoem\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poem\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span>chimImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> at_sender<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span><span class=\"token string\">\"抽签发生了错误🤕\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># got() 指示当 action 不存在时发送 prompt 消息并接收用户新的一条消息</span>\n<span class=\"token decorator annotation punctuation\">@chimMatch<span class=\"token punctuation\">.</span>got</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">,</span> prompt<span class=\"token operator\">=</span><span class=\"token string\">'你需要解签吗？'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">:</span> Bot<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> GroupMessageEvent<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> T_State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token string\">\"不\"</span> <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 用户说了包含「不」得句子就判定为不需要解签，结束流程</span>\n    <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span><span class=\"token string\">\"好吧\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 从 state[] 读取签的信息，这样不用重新读 JSON，传入最后一个参数用来决定使用解签的 HTML 模板</span>\n      intpImg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> genrChimImg<span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimNum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimLuck\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">\"chimIntp\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"intp\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> chimMatch<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">(</span>intpImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># await chimMatch.finish(\"解签发生了错误🤕\")</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好啦，这个能连续对话、实现抽签解签功能的插件就做好了！主要学习了 NoneBot <code>matcher.got()</code> 和 Playwright <code>page.screenshot()</code>，前者让机器人能从后续对话中获取变量决定程序走向，后者能在 Pillow 绘图较复杂不易实现时提供替代方案。</p>\n<hr>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1702' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0592dc1342fd4de13a6f33a46732e1c0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0592dc1342fd4de13a6f33a46732e1c0)' width='2560' height='1702' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAArCAIAAABHOBkQAAAACXBIWXMAAA7DAAAOwwHHb6hkAAANZ0lEQVRo3tVZ628c133lH1I0CNAPjfslCNzAbZCiaZwHGqBogCRuUBSFm6B1UzcfCiNACzQIaiRO0qZOqthKJUNOKlm2VKdqbdmWIlIUxeWSy93lY5e7XC65r9nhPmZn5z33Mc%2bcO8OlVhRJNC2qqBcXw%2bVweef3POfcOzPxLzI45/SBoarqeDx2HIeygDCfMiZmMoIgiP%2bPx8z/3gHbti3LgtWx3YmsVkQcn9jwAeP/hwOwlTNq0mCrfnu9fvNO295RTNMwRiM1iqJH1AE2KRIMh9DYJ2/J/Fdvxx/KxO%2bfjz9XiGzbMXQjCMNfrgN4fPSgA4QSlI3ruiQZ%2bOFRIpv09Q5/o80vtr3MgAVcdMIvuYSCZE47wV3dV7YdSx8MFFjuTQbjuPjIQzrDSaE9DAeowI2jE2DCqB8P5kJt3bPcANF2qQi0Y/BhE/FWlFGv1zNNs9/vDwZDS1e41XMpd1wXFeUSmiTqoTjgEM9xk0num7brnd2o/m1Bem6NXpO8MWKujDmHe6I49GSgkOCDbpiOrXlkhGaG3Zyzwy55GA64JCAUZgUu8dIJ6xFs0/X%2bpBh/dDF44i7/%2b4oXc98RpX4IPAz9wNIfnAUec1nMpffc7lt9xXRNjTgOfAt/wSaGw/y4gUih2bjncy9EtaY304fPUBeI5451i/oRC2OX%2bYc%2b2C5XLG9owW7xK%2b7Tg9IQvZt6gmqJOX254X8%2bH3256H4x5/5xPvhmLdA0faSM4EB0ygiDKPTDZKQ30EmHK08PxAKQAVOJIRHHpA7qlMIR/GmGySXDtLbWKtVCpVbcltt9LwhRKtwLPC8IfDHxGY3huvgH1MW9OsHDHJdEjJxreH9UCL%2b8ET29Lub36r7HKJ2C2umBftI0DRhAuU94DM6zCSP0tCFW4gEdN1jrtWqvVxmgaO1BfwADZhghI0l54uNfeOyZv/y1P/2zp774bBwcwz6%2bH6JPKHE8q%2bdYpizvI63IuOf7CFvAiE/dkFFMtH/EKTvVoMT6gI6qvHfTs7TANmCGm/Z%2bkuHj/gUrM9kOPpENP3w3XBsxaugI34wXxdKe/Hu//dlP//lXP/X0Vz73hWeikxwgAbVUTy5TW%2beuqatKt9OWpc6gv8%2bpE3r3bL7/%2bSTN1VF7mO8b7X5/7flN%2b6Udd2xY/f3eREcxMhnTq%2bAPlkt%2bKgm2UR00HsfNGe5Hsjz8ww/91ic%2b%2bMRv/u5nPvOlZ4X5D0iAJAMcCzJKDMOs1lrdrqz0u6NBt7q5Vq1Wa/UqYnhcuEXhpT13XyEREnr%2bhh4/fjf65HIIgxABUCRX96jRHwyHuqYhudMJIclasQfip5wd3J3xg7jR3P/Yr//Gy0/%2byj9%2b8v2//%2bxf%2bMfhQ%2boAsozPMPfvvvZcYe7GjX//z7M/uvLO5auvvfijNy9c9kP/wRZkrkFcG4IVgi%2bFr6kh6m3foiObeqlBSMCwyY2Rblr9wWismb4vgBhfPVwZ/Yt5%2bJgZj0fdofrY4x/%2b7GPv%2b/RHPvDU9/4hPjUDqHhVGayvzHdq5Woxv7KY3Sqs52bvbmZW/OCIAyLnXN6g%2bkDVNCfpGXSwnQwwnpCxphlwGvreVKkwzw90tbvfzEn1ZW1QZk6Pn4BOwgG0JkCm0e5s1XY39xr7Yy2x/yQHCFCp05b%2b%2bcVzc7fuNKuVarWxeP3t%2bVu3csVV4joPQg41VI%2bzVqvVaDSGw2G3293e3t7c3Gw2m7hZqVRMy8L60/3tBbEq5VrF843VC3v5c1L5mh9EJzog0J15Y3UkjOMeZBrUwf7%2b/kBQryLLMiSDLwA1Sh3wg7DX2vnpD19448wrl8%2bcP/cvb968cHlUr8QBP/4Z3EcHYDXE/ggNpKERfBCG0w6gagbN5crPXmxdP7Mze6ZTfisIIwFcJzkAREBZF4vF9fX1nXo9TTFKFlstNF9au8iA63pJCfGhMrpxOyt3Zeg2j5jN7cri4koml6HHPIMwZ0wcC7yGNVM4mh7HIiwyoEirO3fP7l39p%2bbiOUW6DaV4YgYAr7ZDCsVCfjWP0W63keLd3V3kGi4h/Eg0Pqc8AOkMid/arV88%2b7KpqdQcu5ZmDPdl4KncpqKE7u8Bgh7YpMZwpI5T3vB9Qb34kLJvKgo8z7svA2Hc31msLp1rz720O/uD/fo7%2bKfTSohQ3mw0arXa4mKmVC7Pzs7iM3IyPz%2b/tLSUzWYlqQNRcwCjnBua1t3b9ahNbIM6JnMthj0k1A8LHBYSxt17PEaIqaEHUIoICqKD0seHer2OR0AOpoWE6yHIJponsJR6f%2b%2b94c7N/vZ1vb%2bGEj7NAZewzXJ5dXV1EaWwsgwARp1MlCaGCZF8wMSHSm4KFvAzZG7sefEwEyoLzHJ8yBXBrG6KKogxHNjb20MfIxy5XA6fUa5ra2vILWTFdBNTIWkZagZYBLtxBZIydiKzJw5QvyiZJdnalJ2tAd3o86JM27ovGUFbD5pa0DECMP%2bhmCMT41JygXy42ePP18Lvl9rf3mh8Y5O83qKIgjJUYLqIKOdABZQiMrCczSJS%2bLVQKMCHubk59Pe0A566x/RebzDQdQ0VJ3ZL7DRdAgc4jMv04%2brIKw/I0p7VGrN9wzsCFymMJtDOUmZNXRFq1CNfrwaP342fzMUfzcafysV/sxWSRLQdlATnMF2SJNgN3NzY2EAh7SQDXVfZqsBV9AZJeB5E5lljdTze2toqlUr4zmg0Qs9MEj4lLpI7M2h6h/Pnlq49/x/f%2buGlcxf%2bq5OC2/FiTsgUw3Hs4VCB7an6FXRFaMdkkkEkk7QMqjt0ShmJkkPxoCDx5fQQCfWJyoFlaIMjPSA2TNwD9PUHfUAIoNxxnInM5uLoibKUidMgzqAExpZ6MfPXL333/HeeWVxdUk4kMog5W/XBrI6h6cYQO7Sx7icZFpsvdm/yqUClGUibGN2LkKP40Qmzt269%2b%2b67aANxdjDFAwfkAUE/GYmOcFM5TZsXrbHsmTonrq4bKYyGhqFfXXnhSvbKv1769npjKz5JCwGvHMd3zcF%2bd20lo0i1Unb27uz8eDRCzKBs3WQ37JKjavhQ%2bnhiM4UrBzJYFjZSwoKjGZhsmB6gC%2bY6RuxICz3nqby/M3bVfk/IacROtYw3yudXyufPXPrY23deiU4Wc1gKWrtdr928dH5j9vrda5ffuXhdG5ncYyfBnAgnYy3Nr438xtjfVvyq4jW0cHccdoxoV/XLfW7SEFA7sdNLekzMZM1DNSqyEPvBwtD7fD7YM1jscwRrBjkf2PZs84V%2b/%2bu388%2butX5yyPAP9oDYVQSe3BrcuJT52dWVpVul4lzJNZ1TgEKQN2cNlWdbtCizfJfmJLrSJqsdkpdopkXhA552L13WkDm6oqBILRACE6ckfErqEQhYKGohp8lEzImkhqMwMuLIjiMSn5oBONBt929cWdrI1Iit6Hrfsa3THEgyYLNIscORE47dUHVDjUQ6jcYkHNjgvuCeA4zwfpUq7Z5U6O4uDNrL6v6qbSqMedO7AneqxwQPwEtZ6g8VCBbLMGz0PoACkg7iEUCB/sP3J0wMMRdIrd1b1y501ubmrty8%2bNLVYX8A2jmphNImbjUbK9lMIZ/rtJuqMsS1A05YyhQLq7ncCnAmZYwDLWFrjcJPWqvnm4tna0tntMEO98Iju7OjUqJU2sQsl0ugG3wVKAb8ShsIq4udRzDZD/j%2boCMvvPne9Vev52dLo24P3zh1%2byscAKjn84VCsbizU19f31hb36hWytnl7PydhfLW1hSRCeImrrW9dEEq/pu89Gote05X9vgpUiIVc1A%2bALiUYvAwaJVUvoPz4VK5VAKrJ7qVgh3bTfn2zXy7LjVK5dpOVdfVBJJPO1jAUsgqsB9XLI7oxEw1dLXd7oDdwFOTIhRbX%2bIau6uXpPLr8tpr0tZrhtpg/FQHLNstFgrQbdCh5XL5zp35TCaTW1kBC25ubuD%2bwsICtlD4pivUqN/akUu5Shy5FpCsK0E0HX/sLkS4f8jlR67hFEgcUn4iS7nraNU7rzTzF6Tl8/WVl7Vh/UgJHePAVqVii1LhjiO2fLppGqYFk6HjLNuxHJdxf6KFxLmBeBA0ILonOV1yjq0ict/R4qHpR3Yz03CX0hYAU5Xzajc76q4o0pJjQlP57Oh%2b%2bmAkYo75BZlWFV4esMqQr/fY1tDrmhBzftvwW7rfNQPmhUI1HXPkxGA9FAG0g0ehltxERBAhCDh/SKfTqLCOxjsaa45Ze8xqQ6o6HoKDjVw4mWJLQX16woEVNubC2u4NLr%2btqCYxdUeoHT38n7/giO6fp74fOPbvSOz0nLzgYEcOqtKz0e/s%2bL%2bTif9gmX48Q57MRl%2brhLpmiLPRh/aKKfrvuSzQGpwiVM3BQZU4G%2bXk1Zb39Frw1VL0lc3orzaDM7t%2beoKcnuo8Su/ImMMNybGNXn8Arjh4PcNY6NE4YHGIwvPE1SMsEWSP1FtKkRXuaJ68ha0wVD3CnxI2UAt5GCjG/n5P6kggcjbZ7jxyr1nTIz5csRsE8WFDiI1/bnW1sLpcmvuxlJxeyeIIIxXx5FF8T0wS6IRGQqRxHSdjOOh7w%2bqhgoUDD%2b0l388BQN9enxRk3rgAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"2560\" alt=\"NoneBot 插件效果\" data-srcset=\"/assets/static/nonebot-plugins.82a2fbd.84ef61192020cfd403b677d18b100f82.png 480w, /assets/static/nonebot-plugins.cbab2cf.84ef61192020cfd403b677d18b100f82.png 1024w, /assets/static/nonebot-plugins.2665e34.84ef61192020cfd403b677d18b100f82.png 1920w, /assets/static/nonebot-plugins.42db587.84ef61192020cfd403b677d18b100f82.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/nonebot-plugins.42db587.84ef61192020cfd403b677d18b100f82.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-plugins.42db587.84ef61192020cfd403b677d18b100f82.png\" width=\"2560\" alt=\"NoneBot 插件效果\"></noscript><figcaption>NoneBot 插件效果</figcaption></figure></p>\n<p>本来以为这点经验写不了多少的，结果码点代码、加点注释就撑起了大半篇幅，希望读者有所收获！Python 新手难免出错，如果你发现了欢迎指正！( •̀ ω •́ )y</p>\n"}},{"node":{"title":"为 Gridsome 添加 Artalk 自托管评论系统","path":"/code/use-self-hosted-comment-system-in-gridsome/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/gridsome-artalk.a209973.7111a5ea162c336715a3a8768910baf5.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/gridsome-artalk.a67b0b2.7111a5ea162c336715a3a8768910baf5.png 480w","/assets/static/gridsome-artalk.a209973.7111a5ea162c336715a3a8768910baf5.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1bb0cf23d13033bfc2c81c6932a8a519'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1bb0cf23d13033bfc2c81c6932a8a519)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAGPElEQVRIx%2b1WaVBTVxS%2bCQRUpK64VDu1dawbrRtCq9iKiiKoYBFQBLHsSwJ5hKySsMoukAgoqyBkeS8bBAgBKpuQhCWBEAgJCIr6wy5/%2b6P/%2bgK4O4P%2bceqMM2fuvLx7ct/5zjn3fB8AvPhP2z4D%2bF8CwKArFwJc4puGbvFJ73B%2bD8N8PABcCMuFbBAaaqvFiZukKWtEicsRmi1CtxKQQV3c685E85s5bK8bNGcvz5xz%2bygAMDwSpBaLjYNNk8PKR6aRpzOdMwaBQQ0b1JVj93c1ZoG6WCxahzq0JtBaCWt7U%2bYGaTJ2Pkrzaj4Ex09YhtAAjzQf/SpR4k/tnC%2bE9Dkk0Fspe49AudDiAMxh1cZ%2b35TdNjnaqhvWTT4Ym5rRmqba9TreYF%2bNuqdtbIQ11DiXS2hFPSt4EIFnhxue6sWPdfgB8QohA/DjsXACqMEfuVecoJGtQOjgbhy4S9ivyOfPanc0ZQEeEdvAeBlTrfkogJDn0wHuxpofXoQ0367zW2IqeKt73wmAcFCe3zk5pjFODkyYGrSDvIG%2bu/091eruClWnSKtO1TSjACzFtL05sfXaPtpYy6FWduSItPKZ7ocONiiLWsaOsO3I2JIRfig52rY1bWkj01rCcFQU1j/R71TkguIwC5/DFuYiQDgxfXVLGtqcICfIsuGalYi2Wp62XMbECim4SDdwMwxEuWGqY1c1peAQCiB4gLJogGZnUQA/KgpGZx8OG6ea9VquRsnXqgRaFbryNSrF%2bEiaRg5qYja3Z5%2bIvuJbmbG0Hs06ZJkdtDHC064S%2bjYleOuhfRelNx2gK%2b7V1%2b0Ko3bj/SLhYs60snF21FVd5cgM379nj30%2bcYM83bmYFnT7%2bikmHrv3mz3s%2bKuSYmda2C/ZUJRW4hp88UBl4ooLP0cq4StVORE9vC/POAN2MEZIebPf3gZwpI0z%2bfSJyjCRJ29MESNVrW235S15soY7Le2KvoGaCSVa920d%2bd5QxIGCeFBPX1IYdsT3LPNW/l4vV88c6jE/r2NIdrgaLtXc2%2bdyOLW65GhNWvGMsvvP6YDe2l9jQkIrcrcEnEaLduzc6a1EP99C1j6P48n3kCp1%2b4nU2NNnPLzL0l0IQekKwVFCED0v4ygtXP7XlHdoEOCEYEXvAcC5lT3%2b%2bFH32Fh0aWngjYLUai7rTi2xtJxUUFoukImmhix5pHWtGS7RgXjh7Y1DRYDq%2bdVxx1SkMoCT7F%2be6UQOtuq6fq6zgv9QE8xJ8ySEgGhX545ixd/TTrfpmxx2n40PX3dgR3av7GRkIIDjt/GYXnHhwn9nA1gkO6L3mfBAO4b/5qvuZb3yg16n9jk54O/VVf2h88ugWlfg0RbCLH4HWvKV08ZOvT6/sYHOr0sSClioIfxMoQhu6yrRd6G3CteYuP6yaxQB75KMd8olHg29mMmrPFFIDZXc2u95EqRf8lHWVuvvowCg60k7/d1vPLg/8M8zxxh/H04SZ0ZFz067lEH1pxDcW4qoSvGR8x4JSOm5kMtr486f%2bc1/c9LVraFeRR31bnEhRTLY3teN0i/1uJkIKmKA4D3uAAqgzajr1I/2GMYbdEMCjQrRqJpHtejPAZMpa1hhHgtwgkVJxK48fPSd/AptR5aqaQvjCkjxu6CqO1mRApJ9HH/nRPQjtqmBbmxGgb4jc6KDMSLfU5vEGGmufToS3StYXxF/uaWs3KRkT/dtLyE5FFEutVcuo1zwrsv9TpRiz0sK6%2bV9XU2jGRTp3RJ6n2h3FQNU4zEC0uJj1N48RnVynVY9YRwwmtDLoDZMDBlNXWP6PqMhcVBm5gF0wMMJllL62ubUTbLUlZJEXP01IKLg%2bOQlUgYQkS34JCuYgpXQbBuT1khY1gIyTkDGIOQlCHWdmIVuAQHJSkhdLWYuhamov7WUYYVQsVL6cinTEibjhBRrhGr%2bBD9hvSzFRkQHSMLiY/QFkcUoYdjQLzUOdc6Mq2YnlbOmtgejYuPQrdGu7bIMdIxi%2baTn/DqvMl6hJ7MGeU5P3PgFhwVufqFQnlOeeQta%2bDv3ub3k8rmHOdr5IC0EYbjEZTDVBqatFF1bL02ykzBRHWGDUFF%2bfVNKfLjIwXxEMfeqnlvIDeaddfwspz8D%2bGTtP6u6N7Wa%2bMTxAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"date":"August 21. 2020","timeToRead":13,"cjkWordCount":2911,"cjkReadTime":9,"description":"考虑到小站的访客还不是人均科学上网的水平，我折腾了一天从 Disqus 换到了友链写的自托管评论系统 Artalk，数据迁移啥就以后再说吧，咕咕咕..","content":"<p>本文介绍在 Gridsome 博客中启用 Artalk 自托管评论系统的方法。欢迎尝试这款小众的、漂亮的评论系统！</p>\n<p>刚开这个小站时打算一劳永逸吃上 Disqus 这块香饽饽，结果没两天我的宝贝室友就跟我说：你站怎么没法评论啊？我深思熟虑之后决定还是不用 Disqus 了。换 Gitalk？不行不行，Gitalk 虽好但是每一个新站点都需要 GitHub 账号授权一次，而且国内访问也体验不佳。Valine 之流我不太喜欢，其他的评论系统我都不甚了解。那该何去何从呢？</p>\n<h2 id=\"选择-artalk-的理由\"><a href=\"#%E9%80%89%E6%8B%A9-artalk-%E7%9A%84%E7%90%86%E7%94%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>选择 Artalk 的理由</h2>\n<p>由于水平不足，我是没法自己写一个评论系统的，于是我决定在友链 <a href=\"https://qwqaq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@QWQAQ</a> 和 <a href=\"https://www.ouorz.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@TonyHe</a> 两位大佬的两个评论系统里选一个，要知道缝合代码、借用轮子这种事我最擅长了。那么是用 <a href=\"https://github.com/qwqcode/Artalk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@qwqcode/Artalk</a> 还是 <a href=\"https://github.com/HelipengTony/nexment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@HelipengTony/nexment</a> 呢？</p>\n<p>外行人看热闹，我以一个前端菜鸟的水平不足以在架构上对两个评论系统做出优劣比较，所以以下只是我个人选择的理由。</p>\n<p>Nexment 是 <del>React.js 编写</del> 「计划全平台、全框架适配」的基于 LeanCloud 实现 Serverless 的评论系统，官方提供了 React.js 和 Vue.js 示例，有自己的文档（虽然 Tony 好像还没有写详细，但至少有一个站点在那）。官方示例站点 <a href=\"https://nexment-demo.ouorz.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nextment for React Demo</a> / <a href=\"https://nexment-vue-demo.ouorz.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nextment for Vue Demo</a>，我觉得新颖的点在弹窗显示多级评论上，在我逛的博客圈子里比较少见。部署的话需要提前配置 LeanCloud 的数据库，这让我停止了思考（我的数据库放在别人那里想想就不靠谱啊喂）。Nexment 诞生于最近一月，截至本文发布前最后一次提交在三天前，作者 TonyHe 感觉是个努力 Coding 的巨佬，毕竟即将出国留学了。</p>\n<p>Artalk 是 TypeScript 编写的需要自行部署后端的「一款简洁有趣的自托管评论系统」，数据存放在 JSON 文件中，后续听说也计划增加 MySQL 的支持（我：那样听起来就不太简洁了呢）。需要自行搭建后端估计劝退了很多人，而且目前只支持 PHP 后端，README 里写的 Go、Node.js、Python 后端均迟迟未上线。官方给的示例只有几个 HTML，相当的「简洁」，基本都是在 HTML 引入 <code>Artalk.css</code> <code>Artalk.js</code> 后一些简单的配置。官方示例站点 <a href=\"https://artalk.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Artalk DEMO</a>，听说在这里可以观察到开发者立 Flag 现场。Artalk 诞生于 2018 年 10 月，截至本文发布前最后一次提交在今年 5 月，考虑到作者 QWQAQ 的学业繁忙，摸鱼也是可以理解的。</p>\n<p>简单了解两个评论系统之后，再看自身的 Gridsome 平台，基于 Vue.js。怎么看我都应该选择 Nexment，但是我却选择了 Artalk。原因嘛，自然是图个简单。Artalk 之前就搭建了自己的后端使用过一段时间，官方搭配的滑稽表情包在别的评论系统一众阿鲁表情包、贴吧表情包中独树一帜。更重要的是 Artalk 的代码我能看懂一些，进行自定义修改很方便。Nexment 虽好，但是外观相比 Artalk 我还是更喜欢后者，弹窗多级评论显示对我来说也需求不高，要我看 React.js 项目代码更是劝退。</p>\n<h2 id=\"对-artalk-的修改\"><a href=\"#%E5%AF%B9-artalk-%E7%9A%84%E4%BF%AE%E6%94%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>对 Artalk 的修改</h2>\n<p>Artalk 目前还没有支持夜间模式，原本的样式和本站也不太搭。于是我 Fork 了一份代码针对这两个问题进行修改。</p>\n<p>夜间模式主要按照当前主题和部分 Disqus 的配色、样式进行调整。其实之前也尝试配过一个夜间模式，用在自己修改后的 Typecho 主题上，但是代码过于粗糙。我调整颜色的方法甚至是直接将原版压缩后的 <code>.css</code> 打开后按 <code>Ctrl</code> <code>F2</code> 全部替换！剩下的样式代码压缩后即使找工具美化也看的我云里雾里。这次直接克隆仓库安装依赖从源头编译，方便那不是一星半点！</p>\n<p>到本文发布为止，我共进行了十余次提交，主要对以下这些地方进行了修改：</p>\n<ul>\n<li>夜间模式</li>\n<li>小屏幕样式部分适配</li>\n<li>评论显示效果嵌套层数自定义</li>\n<li>控制台版权去除</li>\n<li>「Power By Artalk」 调整</li>\n<li>侧边栏通知中心细节调整</li>\n</ul>\n<p>夜间模式的配色均在 <a href=\"https://github.com/monsterxcn/Artalk/blob/master/src/css/_variables.less\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">_variables.less</a> 中定义，以 <code>--at-</code> 为前缀。GitHub 仓库地址 <a href=\"https://github.com/monsterxcn/Artalk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/Artalk</a>，我搭了个示例站点 <a href=\"https://artalk.vercel.app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Artalk ♂</a>。我没有系统学过 CSS 写法，所以让本应简洁的代码变得不简洁了，希望各位多发挥才智、创作自己的二次开发版 Artalk！<del>今天发现评论区的 <code>&#x3C;pre></code> 代码块样式还存在问题，</del> 探索中 😣……</p>\n<h2 id=\"在-gridsome-上调试\"><a href=\"#%E5%9C%A8-gridsome-%E4%B8%8A%E8%B0%83%E8%AF%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>在 Gridsome 上调试</h2>\n<p>刚使用 Gridsome 大约一周，对它的了解很少，Vue.js 水平连门都入不了。但是这样的我还是花了几个小时将 Artalk 成功适配到了博客。中间踩了几个坑在这里提一下解决方法。</p>\n<h3 id=\"安装-artalk\"><a href=\"#%E5%AE%89%E8%A3%85-artalk\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Artalk</h3>\n<p>Artalk 提供了 npm 包，所以可以直接在命令行安装</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> artalk --save<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>如果需要安装我修改之后的版本则需要在 <code>package.json</code> 中手动写入仓库地址：</p>\n<pre class=\"language-diff line-numbers\"><code class=\"language-diff\">{\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"name\": \"gridsome-starter-blog\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"private\": true,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"build\": \"gridsome build\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"develop\": \"gridsome develop\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"explore\": \"gridsome explore\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"dependencies\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/plugin-google-analytics\": \"^0.1.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/remark-prismjs\": \"^0.2.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/source-filesystem\": \"^0.6.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"@gridsome/transformer-remark\": \"^0.3.0\",\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   \"gridsome\": \"^0.7.0\"\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"gridsome\": \"^0.7.0\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"artalk\": \"https://github.com/monsterxcn/Artalk.git\",\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"devDependencies\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"node-sass\": \"^4.12.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"sass-loader\": \"^8.0.0\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span>}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里 L16 会直接引用我修改后的最新开发版，但是如果用于自动构建发布站点的 GitHub Actions 中使用了依赖缓存，则总是使用第一次执行工作流时安装的版本，无法获得后续更新。<del>为了解决这一问题，将 Git 链接修改为指定 commit 时刻的地址即可</del> 这好像也不可行。</p>\n<h3 id=\"引入-artalkcss\"><a href=\"#%E5%BC%95%E5%85%A5-artalkcss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>引入 <code>Artalk.css</code></h3>\n<p>接下来引用 <code>Artalk.css</code> 和 <code>Artalk.js</code>，建议单独新建 <code>ArtalkCards.vue</code> 文件存放 Artalk 评论组件的代码，只在该模板中引入 <code>Artalk.css</code> 即可。</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token string\">'artalk/dist/Artalk.css'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>当前不必要的 <code>.css</code> 文件我们都让它在不得不引入时再加载。</p>\n<h3 id=\"引入-artalkjs\"><a href=\"#%E5%BC%95%E5%85%A5-artalkjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>引入 <code>Artalk.js</code></h3>\n<p>最初引入 <code>Artalk.js</code> 时，我参考主题使用 DisqusJS 的方法在 <code>.vue</code> 模板文件的 <code>&#x3C;script></code> 标签中这样写：</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token string\">'artalk/dist/Artalk.css'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Artalk</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'artalk'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Initialize post comment by Artalk</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> artalk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Artalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        el<span class=\"token operator\">:</span> <span class=\"token string\">'#artalkcomments'</span><span class=\"token punctuation\">,</span>\n        placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'说点什么 (づ￣ 3￣)づ'</span><span class=\"token punctuation\">,</span>\n        defaultAvatar<span class=\"token operator\">:</span> <span class=\"token string\">'mp'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// maxNest: 2,</span>\n        pageKey<span class=\"token operator\">:</span> <span class=\"token string\">'https://blog.monsterx.cn/some-page/'</span><span class=\"token punctuation\">,</span>\n        serverUrl<span class=\"token operator\">:</span> <span class=\"token string\">'https://lab.monsterx.cn/ArtalkServer'</span><span class=\"token punctuation\">,</span>\n        readMore<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          pageSize<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n          autoLoad<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>gridsome develop</code> 预览正常，但是发布时遇到「ReferenceError: window is not defined」，提示的报错信息都来自 <code>node_modules/artalk/dist/Artalk.js</code>，我以为是自己修改 Artalk 出的问题，于是又回去修改 Artalk 代码，将网上用来解决这个问题的几个方法都试了一遍依旧报错。正当我迷惑时，突然想到了 Gridsome 的源头 Vue.js 本身，于是我一拍脑袋在搜索时加了关键词 <code>gridsome</code>，这才发现原来和「Client API」有关。</p>\n<p>几个参考链接《<a href=\"https://stackoverflow.com/questions/40707481/window-is-not-defined-in-vue-js-2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">javascript - 'window' is not defined in Vue.js 2 - Stack Overflow</a>》《<a href=\"https://github.com/gridsome/gridsome/issues/646\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Failed to render / ReferenceError: window is not defined (vue2-leaflet) - issue #646 - GitHub @gridsome/gridsome</a>》《<a href=\"https://gridsome.org/docs/client-api/#isclient\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Client API - Gridsome</a>》</p>\n<p>虽然不知道这是个什么东西，但是大概说的是有些代码只能在客户端跑，服务端无法 <del>执行</del>「渲染」，比如 <code>window</code> 的操作。要说专业点，应该是关乎 S(erver) S(ide) R(ender)「服务器端渲染」的机制。根据上面第二个链接中 <a href=\"https://github.com/gridsome/gridsome/issues/646#issuecomment-578367659\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IHIutch 的回答</a>，成功找到了解决方案：</p>\n<pre class=\"language-diff line-numbers\"><code class=\"language-diff\">import 'artalk/dist/Artalk.css'\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">import Artalk from 'artalk'\n</span></span>\nexport default {\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // ...\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> mounted() {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   // Initialize post comment by Artalk\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   if (process.env.NODE_ENV === 'production') {\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     let Artalk = require('artalk')\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     var artalk = new Artalk({\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       el: '#artalkcomments',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       placeholder: '说点什么 (づ￣ 3￣)づ',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       defaultAvatar: 'mp',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       // maxNest: 2,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       pageKey: 'https://blog.monsterx.cn/some-page/',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       serverUrl: 'https://lab.mocurio.com/artalk/',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       readMore: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">         pageSize: 15,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">         autoLoad: true,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     })\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span>}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>L10 <code>process.env.NODE_ENV === 'production'</code> 和 <code>process.isClient</code> 实际体验应该都差不多。上面两处注释掉的 <code>maxNest</code> 是我修改后具有的功能，原版开启后不会有效果，该项不设置时默认显示三层嵌套。</p>\n<h2 id=\"最终模板\"><a href=\"#%E6%9C%80%E7%BB%88%E6%A8%A1%E6%9D%BF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>最终模板</h2>\n<p><del>在 <code>/src/components</code> 新建 <code>ArtalkCards.vue</code> 作为 Artalk 评论区模板</del> 我对 Gridsome 的模板还不太熟悉，总之直接在需要引入评论区的页面直接加好了：</p>\n<pre class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token comment\">&lt;!-- --></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>artalk-cards<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admonition admonition-warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">></span></span>\n        Comment on this blog\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n        评论如无特殊原因均不会被删除，提交前请三思。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span>\n        你应该懂得如何发表适当的观点，请对自己的言论负责。\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LetsArtalk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token comment\">&lt;!-- --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'artalk/dist/Artalk.css'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Initialize post comment by Artalk</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token maybe-class-name\">Artalk</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'artalk'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">var</span> artalk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Artalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        el<span class=\"token operator\">:</span> <span class=\"token string\">'#LetsArtalk'</span><span class=\"token punctuation\">,</span>\n        placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'说点什么 (づ￣ 3￣)づ'</span><span class=\"token punctuation\">,</span>\n        defaultAvatar<span class=\"token operator\">:</span> <span class=\"token string\">'mp'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// maxNest: 2,</span>\n        pageKey<span class=\"token operator\">:</span> <span class=\"token string\">'https://blog.monsterx.cn'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$page</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">post</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">,</span>\n        serverUrl<span class=\"token operator\">:</span> <span class=\"token string\">'https://lab.monsterx.cn/ArtalkServer'</span><span class=\"token punctuation\">,</span>\n        readMore<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          pageSize<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n          autoLoad<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>page-query</span><span class=\"token punctuation\">></span></span>\nquery Post ($id: ID!) {\n\n  // ...\n\n  post: post (id: $id) {\n    path\n  }\n}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>page-query</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scss<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\"><span class=\"token class\">.artalk-cards</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--at-bg-main</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--radius</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--content-width</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span> auto <span class=\"token number\">100</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">5</span><span class=\"token unit\">px</span> <span class=\"token number\">0</span> <span class=\"token color\"><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token number\">15</span><span class=\"token unit\">px</span> <span class=\"token number\">0</span> <span class=\"token color\"><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\">details</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top-left-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--radius</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top-right-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--radius</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">summary</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token unit\">px</span> auto <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--cb-admonition-icon-color</span><span class=\"token punctuation\">)</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.75</span><span class=\"token unit\">rem</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span><span class=\"token unit\">rem</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--title-font-family</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">summary<span class=\"token pseudo-element\">::-webkit-details-marker</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">--at-font-color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token id\">#LetsArtalk</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">767.5</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">details <span class=\"token combinator\">></span> p</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token id\">#LetsArtalk</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** */</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据需要自己修改下 <code>&#x3C;template></code> 的内容，注意保证只存在一个「主标签」，比如我的是 <code>&#x3C;div class=\"artalk-cards\"></code>。修改 L29-37 为自己的 Artalk 参数，<code>pageKey</code> 需要自行拼接为页面 URL，否则后端发送的邮件中「查看回复」按钮可能链接到奇怪的地方导致体验极差，其他参数查阅 <a href=\"https://github.com/monsterxcn/Artalk/blob/master/types/artalk-config.d.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">artalk-config.d.ts</a>。<code>&#x3C;style></code> 是我针对当前主题做的一点适配。</p>\n<p>考虑到能看到这里并且有意愿尝试 Artalk 的人应该极少，我悄悄说一句大家可以使用我搭的 Artalk PHP 后端尝尝鲜吖，它运行在阿里云 <del>北京</del> 上海学生机，并发访问除了我自己的站点应该就没了，而我自己的站点访问也很少，所以服务器压力不大，给大家玩玩还是可以的。将配置中的 <code>serverUrl</code> 字段填写为 <code>https://lab.monsterx.cn/ArtalkServer</code> 来使用本站后端，跨域访问目前允许，不必向我申请。</p>\n<blockquote>\n<p>其实通过 phpcomposer 安装搭建 Artalk PHP 后端也十分简单。目前发现需要注意的是 PHP 得开启 GD 库和 FreeType 支持，否则无法生成图形验证码。<br />\n使用别人的后端存在一些不足之处：邮件模板、发信设置只能使用搭建者的，目前 Artalk 对多站点的支持尚不完整。<br />\n担心引用本站后端存在数据安全或其他问题可以尝试自行搭建。<del>以后有空可能写一篇 Docker Artalk PHP 后端的文。</del> 如果对上述内容有问题欢迎留言。</p>\n</blockquote>\n"}},{"node":{"title":"GitHub README.md 显示博文并自动更新","path":"/code/update-your-posts-in-readme/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/readme-update-posts.a209973.f393ea57d8de7faf75fb828605c2dbee.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/readme-update-posts.a67b0b2.f393ea57d8de7faf75fb828605c2dbee.png 480w","/assets/static/readme-update-posts.a209973.f393ea57d8de7faf75fb828605c2dbee.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-08b4391f22145ab56f4ff295572763eb'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-08b4391f22145ab56f4ff295572763eb)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAJg0lEQVRIx5WXeVCU9xnHF4XIsfe%2bC3vA1Dbapl6JphKixgsBcbkXdt37YFm52QsQFhaQe7nvZblvAQMsCwhGq4lxNE1TxzTWmJq0Hm2mdiaZdPpXp9Pp83t3PUgV6cwz7yw7sDyf5/k%2b3%2bdZAqYZYCT3Pwt1H0PVw1DZ6QobXdZBEzVRE2spseXkqGJSRJ6/wsYxLnD0Do5%2bHp5cw3yQwfkT0wJX78Cy55hZ8I6TY5iHYMPv6Ob8VT00YQNV2ECXtNHlXXRpB3ohaaWdbKIK6qn8GkpMGSk8lxxfQdI6vZOXiMpRuqydobQz1L3ufCA9zQCWMvyyIGCaQcbzDPCXKrsbQNpOEzRQ4yvJ0aWk46cpJ8zsjLMcoxOScwVXDwALHJ3TP9sRXn9F0fPJDvMySzfPRQwOhKGbY2VOBaQMYfJOuqQdUqeLmt3ZJ9ZSE6rI0Ra/MFOQpmdr8XV/3UWGqg/%2bKaqguucpAPYqgKHVHcDLr%2bymyzpp4hZqkpUSewbKTwwzMpJqITOWbg5SDzQ4UZb6uUDD/LsVF2Nars5%2b9ujynb9N/%2bZBcNkHLJ3D1QcW9AF6Av2Rd9GEjbSTjVSoiKAOz74aGkviFTNiig6ULfNsd3dZriBOeZergkgLeEpQ4rUAVpU/ue%2b58ndAqSgJ1eSYUlJkISnMFKDu5ZoW3bU3zAcaF7i5y4GmpZK5Lz5/%2bP3Vu491EzeBIabtGiNnHsBATmzgNC6w0ydoSVYqijp4gqgo/FpKfAUlupTIs/z0ZNXr2t6d5gt7zU7UJWW3G%2bAJw6sAVpW/111%2b0KukHRoN/4YcZSGG51F4ReysaY678A4WJJc5yZI2s1Td27IGGi98deGLbz/%2b8tuOS/e42n7/5F6ucRH6w0ofR5Og6IZig9wpsWUUKMehVDLPTIm2oE8%2bYfaPNgen1G3Xtm3V2qHtqwAQQy8GClw3wAv0Q%2bIVgX4wYYN7NPW4uGGUMyboR9MYcZYAYbW8arTt7EqlbeJgySxd2hqg7GSljWHCWiyhFONXkA%2bnEveriSEy4uF0Mq/Id0ek368ExENpfiFSr2DZzqhTOkvD3hQrA6oG%2bvkxQN8a2f8IYLV%2bhE0Ufg2un9NIPykD4D9s/Rz4D8IAAEgx0kCOK9%2bfWicu6pIU2wwltdtM0wxZG5ZYwYgtph/XMwXV1KNpfntFPvtU3iFy4pEM0pFM3xCZ39EsYojEZ0/iz45INMYKS3XL5vjTFKkNMawGwEBC2mEUrwZ46j9y3H9AqeA/SD%2b5lOgSds77HIPLOpFRBhqdWNZsdMPF/stftV%2b4s/L5X2av3U6p7Gcl96AWZU5CsDOn/TPPwRR5hxo8Rd0e8iHPk53e/HpPUZenYsgzoYEjrBUXdr0uKBMVdARndvkJWxCAwvZ8E9AAuABegkF4gX7gU8StSD9x5aQTRcRjRkzcHGgCTTtc/uPaAAG6%2be1FKzWLd75%2b/M9P//Td1KcPdhcv%2bufMAVsgDIBhYXP%2b4q5C5xZxNUdk9VCMeqjGCaqJZyEZ2CKrk5QNEUUdIVm2rcomcmIdA3wWxuApAwyAZngVgHY9ADAAohYqGAVsGdBPRB7r1AgXB3ANAHg8JBp85oPS2d/XLv4BDFRiv54z9rufF5xH6jI4goxOcNKdxct3/vrDf/79L033hwTh4EblGEExSoAnhGocGuKT1BRjGY0um8Jknd5im6%2bkiyJqRbtC/oQB9PM015dgEF4yAI34likhhuXSYs9wcmY4Btd6mscl5ACD/2XhUqXz9s373928/33huVu/KFiCpLn4rwUZF4DBN2Wieura3QePfRQDmzQT2/Jn6WmTBMWYhxIFQTkO4aUeY2qHfQXNXmI7tGWDcoQo6WSImt12tAbAEwzCcxcEAHSjAXAZKOiHZwb9MGUd%2bPi6dxMKoxP0s6/yUuPKl/Xn72oHfztx4/7B6ovMHAfX6HR3ybSIpYwExeS/nWEjaSfeNs/vNzt2GcZ9NSPAgFqBFIUY0I%2boOSOuN73kg2RRC2gY5gHK%2bmwJaF8cqwBWDQAY6PECcmQBK23CBcDGdzCKzMkg/Uxc85Vbj3747JvHIx/fq1m4vTl/GRrFzj7HMS7CxLN1s5ioySdYToiqDsyePjPQYumuaBsuFNfX%2b6ZMBeqmQUIE6QBBOogA1JOE5EmC%2bizikfRBH16T91MUvfhBAafE0P8DgAagmcqvhvuHGG6iJ1Rx8aQ5%2bHHGNS0FSJvJgrrQguGs5snctqnUmkFNZd/B3H52xiQr2c6IMQNnQEo/PdIIxu%2b9PXIjv8ErrubirHBlMqq5KX6vMnWb0npA17lTWko5kcdWtG0xzdAkrYQ4qwc4Fb9pw7FcxKMc91EOYmo7vonXBdD7DAA2ABgor4gUbvRX2mD7Qk5wGuAAi/Q4y2ZN1zFdy6GMBl1NT1XXmLq4mZFUxeSfYSaWQ96YqD4gbYzyrthnB%2b%2b13XwAIBw2hCsEiTlqSkIxM8b8psC4R3z6cHrtG0n5x83Dgtr3dwjzN4YaPQ7rCO9lEiIKcV2NEuV2TAVjANfo0Boq%2bh8AKT4AcGbB%2bckzo7ri4uHgT65pgaYZSm%2beybcvxpZPnV2%2bZp/7SNHoCFDbA8SNTFkL86SVlTrCSp%2bgHMv2eYvvGVHoEW/1iK8j8GoIEWWE6Fqy0k4XN3nzrW%2bmdx7S297R2d8z9oad7g/N73vjVIe/qM6Xb/VKPrtJNUKVdaKxRAfpugDwIQYLkrRRE61goLC/GAKry/vhAmXhDFyDg5HtGLnx0PbRn2Pbr9dfuHfz4T%2bSum7Qs52Beec5piU479DA5MyQI/J8Qk0bYEyRuCc9kic9NFPoNWwANXonyIgqgmXNcPWzByqWY5ouJbZeTmi5sq9ihZY%2bRVUPgJmissKtmbLuDjwFIEeVgP0HJPfh1z%2baXZZ7CThgAQs7r33y9d8Hr35j%2b/Ufl2492l2yjGXPcPQ4IRzSRidTZffbp9kUU4l8BrwF2f/okxe457h%2blI/gMeqpHudkTb9VOLfH7HjH4tygHCXKuhlKGzJ3GOJ1AUCoeugugCQrmWehxpbB%2bcl2XT74EYHyw5/wTqj1Muzg7iv3TjR9CEvNZf9cfEPD/UyPL/fZfwrOB1Rvd8avCsQzCuvCTzu5QT5Ic30rQPoZXHsVrN7ECnwJJNWBhDBpu2tnuY/QJ/m5HAnLnqVlzjCyZpnZc64vN1z8Syb6kpA1TTqa7R2W56EcXW/2zzBQ%2bMh60BLAv1Viaw4AxH8BmBiwkh0ecp8AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"date":"August 18. 2020","timeToRead":18,"cjkWordCount":3494,"cjkReadTime":11,"description":"看见别人的 GitHub 主页都换上了 README，我就也安排上了。顺便网上冲浪现学 Python 做了个通过 RSS 获取最近博文并自动更新到 README 的小玩意。","content":"<p>今年 GitHub 推出了 profile-level README 的新特性，只要新建与用户名同名仓库并创建 <code>README.md</code> 就可以在 GitHub 个人主页上看到其内容。比起单纯的固定仓库或 Gist 在个人主页，我觉得这会让 GitHub 主页变得更多姿多彩，戳官方 <a href=\"https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-your-profile-readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a> 了解更多。然而，像我这种菜鸟想了很久都没有想清楚在个人主页上到底写点什么，拿得出手的项目是不存在的，刷 commit 也只是满足下自己的虚荣心而已，能力提升微乎其微。</p>\n<p>这段时间看了很多个人介绍仓库之后，发现我想多了：GitHub 是什么？<del>全球最大的同性交友网站啊！</del> 又不是世纪佳缘，写得漂亮能找着对象吗？开心就好，介绍下自己，放张关于自己仓库的小卡片，留点 E-mail Twitter 之外更丰富的社交链接，这个 <code>README.md</code> 就达标辣！（靠 GitHub 找工作的话那当我没说。</p>\n<p>单单写 READMD 没什么好记录的，本文就记录一下自己为了让 README 稍稍有点逼格，制作「从 RSS 获取最近更新并以 Markdown 格式写入 README」功能的经过吧。毕竟对于萌新我来说，做出点有意思的东西是很有成就感的。</p>\n<blockquote>\n<p>写着写着就变成了幼儿读物的感觉，请不要笑话我了，毕竟我是个萌新，阿巴阿巴 🤪 <br />\n看完这篇文章你至少会了解到「萌新如何开始学习别人的代码」「GitHub Actions 如何跨仓库执行」「从 <code>workflows_run</code> 触发工作流」</p>\n</blockquote>\n<h2 id=\"从文章中学习\"><a href=\"#%E4%BB%8E%E6%96%87%E7%AB%A0%E4%B8%AD%E5%AD%A6%E4%B9%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>从文章中学习</h2>\n<p>一切是从这里开始的：《<a href=\"https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a self-updating profile README for GitHub - Simon Willison’s Weblog</a>》，这位作者的仓库 <a href=\"https://github.com/simonw/simonw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@simonw/simonw</a> 显示了三栏自动更新的内容，包括 GitHub 上的打包发布、博客文章和另外一个站点 T(hings) I L(earned) 的条目。这三栏分别使用了三种途径获取最新内容的，均由 Python 实现：</p>\n<ul>\n<li>「GitHub GraphQL API -> python_graphql_client -> Latest Release」</li>\n<li>「RSS Atom feed -> feedparser -> Latest posts」</li>\n<li>「Datasette API -> SQL query -> Latest entries」</li>\n</ul>\n<p>第一个和第三个我都不了解，只有 RSS 的格式稍微懂一点，巧的是这正好能用来获取博客最新的文章。动手开始！</p>\n<h2 id=\"面向谷歌编程\"><a href=\"#%E9%9D%A2%E5%90%91%E8%B0%B7%E6%AD%8C%E7%BC%96%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>面向谷歌编程</h2>\n<p>查看仓库现成的 <code>build_readme.py</code> 文件，一眼扫下来有 218 行，有点晕。一遍看下来 GitHub GraphQL API 和 Datasette API 相关的占了较大篇幅，这说明通过 RSS 获取博客内容的代码较少。这时候我选择找到第一个版本的文件，我觉得最初的版本大概率应该是最简陋的，能让我最快的搞清楚代码的大体结构。第一个版本的 <a href=\"https://github.com/simonw/simonw/commit/d2b5e8ba30b0d2b1a867e0bfafa1215a2b5ef287#diff-b8502c56279bd4ac52ccb69f70e81a13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build_readme.py</a> L139，就从这里开始吧。</p>\n<details><summary><strong>从零开始学 Copy</strong></summary><br />\n<p>从 L107 <code>if __name__ == \"__main__\"</code> 处开始读，截取在下面 L1。这句相当于 C 语言的 <code>int main()</code>（尝试白嫖腾讯云无服务器环境的时候从环境设置里学到的。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    readme <span class=\"token operator\">=</span> root <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n    releases <span class=\"token operator\">=</span> fetch_releases<span class=\"token punctuation\">(</span>TOKEN<span class=\"token punctuation\">)</span>\n    releases<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> r<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">[</span><span class=\"token string\">\"published_at\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"* [{repo} {release}]({url}) - {published_at}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>release<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> release <span class=\"token keyword\">in</span> releases<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    readme_contents <span class=\"token operator\">=</span> readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>readme_contents<span class=\"token punctuation\">,</span> <span class=\"token string\">\"recent_releases\"</span><span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span>\n\n    tils <span class=\"token operator\">=</span> fetch_tils<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tils_md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"* [{title}]({url}) - {created_at}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                url<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                created_at<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"created_utc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> til <span class=\"token keyword\">in</span> tils\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tils\"</span><span class=\"token punctuation\">,</span> tils_md<span class=\"token punctuation\">)</span>\n\n    entries <span class=\"token operator\">=</span> fetch_blog_entries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n    entries_md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"* [{title}]({url}) - {published}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>entry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> entries<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blog\"</span><span class=\"token punctuation\">,</span> entries_md<span class=\"token punctuation\">)</span>\n\n    readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>release</code> <code>til</code> 命名的很显然是获取 GitHub 和 TIL 最新内容相关，于是获取博客更新的主要代码就筛选出来了：L1-2 L27-33。L2 用到的变量 <code>root</code> 并没有出现定义，接下来找他的定义和用到的函数 <code>fetch_blog_entries()</code> <code>replace_chunk()</code>。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">root <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 库 pathlib</span>\n\n<span class=\"token comment\">## ...</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">replace_chunk</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    r <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>                               <span class=\"token comment\"># 库 re</span>\n        <span class=\"token string\">r\"&lt;!\\-\\- {} starts \\-\\->.*&lt;!\\-\\- {} ends \\-\\->\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>marker<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    chunk <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- {} starts -->\\n{}\\n&lt;!-- {} ends -->\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>marker<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">## ...</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch_blog_entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 库 feedparser</span>\n    entries <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://simonwillison.net/atom/entries/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"entries\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"published\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"published\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> entries\n    <span class=\"token punctuation\">]</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看起来有些许复杂，此时应该提取出用到的 Python 库，实际调试的时候只要尝试单独运行这些代码块会得到未定义之类的错误，然后就能定位到缺失的库。在 Python 文件开头使用 <code>import</code> 导入。</p>\n</details><br />\n<p>下面是正式的面向谷歌编程，也就是学习用轮子（作者用到的那些库 pathlib、re、feedparser）：pathlib 库看起来没有需要谷歌的，一个能获取文件路径的库。re 库用到了正则表达式，结合作者在仓库第一版 <code>README.md</code> 中写的 <code>&#x3C;!-- blog starts --></code> <code>&#x3C;!-- blog ends --></code> 这样的标记，不难理解是将结果通过正则匹配找到位置，然后进行替换。feedparser 库从一个 Atom 链接获取了包含文章信息的数组，是为「源头」。</p>\n<h3 id=\"feedparser-解析-rss\"><a href=\"#feedparser-%E8%A7%A3%E6%9E%90-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>feedparser 解析 RSS</h3>\n<p>《<a href=\"https://vimsky.com/article/4399.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在 Python 中使用 Feedparser 解析 RSS - 纯净天空</a>》一篇足矣，或者看英文版《<a href=\"https://www.pythonforbeginners.com/feedparser/using-feedparser-in-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Feedparser in Python - PythonForBeginners</a>》。当然，RSS 文件也要有一丢丢了解。XML 格式由 HTML 触类旁通不难理解，可以试着戳 <a href=\"https://blog.monsterx.cn/feed.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a> 看看本站的 RSS 源格式。在每个 <code>&#x3C;item></code> 中包含了 <code>&#x3C;title></code> <code>&#x3C;link></code> <code>&#x3C;pubDate></code>，用来输出到 <code>README.md</code> 够了。</p>\n<p>参考链接文章用的是 <code>dic['feed']</code> 这种格式，用起来和 <code>dic.feed</code> 是一样的，就用后面这种短一点的写个示例。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> feedparser\n\n<span class=\"token comment\"># 解析本站的 RSS 源</span>\ndic <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'https://blog.monsterx.cn/feed.xml'</span><span class=\"token punctuation\">)</span>\nchannel <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">.</span>feed                 <span class=\"token comment\"># 获取 &lt;channel> 数据</span>\nitems <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">.</span>entries                <span class=\"token comment\"># 获取 &lt;item> 数据</span>\nitem <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>                    <span class=\"token comment\"># 获取第一个 &lt;item> 数据</span>\nsitetitle <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>title          <span class=\"token comment\"># 获取 &lt;channel>&lt;title> 数据</span>\nsitelink <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>link            <span class=\"token comment\"># 获取 &lt;channel>&lt;link> 数据</span>\nposttitle <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title         <span class=\"token comment\"># 获取 &lt;item>&lt;title> 数据</span>\npostlink <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>link           <span class=\"token comment\"># 获取 &lt;item>&lt;link> 数据</span>\npostdate <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>published      <span class=\"token comment\"># 获取 &lt;item>&lt;pubDate> 数据</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sitetitle<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RSS 数据较多时 <code>print(dic)</code> 可能让人头皮发麻，自行体会吧。下面给出更直观的对比：</p>\n<pre class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rss</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>dc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://purl.org/dc/elements/1.1/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://purl.org/rss/1.0/modules/content/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>atom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/Atom<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>channel</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Monstx's Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>Monsterx CN - 学生 / 前端 / 电气<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lastBuildDate</span><span class=\"token punctuation\">></span></span>Tue, 18 Aug 2020 04:11:01 GMT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lastBuildDate</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docs</span><span class=\"token punctuation\">></span></span>https://validator.w3.org/feed/docs/rss2.html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docs</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>generator</span><span class=\"token punctuation\">></span></span>Gridsome Feed Plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>generator</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">atom:</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://blog.monsterx.cn/feed.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>self<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application/rss+xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token cdata\">&lt;![CDATA[ New Start ]]></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/life/new-start-with-gridsome/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>guid</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/life/new-start-with-gridsome/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>guid</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pubDate</span><span class=\"token punctuation\">></span></span>Sat, 15 Aug 2020 00:00:00 GMT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pubDate</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">content:</span>encoded</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token cdata\">&lt;![CDATA[ &lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p> ]]></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">content:</span>encoded</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!-- 另外一篇文章 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!-- 另外一篇文章 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>channel</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rss</span><span class=\"token punctuation\">></span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解析后：</p>\n<details><summary><strong>freeparser 解析结构</strong></summary><br />\n<pre class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  'feed'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'title'<span class=\"token operator\">:</span> <span class=\"token string\">\"Monstx's Blog\"</span><span class=\"token punctuation\">,</span> \n    'title_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      'type'<span class=\"token operator\">:</span> 'text/plain'<span class=\"token punctuation\">,</span> \n      'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n      'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n      'value'<span class=\"token operator\">:</span> <span class=\"token string\">\"Monstx's Blog\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'links'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        'rel'<span class=\"token operator\">:</span> 'alternate'<span class=\"token punctuation\">,</span> \n        'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n        'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n        'rel'<span class=\"token operator\">:</span> 'self'<span class=\"token punctuation\">,</span> \n        'type'<span class=\"token operator\">:</span> 'application/rss+xml'\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n    'link'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/', </span>\n    'subtitle'<span class=\"token operator\">:</span> 'Monsterx CN - 学生 / 前端 / 电气'<span class=\"token punctuation\">,</span> \n    'subtitle_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n      'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n      'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n      'value'<span class=\"token operator\">:</span> 'Monsterx CN - 学生 / 前端 / 电气'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'updated'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">01</span> GMT'<span class=\"token punctuation\">,</span> \n    'updated_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">18</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">11</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">231</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n    'docs'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//validator.w3.org/feed/docs/rss2.html', </span>\n    'generator_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>'name'<span class=\"token operator\">:</span> 'Gridsome Feed Plugin'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'generator'<span class=\"token operator\">:</span> 'Gridsome Feed Plugin'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  'entries'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      'title'<span class=\"token operator\">:</span> 'New Start'<span class=\"token punctuation\">,</span> \n      'title_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        'type'<span class=\"token operator\">:</span> 'text/plain'<span class=\"token punctuation\">,</span> \n        'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n        'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n        'value'<span class=\"token operator\">:</span> 'New Start'\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n      'links'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          'rel'<span class=\"token operator\">:</span> 'alternate'<span class=\"token punctuation\">,</span> \n          'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n          'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n      'link'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/', </span>\n      'id'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/', </span>\n      'guidislink'<span class=\"token operator\">:</span> False<span class=\"token punctuation\">,</span> \n      'published'<span class=\"token operator\">:</span> 'Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> GMT'<span class=\"token punctuation\">,</span> \n      'published_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">15</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">5</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">228</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n      'content'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n          'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n          'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n          'value'<span class=\"token operator\">:</span> '&lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p>'\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n      'summary'<span class=\"token operator\">:</span> '&lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p>'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 另外一篇文章</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n  'bozo'<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \n  'headers'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'Server'<span class=\"token operator\">:</span> 'Tengine'<span class=\"token punctuation\">,</span> \n    'Content-Type'<span class=\"token operator\">:</span> 'application/xml'<span class=\"token punctuation\">,</span> \n    'Transfer-Encoding'<span class=\"token operator\">:</span> 'chunked'<span class=\"token punctuation\">,</span> \n    'Connection'<span class=\"token operator\">:</span> 'close'<span class=\"token punctuation\">,</span> \n    'Vary'<span class=\"token operator\">:</span> 'Accept-Encoding'<span class=\"token punctuation\">,</span> \n    'Strict-Transport-Security'<span class=\"token operator\">:</span> 'max-age=<span class=\"token number\">31536000</span>'<span class=\"token punctuation\">,</span> \n    'Date'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span><span class=\"token number\">37</span><span class=\"token operator\">:</span><span class=\"token number\">32</span> GMT'<span class=\"token punctuation\">,</span> \n    'x-oss-request-id'<span class=\"token operator\">:</span> '5F3BD99C7DD3BB333136465D'<span class=\"token punctuation\">,</span> \n    'x-oss-cdn-auth'<span class=\"token operator\">:</span> 'success'<span class=\"token punctuation\">,</span> \n    'ETag'<span class=\"token operator\">:</span> 'W/<span class=\"token string\">\"7885150FF626A52F9C8E511300EDC191\"</span>'<span class=\"token punctuation\">,</span> \n    'Last-Modified'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">35</span> GMT'<span class=\"token punctuation\">,</span> \n    'x-oss-object-type'<span class=\"token operator\">:</span> 'Normal'<span class=\"token punctuation\">,</span> \n    'x-oss-hash-crc64ecma'<span class=\"token operator\">:</span> '<span class=\"token number\">904326687370716414</span>'<span class=\"token punctuation\">,</span> \n    'x-oss-storage-class'<span class=\"token operator\">:</span> 'Standard'<span class=\"token punctuation\">,</span> \n    'x-oss-server-side-encryption'<span class=\"token operator\">:</span> 'AES256'<span class=\"token punctuation\">,</span> \n    'Content-MD5'<span class=\"token operator\">:</span> 'eIUVD/YmpS+cjlETAO3BkQ=='<span class=\"token punctuation\">,</span> \n    'x-oss-server-time'<span class=\"token operator\">:</span> '<span class=\"token number\">40</span>'<span class=\"token punctuation\">,</span> \n    'Via'<span class=\"token operator\">:</span> 'cache36.l2cm9<span class=\"token number\">-5</span><span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kunlun8.cn2479<span class=\"token punctuation\">[</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>'<span class=\"token punctuation\">,</span> \n    'Timing-Allow-Origin'<span class=\"token operator\">:</span> '*'<span class=\"token punctuation\">,</span> \n    'EagleId'<span class=\"token operator\">:</span> '249c511c15977578523801838e'<span class=\"token punctuation\">,</span> \n    'Content-Encoding'<span class=\"token operator\">:</span> 'gzip'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  'etag'<span class=\"token operator\">:</span> 'W/<span class=\"token string\">\"7885150FF626A52F9C8E511300EDC191\"</span>'<span class=\"token punctuation\">,</span> \n  'updated'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">35</span> GMT'<span class=\"token punctuation\">,</span> \n  'updated_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">18</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">11</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">35</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">231</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n  'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n  'status'<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> \n  'encoding'<span class=\"token operator\">:</span> 'utf<span class=\"token number\">-8</span>'<span class=\"token punctuation\">,</span> \n  'version'<span class=\"token operator\">:</span> 'rss20'<span class=\"token punctuation\">,</span> \n  'namespaces'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'dc'<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//purl.org/dc/elements/1.1/', </span>\n    'content'<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//purl.org/rss/1.0/modules/content/', </span>\n    ''<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//www.w3.org/2005/Atom'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>可以看到解析出来像是 JSON 格式，而且不仅仅包含 XML 文件可见内容，HTTP Header 信息也在其中。值得注意的地方： <code>&#x3C;item>&#x3C;pubDate></code> 并不是通过形如 <code>items[0].pubDate</code> 获取，而是 <code>items[0].published</code> 。根据这个结构更加灵活的运用 feedparser 吧！实现 README 自动更新最近博文并不需要这些，我给的示例足够用了。</p>\n<h3 id=\"re-正则表达式替换\"><a href=\"#re-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9B%BF%E6%8D%A2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>re 正则表达式替换</h3>\n<p>学 re 库从 Python 官方文档开始：《<a href=\"https://docs.python.org/zh-cn/3/library/re.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">re --- 正则表达式操作 - Python 3 中文文档</a>》。不过最重要的还是学会写正则表达式，多写一些多搜一搜，时间久了自然就会了，我是这么想的。这里给出用于匹配 <strong>指定字符串之间所有内容且不包含指定字符串</strong> 的正则表达式。</p>\n<ul>\n<li><code>(?&#x3C;=MARK)</code> 指定以 <code>MARK</code> 开头，遇到 <code>MARK</code> 后开始匹配</li>\n<li><code>(?=MARK)</code> 指定 <code>MARK</code> 结尾，遇到 <code>MARK</code> 前停止匹配</li>\n<li><code>.</code> 在默认模式匹配除了换行的任意字符。re 库中如果指定了标签 <code>DOTALL</code> 则匹配包括换行符的任意字符</li>\n<li><code>*</code> 对它前面的正则式匹配 0 到任意次重复，尽可能多地匹配</li>\n</ul>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 拼接正则表达式并指定标签 DOTALL</span>\n<span class=\"token comment\"># (?&lt;=(STARTMARK)).*(?=(ENDMARK))</span>\n\nstart <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- posts start -->\"</span>\nend <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- posts end -->\"</span>\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n    re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>re.compile()</code> 将正则表达式的样式编译为一个正则表达式对象（正则对象），如果需要多次使用一个正则表达式的话，使用 <code>re.compile()</code> 保存这个正则对象以便复用，可以让程序更加高效。参数：<code>re.compile(pattern, flags=0)</code>，参考官方文档给出介绍如下：</p>\n<blockquote>\n<p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong> <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> <br />\n返回通过使用 <code>repl</code> 替换在 <code>string</code> 最左边非重叠出现的 <code>pattern</code> 匹配的字符串。</p>\n</blockquote>\n<ul>\n<li><code>pattern</code> 可以是字符串或对象，在无匹配到时原样返回 <code>string</code></li>\n<li><code>repl</code> 可以是字符串或函数。<code>pattern</code> 为字符串时 <code>repl</code> 中任何反斜杠转义序列都会被处理，如 <code>\\n</code> 会被转换为换行符、<code>\\r</code> 会被转换为回车符。ASCII 字符的未知转义符会被保留供将来使用并被视为错误。其他未知转义符例如 <code>\\&#x26;</code> 会保持原样。反向引用（Backreferences）例如 <code>\\6</code> 将被替换为 <code>pattern</code> 所匹配到的第 6 组的子字符串</li>\n<li>\n<p><code>repl</code> 是字符串时，对所述的转义符和反向引用（Backreferences）中有几处特殊需要说明</p>\n<ul>\n<li>形如 <code>\\g&#x3C;name></code> 用作 <code>(?P&#x3C;name>…)</code> 语法定义的 <code>name</code> 组的匹配到的子字符串</li>\n<li>形如 <code>\\g&#x3C;number></code> 用作对应数字的组，例如 <code>\\g&#x3C;2></code> 就是 <code>\\2</code>，但它避免了同 <code>\\g&#x3C;2>0</code> 的歧义</li>\n<li>形如 <code>\\20</code> 会被解释为组 <code>20</code>，而不是组 <code>2</code> 后面跟随一个字符 <code>0</code></li>\n<li>反向引用（Backreferences）例如 <code>\\g&#x3C;0></code> 等同于由 <code>pattern</code> 匹配的整个子字符串</li>\n</ul>\n</li>\n<li><code>repl</code> 是函数时，在每次非重叠出现 <code>pattern</code> 时都会被调用。这个函数只能有一个 <em>匹配对象</em> 参数，并返回替换后的字符串</li>\n<li>可选参数 <code>count</code> 是要替换的最大次数，必须为非负整数。如果忽略这个参数或设置为 0，所有的匹配都会被替换</li>\n<li>空匹配（Empty matches）仅在不与先前的空匹配相邻时，才被替换。所以 <code>sub('x*', '-', 'abxd')</code> 将返回 <code>-a-b--d-</code></li>\n</ul>\n<p>文档太专业了，总之 <code>re.sub(pattern, repl, string)</code> 可以用 <code>repl</code> 替换掉 <code>string</code> 内所有与 <code>pattern</code> 匹配的内容，这便是最基础的用法了。使用编译后的样式 <code>pattern.sub(repl, string)</code> 效果一样。</p>\n<p>写个示例：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\nstart <span class=\"token operator\">=</span> <span class=\"token string\">\"STARTMARK\"</span>\nend <span class=\"token operator\">=</span> <span class=\"token string\">\"ENDMARK\"</span>\nrepl <span class=\"token operator\">=</span> <span class=\"token string\">\"text used to replace\"</span>\ncontents <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"text wait STARTMARK ing for being ENDMARK replaced\"\"\"</span>\n\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n  re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\npattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最终输出 <code>contents</code> 为 <code>text wait STARTMARKtext used to replaceENDMARK replaced</code>。</p>\n<h3 id=\"python-文件读写\"><a href=\"#python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python 文件读写</h3>\n<p>懒得深究了，因为从之前作者的代码里找到了关于读写的:</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 当前文件的文件夹路径</span>\nthisdir <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># .py 与 README.md 同级时获取 README 完整路径</span>\nthisfile <span class=\"token operator\">=</span> thisdir <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n<span class=\"token comment\"># 取得 README 内容</span>\ncontents <span class=\"token operator\">=</span> thisfile<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结合之前的 re 库示例实现替换</span>\nreadme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>C 语言文件读写 <code>fopen()</code> 后还有 <code>fclose()</code> 的，作者的代码里没有找到 close 之类的。应该是程序结束默认关闭了吧，急于实现功能，此处没有留意。</p>\n<h2 id=\"整理整套代码\"><a href=\"#%E6%95%B4%E7%90%86%E6%95%B4%E5%A5%97%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>整理整套代码</h2>\n<p>以上所有学习途径自以为都交代清楚了，最后整合时用了 <code>for</code> 循环和数组的 <code>[start:end:step]</code> 分割（像数学上的区间表示法）来获取最近的固定篇数，完整实现这个「从 RSS 获取最近更新并以 Markdown 格式写入 README」的功能需要的代码篇幅很短，Python 真有趣！</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> feedparser\n<span class=\"token keyword\">import</span> pathlib\n<span class=\"token keyword\">import</span> re\n\nrssUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://blog.monsterx.cn/feed.xml\"</span>\nstartMark <span class=\"token operator\">=</span> <span class=\"token string\">r\"&lt;!-- posts start -->\"</span>\nendMark <span class=\"token operator\">=</span> <span class=\"token string\">r\"&lt;!-- posts end -->\"</span>\nNUM <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_readme</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> repl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Splicing complete regular expressions</span>\n    pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n        re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Get contents and rewrite README.md</span>\n    readme <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n    readme_contents <span class=\"token operator\">=</span> readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> repl <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> readme_contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch_posts</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    blog <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    posts <span class=\"token operator\">=</span> blog<span class=\"token punctuation\">[</span><span class=\"token string\">'entries'</span><span class=\"token punctuation\">]</span>\n    markdown <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span>\n    <span class=\"token comment\"># Fetch only 5 latest posts' info</span>\n    <span class=\"token comment\"># My post.published return \"Tue, 30 Jun 2020 00:00:00 GMT\"</span>\n    <span class=\"token comment\"># So I just intercept the middle part of the character</span>\n    <span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> posts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># markdown += \" ※ 《[\" + post.title + \"](\" + post.link + \")》\" + post.published + \"&lt;br />\\n\"</span>\n        markdown <span class=\"token operator\">+=</span> <span class=\"token string\">\" ※ 《[\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\"](\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>link <span class=\"token operator\">+</span> <span class=\"token string\">\")》\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>published<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br />\\n\"</span>\n    markdown <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\\n [Read more..](\"</span> <span class=\"token operator\">+</span> blog<span class=\"token punctuation\">[</span><span class=\"token string\">'feed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\\n\"</span>\n    <span class=\"token keyword\">return</span> markdown\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    postsNew <span class=\"token operator\">=</span> fetch_posts<span class=\"token punctuation\">(</span>rssUrl<span class=\"token punctuation\">)</span>\n    update_readme<span class=\"token punctuation\">(</span>startMark<span class=\"token punctuation\">,</span> endMark<span class=\"token punctuation\">,</span> postsNew<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按需小小修改一下，执行 <code>python this.py</code> 即可替换指定字符串之间内容为最新的博客文章。「自动」的事情依旧交给 GitHub Actions，设置自己点 Star 触发和定时执行即可。给出我的工作流配置 <a href=\"https://github.com/monsterxcn/monsterxcn/blob/master/.github/workflows/new.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">new.yml</a>，和之前打卡项目相同的原理。（看到这里的你也许有兴趣读读我之前编写这种定时工作流的文章 🤣。</p>\n<p>上面的定时执行工作流也许对于像我这种更新缓慢的博客来说有点浪费，于是我又写了个从「博客」仓库执行的工作流，这样只要「博客」仓库有文章更新就会第一时间更新 README！使用前先根据《<a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Creating a personal access token - GitHub Docs</a>》创建一个 Personal Access Token，要有写入仓库的权限。然后将生成的 Token 作为 Secrets 写入「博客」仓库。最后在「博客」仓库新建 <code>readme.yml</code>。</p>\n<p>由于我的博客仓库暂时没有公开（想到稳定两周年那天再公开，整点仪式感），所以直接将仓库里的工作流贴在这里吧。只需要将自己的站点发布工作流名称、Token 在「博客」仓库中的 Secrets 名称、README 仓库地址修改到下面 L10 L22-23 即可。</p>\n<p>编写参考 <a href=\"https://github.com/actions/checkout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@actions/checkout</a> 和《<a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_run\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Events that trigger workflows #workflow_run - GitHub Docs</a>》</p>\n<details><summary><strong>从「博客」仓库更新 profile README 的工作流 readme.yml</strong></summary><br />\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update README\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 直接使用 push 触发可能无法获取最新状态</span>\n  <span class=\"token comment\"># 这里设为在发布工作流执行完毕之后触发</span>\n  <span class=\"token comment\"># push:</span>\n  <span class=\"token comment\">#   branches:</span>\n  <span class=\"token comment\">#     - master</span>\n  <span class=\"token key atrule\">workflow_run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">workflows</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Deploy to OSS\"</span><span class=\"token punctuation\">]</span>      <span class=\"token comment\"># 修改为你的站点发布工作流 name</span>\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> \n      <span class=\"token punctuation\">-</span> completed\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.UPDATE_README <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\"># 修改为自定义的 Secrets 名</span>\n          <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> monsterxcn/monsterxcn     <span class=\"token comment\"># 修改为 README 仓库地址</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.x'</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pip install feedparser\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> python build_readme.py\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Commit\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.md\n          git commit -m \\\n          \":beers: Update from BlogRepo at \\\n          $(date +\"%Y-%m-%d %H:%M\") \\\n          \" --allow-empty\n          git push</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<blockquote>\n<p>我的 README <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> 使用了 <a href=\"https://github.com/anuraghazra/github-readme-stats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@anuraghazra/github-readme-stats</a> 展示 GitHub 账号的统计信息，使用了 <a href=\"https://shields.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shields.io</a> 和 <a href=\"https://simpleicons.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple Icons</a> 生成精致的图标。快来给自己也安排一个吧！</p>\n</blockquote>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>《<a href=\"https://docs.python.org/zh-cn/3/library/re.html#re.sub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">re --- 正则表达式操作 --- re.sub - Python 3 中文文档</a>》</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>GitHub 仓库地址 <a href=\"https://github.com/monsterxcn/monsterxcn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/monsterxcn</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>\n"}},{"node":{"title":"Mark 并调试 HEU 自动打卡代码","path":"/code/heu-auto-checkin-covid19/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/auto-checkin-covid19.a209973.c87091a851f8ca767e5cbc6ea41ac4d9.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/auto-checkin-covid19.a67b0b2.c87091a851f8ca767e5cbc6ea41ac4d9.png 480w","/assets/static/auto-checkin-covid19.a209973.c87091a851f8ca767e5cbc6ea41ac4d9.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e9f822d21a3f4fb948604bebd5e5f005'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e9f822d21a3f4fb948604bebd5e5f005)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAJOElEQVRIx21XWW8b1xXmD0lbicNluO8iKVLiNpzh7Jwhh8NNi2VqsyxZuy1brpfYlpLa9ZI6dpM0St04TaIoCWKrSWqgqJHABtrYTVsUbZ8KJH1o6vil7Q/ombnkiLYDXAwOee%2bc%2bc4531muCXNQsCzOgsPHdcm81VXAnCBT2v/OQq%2bdhJ/uAI97GLND%2b2l103DG6qLhPLxlximbm7G5aaQEZNzLdmQa97aVw3kkg2ZdZo2PwivoAPoJT7uHRQIsgIG2kGx8yGS8r%2bsqoEPGE/4HZLiX7usvclxVKTdKcoPlquGoAAd6bKSui0FK7B4GPmkARTIYCUqQKvRVENDnQHMHEL8H1M93A9VlbQvOG84CPZoSXbMJ7ekb5NOG%2bnlwdrCPK8nVqtqoq82a2lTK1UpZrapNhlFiCcHhZRAg4y1ArIMjkRlOP2%2bYhGTkewDdbQwyz9DThtiOA9MJMgnRM3wPb8Ey6aBZjTAOZBxjOAz30OEYVypVVaVWLlXLJRWeJVmFBUJNrecIudfeJgwC1E0SZIyuEIXUAMcYJLFo5MwjcLBrxARMNQLbDRqiqmOjDK8hChW%2bi2SML8RwXFmWFKlYKYplgZOkogLoZVhFBf4XRcXlA3x7Gg0KWbQ4dJJK872gsRE%2b5CyADB/SkspBpclRVpzKM%2bMUP1HgJ4KxMliiIdPNQ1iNpNKVkx1/tZWbEEe7SdYha8EfolmmKPAyLJoWSJIFG0ShBIvjJJ6XZakcT4o29x7vjTh0kkojjMWetTnzmD1rdRAYTlgd%2bV5r1hUArTNldY4Rp7LkEMm0iuVZWZ0lmJZVR2nG87iPt3t5DNgIkCCp2goLemBpFNjuHEAkY2EPuSGRJJkCT5Ecy4g0xazPHzizOCHyRbogqFKJoXmOFbNE8akERYHWZC2wJB4oYuRxc/8kFttvJ1atfcPmYM0arrPDzxcXbmQr6%2bmxl9O1s5nRy%2bTszTBxgBm/3EfN9iZmrMlpjDiGZdcsyRlbfs0crGrGuxjcx3UnVdsAg3AgtOPgogOhDElQilTK5uifnFn739/u/PXXb8y1RlJp%2bvqZlWFFJkkukxUQfUEXCrdFIwmqKgUMz9vDFYzdwLgfmdWfY%2bJFTN3qEa%2bERl4nxy4lx7eofReCynk7fdouvOjf91a%2bup6rnVJa59ziprVwEiucxphNa3rRVryIBVWLbgCqrR2mMCajfoELYQ/QoIqOewWrc3BiSP3y1vWGWv3xidXPt69%2bfX976/wPi4L874e3NlZnMlk6n29HoKt6UEaV0JQ7aSCPPToEXsdcLOYtOiIqWzoUTQ0R4lwstz%2bYbNClBYKdcidGUlSr3FyRq/MDhaket2j1l2x9Q5hHxMINi78MRcXc1anaOQBFqqvdsEZpg/9dvkyRF/7%2byavXNo9f3zz%2b1f33vnl4%2b%2b72te2fvvjowYfnT6yAAam04A0JhhdQghrVoy07KbsLGJWH1LQ4SLubrg0tFZVZSZnhpalqc2lpZXN%2b6RzIsjrHFqcbo6usOPk9cwZOOr2MlgPge9RSOwYg2FoOoFQwzNATEZ0jzXbCbA0fX5j86t7OF7tbQKHHf/rVvx7eevzH3TtvXqpXqgTBuwO0xYiAkzI7nqjcbTOg/thBWx4AAQ6woVJfqNTm4SlVZgX5wPDYWnN0mZOmy9V5SZkbGTsMpen7WAYw6DGkjEqDFKL2iqqt6YnK3dXewQyKa01NLy4tr23fvPH7OzuP/nDr0Ze3v3l46z9/%2bfgXV84GwmQswds97eINueXw0IFg4dnKjfsFZ7iMByRPrO7uq7r6VL6yINTXxPqRJLEvSU2W64tS80g0O0aJM5lCi5QXs8yEO1aHk3Z/0e4TvDHI4DzWrpac0eMgJUzGl/TCx6GpBswQpKGpmcXRiTlWbg5PLt77ZOfxgw%2b/vr/z7cOP/vvn22PN1nOWrDvIId%2bDj3vwAjHIVmihF6c6DR9GIwYc7x8cG1RODpaO9RfX0tUzcX45X1pqLr9WmdwsT54vz13Pq8fokXOUerQ2taHsPzO08npSPjogr8e4ZXe0BqUp09hwBEsQQMsz/DR1t/pOHLTy5/EnfJHBaIoJxHLTc6t3t6//8/Ob337x/j/u3jy1vNqLa0FEvtc6oM6NMkkLObbX0RmNtNbD9dpy3sQwMXohQs700YeSpXUABH5VZ6/w6jLfONo4fIOvHZH2nWbr68XRU8PLr8qTF%2bLiWpicCeWmPRElMLgvxq9aPRyut2EjsKghmIyURRuY1goYX7wZjJe8wf5gdDAYzx04dPiDl09/9trRt186OToyHklIKUIdzCqGpyECQoYa4ahGgRqIUUZb0Pzipl0h2R2t%2b1P7cZ/gDsnOSKXHmnVHymL5oFxfATMEdUlUDgnVZbm2mCLHHCEFmAasg5M2DwfQ7eBZvTV1T25oNDIZVcmi93xvtB4aHIvnD/ZT833pMW8o7fRGhvYffPfyiTePD3t8EXcg3j%2bQSedIilGhB4ObgTMeL1mlciqZq8Mzn4UJ74mZGaoz1AMbAZ%2bAhgpsRtSCA30JpcC10vnhXGEsS44EoqUeWw56MOw6NKAUAto986KJwehaJmN8gL7jjTXC6YlwajyUaoVTrUh6KpxuOXypgli9cGz%2b7DifSiatzgCGe%2bKJtC8M9wStfAH74xFCzaVKmZSSS0nplM2lzVddo1FB73SCkWydTkfBJIeQgfADK2HzMF3jzN5YuRfqPQoBPxngsJYD%2bhhI4j7JGxvyRJvw9KEVH4bljlSSWfHqqYVXDpdvXz0aCEVd3mA0KVjdWusF6gPpE305aTAmDCSkdJJJDlidT1Xk9oxt3DTad5fO/IyuTU81EJRjhu91hFx310LeaVchrYsFSvaggsMKVfCQ6gipzrDqCNecweLsSOql5w99en3%2bd2%2bdfePapc2NF5ojS8HEcK9LfA7LAbJAWKAGiFIuxQ/EiWh/Z37WJzknZVy7UMbD9No1Mz/T9cC7XWMl6gBP3jf2ulb7QoPuRFaPYHELFnh6RIu3aIXlk2x%2bqQfPk3l%2b%2buDyyuLqvbcvPvjtx7vvv/PZpx/t7rz7wsbFc6c3f7n1s92dd36z%2b8F7W9f4gX4iEnJ5SGdANCb%2b7gvXdxLD2LVrFGpfUMHBXXc91pgdwObuwP4fenLbqpcgDcYAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"date":"April 5. 2020","timeToRead":15,"cjkWordCount":3549,"cjkReadTime":11,"description":"找资料逛博客的时候碰巧进入了一个学长的博客，发现了懒人福音的自动打卡 Python 脚本。本文记录 Python 萌新的调试过程（造轮子不行，用轮子一流..","content":"<p>最近这几天又不知道干点啥，天天上课累死了，前面的还没掌握就又要接新的知识，真是太难了。心血来潮想好好学一下 JavaScript 什么的前端基础，找资料逛博客的时候碰巧发现了一个学长的博客，看到《<a href=\"https://zjw1.top/2020/03/10/auto_checkin_during_covid19_and_cas_sso_learning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">疫情期间自动健康打卡暨 CAS 单点登录认证实践 - SiteForZJW</a>》这篇文章，常年起不来床的我赶紧点开了，啊啊啊我为什么没有早点发现这种好东西啊，生气。</p>\n<p>第一次看的时候了解到这个 Python 代码要自己先手动执行一边获取表单数据。Emmm，那是啥，好像不太了解呢，先 Mark 了！</p>\n<h2 id=\"python-和依赖\"><a href=\"#python-%E5%92%8C%E4%BE%9D%E8%B5%96\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python 和依赖</h2>\n<p>什么？你说这个年头还有人电脑上没装 Python？なんと！</p>\n<p>Windows 系统直接上 Python 官网下载安装包，注意将 Python 安装目录添加到 PATH 环境变量，一并安装 pip。如果运行时显示缺少模块就 pip 安装一下。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> --upgrade pip\npip <span class=\"token function\">install</span> requests lxml<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h2 id=\"获取-form-data\"><a href=\"#%E8%8E%B7%E5%8F%96-form-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>获取 form Data</h2>\n<p>今天早上起来的出奇的早（7 点半我就醒了），一想到学校的打卡十点前就要完成，我突然想到了那个自动打卡、表单数据的事情。于是我点开了浏览器开始尝试。</p>\n<p>打开 <a href=\"http://one.hrbeu.edu.cn/infoplus/form/JKXXSB/start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">网上办事中心 - 平安行动</a> ，虽然不知道是啥，但 F12 肯定会告诉我的。选择 Network 栏，网页从打开这个菜单后加载的所有请求都会在这里显示，先刷新一遍网页，找了一遍好像什么也没有（一开始我以为表单数据是缓存下来的什么东西），Emmm，提交一遍试试，点完确认提交之后 Network 最下面显示了一个新的名叫 <code>doAction</code> 资源，那一定就是你了！<strong>注意此时不要点确定，点确定之后该资源会被刷新掉。</strong></p>\n<p>好的，<code>Form Data</code> Get√ 。选择 <code>view parsed</code> <code>view decoded</code> 就能看到这个表单的所有数据，也就是之前 Python 自动打卡需要自定义的。完整存好 <code>formData</code> <code>boundFields</code> 的内容。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1901 1000' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b614ee0887ec85536d75e1e090ff7ac9'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b614ee0887ec85536d75e1e090ff7ac9)' width='1901' height='1000' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAIAAABgN0jYAAAACXBIWXMAAAsSAAALEgHS3X78AAAK70lEQVRYw6WZSXYbuRmAeZ3cLDfINjlBbpBN1v2y6SyyS%2bclrx2727baMiXKokSyyJrJmlFzVT7gJ8vU1O2n/IYhAIVC/fMAztI0LQ34vp9lGQN6P/DzokjiOAxDzw%2bCIAyDINaQTFDX9TiOQ9/neRZFUdu2evoN0Pf9M6vj2Js2nB1SqKKpmht/ecijNz%2b%2bORgwaMSgXRRFnucz0OUPE3CdVkGIPo5iqGJ3FMX7MBT09f80pVNKVVVVVhU7mUI50/oF4JHK81Lxr5Rdsl%2bfUJZ121a23S1uhtvb%2bu5erxhIUv0VN/KTLFmtVqAnBEgPqnx3VtYNpzR13TYNvW5NAzv5S88mz3N93zsYHkMYp3OoYOC6LociIE40O72nqHNabmDn2ksn8uIi9BzX87ScfR%2bugYTjOOnbd9vF8n65yd7%2b7N7ducHZoySFfRweGibyIYiRp5wwU0mUZekhS/mj%2bzSNTmB4H%2b2BMARFxocTyIZpUTZP68fXzTPZgNzyjx%2b3y9tby1n5iWPvQMi2bVgAKpzufrxY/PDm6l/v/J8/WKsVTPE9nw3b7RaMYRY9jBO5lYaDHHtxcTG7DIrV0mqWy3q1Lpd3uWXlRYlO6VboVohWZfkDMHonQ9n39VFx9mKhzEArW7rZxPt9VhRZ1SqDDQ9gDjRAjGXvoGq7WTuet7PtwNeWxzoSEMZPfAkNMID9PJ397rvgT3/5T7a6/u/i4%2bZuoX58yzfyLDvDU%2bVlmaPrrCszliljVeinelAe14sTVQa5rWUhAmQNAegZK2hOqo0oNaaUwuP1em1ZFtjsD4ftdhcGoTwSUYfafQQiXl6nF8XbG0A/Z398n/7tHxf9zWd/MU%2bv5/Wny7SslBGXbgysrbq6VpeXKgjUxlK3S3XzRc3nyrGVZSnH1Yv3K724WKj9QWWFvAsVYaStUEg6nAEYi%2bWABOjCaTZ0BrA0qIXO1oAsMmVRntKLcI2h1jO81i6q5qvDxsnWTrIKy6Tqy6ZXx9aptFDBQbmBypSKUnVI1D5WXqjXaSzGmV5kj79XRaXqTt4t2z4oWtxibTwVHx4N4B/BBmc6nsC4j3qashOyjWs9AlNx0wLiu2Q86/oeAi638W2Q3Qb5Fy/Lqw4CqnaoWk1J2Y3lMLK9GcZqGItuVL2elt1wbEx7s2cwi00vrWr6MKsH8z0wEPc/0TARcI7oOTxaf2k642%2b0T8LtbrfdblYr%2boyPg6gqq1oPun7oup6Wppn2AW1fN8z51%2btH0psNuumVYwPhSLUTAY9iGWw%2bRbDxPMAJWr0BGeheH/Zgp7yuCWDNjbP1dovFoo7Iumq1rNHi5kysQJamOlwYksZvg6Q8EoDKovdoPJRI6KRnEWeywTvFMe4Sw2WVqeO6bMNSsVd24mpwqffLJSdoH3AG%2bIAZdIRRjmUnOfpcZkWZVl3dDXy57QcGU%2btAfRjzWut30z149Gxjz774KgGw53siCmEwA/DDgrEBesll8P9QB4N5ixW8aRln74Lbv2%2bskWBrLFtCrZg7KjQc9uluvblfrTcby7YdDJeMpNH2ruU2NYIqK6DVQsfZ%2bkuNPfGZCh20l9zCzsnBT%2bEPC2ZqWRvmt24aJqprdfwG/8RkL1GRbbOsa5rqlJhImIcLWoWCVG22W9/zcNtaT4yGwIbqZOkCfAm96l6lQpMEQFSw3%2b12koBABvxmBeXB/185mZ/wXYRTQKqoHBkJR3UnmNwrMtQEeHG%2bsZ2Ntb27X/vhHk8Ciq1p50YpUyy8brX8u99qj4wYAohZ4E3opdea7fvoMevwkpW7uzsyj8%2b7xInyvmuJZuxEDsQ8PEpU6DytfioBiIgOWegFLpINQuIhoV7jqjX%2bSIY0%2bE5T2sP2Xf/g0bONPYeHKiTYIwF6o96BZL5wFHqQD9Z9lMDQaxUyEoBI8LXzpjyp/mQDRgKjNuLtBheqQUut1iEDMs9jh/ZCRMcG7r9ShfAquxNgDKJOnAlhIMQiLgi8iEhuXKAmqBOk8iJpEC79Jqq7dtDR10S9xoCxgXFwD%2blqs1mv6DZkGWXTSvCrH7pR/YH6NQTUJnAKAZIPa4%2bJvybDM9k4qIht4GDndhIkahw6Qo6k0OiYTgqr%2bvvgYl8WPc7nAQHD4McYseP6QZzmeKCs6rSr6Uesuem%2btta40aLWUbbtHjx6trXajTbiD1KTpYOl5JW4FhhPLxKAr%2bBK2o2uz3fpfZDbUSFCk/pLVylt8/Zg40gHbBhFmFQIj4cN7F3P1Rm4Dxm5DlamxsNhnzXjGEcMoNHudeh/q2nrUo3RvVTcJZEIIaM/lgEsQeoNRM0i/rKsmis7uXHT%2bS7Bx7qOg%2bgQka57qzrKa1KtWNVxcazmjirkHdLl3d1yufxyc8MHdBzQbMsfqRAYoAqviMSiQvAbFaKf/KAEMghgyuE6eDXtjYMEirsgPwYyeIovUgWn/RjNf3/z1z98TP88L%2bHQZMSj5R3watQX%2byAgnSeIsigyOsdGdE7cyyuMGGaLBCR5lvobesCPDdi0mMfO8Q5JRoEB2UEQIhnZX9UVuv%2bd9%2bYqpixVVh4Q7U8S2CNinCf5Y6eqNlEtSoQYdL7Qfm1YBS2velX3Tfvg0bONPfv8AQHgKpVAaGpcAAIYwynXALZ969EyzEBKcMxGS94UA5Itjv3ol4fvg/dhlZ1sIMoIY9RF641l2U5hVEi/0Pei99LMQt8YHz%2berb/UgPhMAkms8zY4LeWYVAjihdBVaMK9w/drO1362cIheCnfeCFA9PkYxTDoSucUH%2bJ122kJjPY%2bvb1fWZgRbu76uix0BqHtRqlzfeCgV6cSYOP4e4kAkgVBg9x6MAYtpKGvO6oaI1646bW%2bi0gxAB7JBYTEL4HK3KFUta6ZdD1woJLa7drddvx8OSwWVdX8Ck4mSL/GBnZuKEkENIC0aIUYsSRzWDoEzO104WZXtibAM%2baBiB4RUBsCMIuyk1QiyqsoJdcEdSwhqztKlvL2Xl3dVMFe58akIQ0hsMP/FmVTVhSjenrspbX9o9a0/T5vhlMFSBFSnYCpVJhTaQJOUqyYdH0oGr0ublCQfqZkMzd5s6HvDmVHzmKS%2bFF/m1y6KJOfPux%2b%2blD/89/1/bp%2bf1FfzmtrV3%2b%2bqq9v6l8%2b1x9/qT/N6/l1fXNbf/pcOx5v/Xo9UD0EuSArT3C8vSP8m1u2XntasvdO0p7mZZjhlIu6i4qGAJGUTWparur0l3n0/iK9t0gD4ziPU1276zYNkkKPiypOizivdHx52CIOKTVf9bWUKnAmGPHO5O34IhSJKUq1PYEoGCmSFGLnUDwHysAsSvI4Saoi4itJmodRhhf2oxQ34MRFQswrz0B4pnthnjqulOqlJgm9fEwHLFQ7y1mW257GcFjb5ROZnAvqKcjVC/YzC%2bLG38dj45E/BWn5xc2CrCKS/3y/f7cMg7QypfT4/4DUxOQFO9v59GX9ZaVjkySkJNdIAwuW3G7ylZJiyMXRU97jISHecdzFYjHDPZt5pu%2bsKR2yhAm9ytOSWiKOOUJqP4FpLJfsMpju/aZ70nMwV8JKXxJ7rr3bOvZufwKTouJYbXNR1UyZFJizHzp523idampMiwLfRcnvkf/PzDVeSr4lBX9iIgu8oZiAPeTslFFTKcgjvoqOSg0uK1KjsGe6ypRLhwn0jwlV9Q1yPC%2bovxVmjy4qBJInIJzmkVibCPH4i8H5zx4Gzo%2bShJl%2bupB6ekX19G7r7HePF2gdjnv%2bBzaCWi%2bQr5yGAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1901\" alt=\"Network\" data-srcset=\"/assets/static/heu-checkin1.82a2fbd.2e35e2c967dd8ae72bbd6d3ad3bee786.png 480w, /assets/static/heu-checkin1.cbab2cf.2e35e2c967dd8ae72bbd6d3ad3bee786.png 1024w, /assets/static/heu-checkin1.eaff22a.2e35e2c967dd8ae72bbd6d3ad3bee786.png 1901w\" data-sizes=\"(max-width: 1901px) 100vw, 1901px\" data-src=\"/assets/static/heu-checkin1.eaff22a.2e35e2c967dd8ae72bbd6d3ad3bee786.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/heu-checkin1.eaff22a.2e35e2c967dd8ae72bbd6d3ad3bee786.png\" width=\"1901\" alt=\"Network\"></noscript><figcaption>Network</figcaption></figure><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1901 1000' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0de6a417156f0b67252112b29abcd96b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0de6a417156f0b67252112b29abcd96b)' width='1901' height='1000' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAIAAABgN0jYAAAACXBIWXMAAAsSAAALEgHS3X78AAAM8UlEQVRYw7VYV3fbyBXmr8pz/kZe8ivyZFuyZKqwNzSCdFzkLiWbbPZ4rbU3Ttl4Ja3tldWLxQ4SBNgAkiBBgqLyzQxFU267zjm5uh4PLmaIe%2bf2cTWbzQ6FSqXSarW63S5GOm83TaNarWp6BWO1UjVN0zAMjM0mBtO27eFwOBgM2u12o9Ho9/t4PP0l%2bBVL3oFlWT27d6Kn663G%2bto6vl6v1/EtykPTouACu2wGJhkVFKxrUbY0Ta/Xsa2Bt2ynYZARAJl7vR7EgAB4hOSY9z4BeNO1rG6XrhpRbLZ%2bPA76/dOBw970KbDDVetlo2Vk0hkwBh4gBhsZqy671%2b/Sn8SG8ffYvO84VqdTLpc1TYNIIGJk0uIb%2bOlSqYRvVKpERRADKyk3I2ScYVebQrFcSqkNzbCqmlrWdHxb13VshFJLJRULlHItU9TaVkcrE8ArnIuqlltmixiCpsEuwDq%2bns1m2Vv8gguG0iY2AU6oZZjNMTZbLRCxp1FvGA0YT9MwqBEZbNnIotgugGFc3H7%2bg/S8zPbWlpJKpZVyTjfVUlHTdcgPtqrVGrjRde1tXjvM4bFeyOd1CligKMU2ZOp0ICFYxwRKZCdYq9W2t7ddR4XyUa5YhqT4U9XSp6BYPJ/QOcMRqASL9NUk4NdUtVgs4kv4XjObaVQqZqttdnrtdosZAFjHKpx3oVBQi0qxkFPpFhx2tVKBKvBQr9cMdnJ0xBYYAiaQsFhUXL%2bZuvXbP4QFWZgO%2b/xCTI7HRYBEkYEkibIsJhIiXjHEI3D8OEnEYrpXikscFwuFgqFQ6LvV7%2bCRcCZogoQLsN4m3ONMYZ75PJhXdL2C9wVFgUKgYcNs1qE606w2DOp%2bxH2xAIiVRLxqDc%2bOc%2bb6vf/W7y4HJZHzhQOhaETguRjHx2I8x1GMcZzPx127xl29ygUCnMfDzc1zbjc3M0PoHi/n9xPi4iIhYlkoRLbQvbEYFwxHQ8Hg6uoqnMGsN6iGobo3hfzLamW3qu9W9J1adR/Y6WTtbs62c3Y3a9v5jvnWLm93q/u2umW10x0rY1npdivV7WTZI9Du5rvtddc3X60EIpw7JPqikjcqAqNCnJdkXopTlHkIFAjxvgDP8XwkyocjfCjMB4J8lCMYAzFG6MEQIfICL7LtshCXoVlQ/v79951up2Y3ETB6tlWrHmm6iojSbhtATJrNOhABvNtpkjDebZqFbPXJt9nnz5tPv6vVdaMBJejlsoJlcI16TW82q4iCfeuOa3l5eSEQnfFG5oIxdyDm9kdjgiSIcUGKC6JMJnFZkBNCIililBN8PMGTSZLQJ5ERJbrlHMO8BKmfPXvWd/rtfuf0DDBoNQtFhCTiI2XqRypMCIHJcU4RP3s9B46KmJHbP6zlFMdsOgOSP84uAvLJcHg27P/NtbKy4vcHQ16v1%2bdbXFz0eb1EACnO4SwF/B%2bXpBFGcd4Awpk0Jn4E4yMERPg4bIkI0O8j5dEP900jVyyq8E8qAzErxCJEK8dxWNi1rDZimFavVUyzXKupGmKrdfY%2b0NNwvoYAy55gxOPzxaIRADwPDijLsgBbEIRkMpFIyAyj0Ygo4qzluBwfEz%2bDyYQcE98JkM/nNRL%2bkYeyxRJyS1lRFBARcyAEYi4TAKedzedLBwfFV6/L2zulV68r%2bQJi1sB5D3rw4IH9ZyKALxgOhsI4X5x6DChIOGZIIQKl%2bBglOQEiR99O0j%2bDEZjQuQA06uGwi7VqqqRq4BgRvT0BLHueDgYZpZB9%2biz3/fPc2lp%2b9bvq3r5pWQbNJhOASNppm/dHJuT3eBZgQIvQhA%2b%2bC9YlArACeYw0ohLrEi/SL6D8DgGIB0wAnBiiIbISHLFaOVFVEuIRDTUKbAJ5sAwFVSabRc1wZveGnc7Q6qDeGp6dfc6EfKEoPCAQCHi8nlgsKlFWOBIM%2bUQyObaJcDgMFyB6AGsfM5oEyBOYlOXYRQGIs6oFCMB8gGUlJHpkOigEGkC%2bgwml02lkibNfgAkBvCH4AHTgnV9YROIhIYX6Y0IUExjHKJIRaSouShfoFIm1TXjwuRNLYwGQd6CBUqlQq6XLZVIF4cgHE4A1kAECZDKZLxJgxR8II4kFggQhAAdL4YWV6Zkl9/ztmWu3Z90jvDa3dG3uxoz75oz7HZHirVn33WtzD6dnPyMA04Bpoi7IQYBU6gQZGI6BOgJOzEpGxCJw9T8IEPJ7vcQFFhZCwQB8IMkLd2fdN%2b/effTw4QOGDx7cu0/gHsUHF%2bHhw4e3bt26755PxJnxE0hcNCFoAE6s66pRz4Bb/LESDUDLCwLQCXzgS01oxRMIL0IA6sXhYJAIIIg3pqaPUynotUm7nFFR/7GKH4aLn1pfX7s5fTUpy58RAGWPomTLWiqbQwBFNihCA%2bAVZsNCI%2buKvlQDy16SB/z%2bQDAcQeAmwTse429enc0oikN7AMbipwCfpAKsJy9PydKFyItMjFLiyZMnOAK4rFIstpqNulFAHkASgAmxH%2b%2bfA8sDX6aB5ZWVQCAcIQ4QDASCGDkR1YJ4%2b%2bpsVlHG/H3yZ4bDhtXDZGNj44%2bXp5PxxDikIpRG%2bTjS%2bbePH8M8mAkVChlNPUAFncsSYH3SuJcifdlgAAFgV19kQiEYz/z8vNvt9ngWmQn98fKVVCZD1vSd4eAUreyHeHZ6ihIhp7cg4k/razeuTF0nhvNxE0L5C1%2bFCRlmXtOrhaKSpU7MehTwjbNn5caXmdCfVlYW/UEUQlwshvNH9EfRluCFpVl38s6dew8e3Ll/n%2bESHW/fu7d07/6YeBcO/fDBvYcPkjdu3p2bT37aiVFCIAop%2bYy29UPqx43Uv39Ira2l0um3FBCIyM1BpYKckM5kINOvEWDYpxrw%2bsOwfqRYXkQdKkVRrnHCyqWpG9Mz1y9duX55ahLlS1cSly5QkpcI3p6aWb48TWrYCQy/KyWcXFFHHlBgQj%2buHn/z5PirvxZfrBWKaiEPZ4A/l3K5PLCQL6CRY6r4ZQ0M/kIEgA9ABahHPUCUEsgDOEdRTIridUkaIxIZKHBSTCbpDJPIZZIkfyIK9ZEHarSh0dRG6ofKv76u1naM%2bn61sqNrW/Xabr22V6/u1qo7qrZTUrea7fTAyfd7uYFTGPTzTj9/eqoML2DhbKhb5qORD8yTOsgT9noj12YFjo/LCVgUSgk5CbdMMCQ5DtW0nEDrOCZOonwRLphQv1/RNWSsAjLWxnqnWHDOhk6/h%2b6yUa/1el209QOnB2fYV%2bpHqoER5Roq7narWdHLdbrGtjtA9PTdbsfuWkbX3j84pInMF0B/KHq9yenp6263iE4kfl7gjKqeBGMPxTUt5EaUcRE0WvmpWujpU2cwQDFJ%2bn6EzzdvUFK0WlaP3LhY6G8dZ4BmF9HC7jlvy61MxTout9C%2bgVir1YHw88FwSDLFYABl9h1SdzT7zvHh8SiMimHU%2bhJpYUQJDQGqiQvWLL6bcAJ1lXevJIrx96x/wge4Z8%2bfo5iurW8oGxuF/7xQ19a115uljQ39501zd097%2bdp%2be6L8uN4%2bOLSO3m6/2D7a2N39cdvY2Suubxg7u%2bWXr%2bo/b9qFQo82DOwGDXG31u1uHu67VpaXA1EUmQmBdrFkpDkITu2bXxDnFgT3nHBlSpieETxe4eqsMOsWrs4Il6fIOHONvJ2%2bKnh9dO%2bHAsTR4z/75z97ubzx93%2bU19bL/3nR3d2zd/fZ2H6zBcG6O3v1n17Zu3ud7d3Mi83c2mZh7Y29d2BtbTd%2bemW%2b/tne2u4dHFKrG8GpMzB77RO96Fp%2b9CgS49D7RXgxyosxNgoSMBrj0UaiX49EYhEyGSMoHEE2x4i2nhc/RPwINPD06VN8slYuF1IpNZslFymptJJK59%2beaAhA6Uz%2b5ARjKZtV0mk9n0eSa1eryHxWvdFpGFajYZ3fCI6hTS%2b5%2bnbPdefuvVAoJPJRgeejsVgoEo3GuGAk6g9F/WHwzwnEsAQ6ok2mKEwgP0H/ANGUootYXV11SKdrwXbrZstsWTCCaq3WME1q0ATsCSftdO3u%2bQUliOw6rkM5HgOsqNVu6RXddfPuo0V/4LoURGgJRfm5ABeKCbO%2b6KWF8KX5cDCGtjgpj/IrHd%2bPNufEj7Y4ySREZy0luRNSy3sn%2bZMsajitSC8kUEJjgsiE2mFUMlJgXQ69zHr/7AH0GtPA3uPjY9edO0uhUBCnjo4%2bFo3y%2bBeNYBS4GBBPEQrRc/jwcUz8EPDK7/c/fvwYZ8yKfmQytUQuGxkg9SoUiH5oKcoAfLMOAWvGV9njC21ICzrKEKRw19LSEr4RiYQZhNDb%2bEl3BiL6Y2S3hfl5D57JtQtKVn8wGGSvJsFPtnjYerSm4XOADKBAAHbff/Z/ABcqp4ODg8NPw%2bTbo6Ojly9fbm5uYnL4qwGfwJkNJ%2bC9avzDgvejKz%2b65r%2bQKjzVgMzXLAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1901\" alt=\"doAction - Form Data\" data-srcset=\"/assets/static/heu-checkin2.82a2fbd.a282637541e4f36d4a8e50f3a438dbec.png 480w, /assets/static/heu-checkin2.cbab2cf.a282637541e4f36d4a8e50f3a438dbec.png 1024w, /assets/static/heu-checkin2.eaff22a.a282637541e4f36d4a8e50f3a438dbec.png 1901w\" data-sizes=\"(max-width: 1901px) 100vw, 1901px\" data-src=\"/assets/static/heu-checkin2.eaff22a.a282637541e4f36d4a8e50f3a438dbec.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/heu-checkin2.eaff22a.a282637541e4f36d4a8e50f3a438dbec.png\" width=\"1901\" alt=\"doAction - Form Data\"></noscript><figcaption>doAction - Form Data</figcaption></figure></p>\n<h2 id=\"调试\"><a href=\"#%E8%B0%83%E8%AF%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>调试</h2>\n<p>表单数据有了，开始调试 Python 。</p>\n<h3 id=\"邮件提醒\"><a href=\"#%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>邮件提醒</h3>\n<p>源代码最后的发送邮件部分需要自行引用发送邮件的 <code>.py</code> 文件，但是谷歌找到的好几个 <code>sendmail.py</code> 补上去之后都有奇怪的报错，比如 <code>if</code> 条件右括号报语法错误，我明明是直接复制的啊 QaQ ，看了好几遍也不应该有错啊（后来发觉可能是 Python 版本问题）。最终我索性直接搜 Python SMTP 的用法，找了一段代码补上去。</p>\n<p>在 Linux 下试运行的时候发现打卡段没问题，但是后面邮件发送这段报错：</p>\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"checkin.py\"</span><span class=\"token punctuation\">,</span> line 151<span class=\"token punctuation\">,</span> in &lt;module>\n    smtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> 25<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 25 为 SMTP 端口号</span>\n  File <span class=\"token string\">\"/usr/lib64/python3.6/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 336<span class=\"token punctuation\">,</span> in connect\n    self<span class=\"token punctuation\">.</span>sock = self<span class=\"token punctuation\">.</span>_get_socket<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/usr/lib64/python3.6/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 307<span class=\"token punctuation\">,</span> in _get_socket\n    self<span class=\"token punctuation\">.</span>source_address<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/usr/lib64/python3.6/socket.py\"</span><span class=\"token punctuation\">,</span> line 724<span class=\"token punctuation\">,</span> in create_connection\n    raise err\n  File <span class=\"token string\">\"/usr/lib64/python3.6/socket.py\"</span><span class=\"token punctuation\">,</span> line 713<span class=\"token punctuation\">,</span> in create_connection\n    sock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>sa<span class=\"token punctuation\">)</span>\nTimeoutError: <span class=\"token namespace\">[Errno 110]</span> Connection timed out<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>搜索了一圈发现 Linux 下 SMTP 发信加密程度要求更高，所以得加密发信，将原来的发信替换为 SSL 加密发信：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">smtpObj <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP_SSL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nsmtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> <span class=\"token number\">465</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 一般加密发信 smtp 端口号为 465</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>在 3.7 版本以上的 Python 中需要此脚本时必须使用 <code>smtpObj = smtplib.SMTP_SSL(mail_host)</code> ，否则邮件发信会报错 ValueError 如下：</p>\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"/home/Project/Python/HEUCheckin-2018041015.py\"</span><span class=\"token punctuation\">,</span> line 170<span class=\"token punctuation\">,</span> in &lt;module>\n    smtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> 465<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 加密时 SMTP 端口号为 465</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 339<span class=\"token punctuation\">,</span> in connect\n    self<span class=\"token punctuation\">.</span>sock = self<span class=\"token punctuation\">.</span>_get_socket<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/smtplib.py\"</span><span class=\"token punctuation\">,</span> line 1042<span class=\"token punctuation\">,</span> in _get_socket\n    new_socket = self<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>new_socket<span class=\"token punctuation\">,</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/ssl.py\"</span><span class=\"token punctuation\">,</span> line 500<span class=\"token punctuation\">,</span> in wrap_socket\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>sslsocket_class<span class=\"token punctuation\">.</span>_create<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"/usr/local/Python3.8.2/lib/python3.8/ssl.py\"</span><span class=\"token punctuation\">,</span> line 1031<span class=\"token punctuation\">,</span> in _create\n    self<span class=\"token punctuation\">.</span>_sslobj = self<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span>_wrap_socket<span class=\"token punctuation\">(</span>\nValueError: server_hostname cannot be an empty string or <span class=\"token function\">start</span> with a leading dot<span class=\"token punctuation\">.</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关闭代理\"><a href=\"#%E5%85%B3%E9%97%AD%E4%BB%A3%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>关闭代理</h3>\n<p>本地调试的时候，由于我平时习惯开 Clash 代理挂着，没注意这个，结果就报错了，信息如下：</p>\n<details><summary><strong>Python Traceback</strong></summary><br />\n<pre class=\"language-powershell line-numbers\"><code class=\"language-powershell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 665<span class=\"token punctuation\">,</span> in urlopen\n    httplib_response = self<span class=\"token punctuation\">.</span>_make_request<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 421<span class=\"token punctuation\">,</span> in _make_request\n    six<span class=\"token punctuation\">.</span>raise_from<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"&lt;string>\"</span><span class=\"token punctuation\">,</span> line 3<span class=\"token punctuation\">,</span> in raise_from\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 416<span class=\"token punctuation\">,</span> in _make_request\n    httplib_response = conn<span class=\"token punctuation\">.</span>getresponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\http\\client.py\"</span><span class=\"token punctuation\">,</span> line 1322<span class=\"token punctuation\">,</span> in getresponse\n    response<span class=\"token punctuation\">.</span><span class=\"token keyword\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\http\\client.py\"</span><span class=\"token punctuation\">,</span> line 303<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">begin</span>\n    version<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> reason = self<span class=\"token punctuation\">.</span>_read_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\http\\client.py\"</span><span class=\"token punctuation\">,</span> line 272<span class=\"token punctuation\">,</span> in _read_status\n    raise RemoteDisconnected<span class=\"token punctuation\">(</span><span class=\"token string\">\"Remote end closed connection without\"</span>\nhttp<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>RemoteDisconnected: Remote <span class=\"token keyword\">end</span> closed connection without response\n\nDuring handling of the above exception<span class=\"token punctuation\">,</span> another exception occurred:\n\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\adapters.py\"</span><span class=\"token punctuation\">,</span> line 439<span class=\"token punctuation\">,</span> in send\n    resp = conn<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\connectionpool.py\"</span><span class=\"token punctuation\">,</span> line 719<span class=\"token punctuation\">,</span> in urlopen\n    retries = retries<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\urllib3\\util\\retry.py\"</span><span class=\"token punctuation\">,</span> line 436<span class=\"token punctuation\">,</span> in increment\n    raise MaxRetryError<span class=\"token punctuation\">(</span>_pool<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> error or ResponseError<span class=\"token punctuation\">(</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nurllib3<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>MaxRetryError: HTTPConnectionPool<span class=\"token punctuation\">(</span>host=<span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> port=7890<span class=\"token punctuation\">)</span>: Max retries exceeded with url: http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>cas<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>cas<span class=\"token operator\">/</span>login?service=http<span class=\"token operator\">%</span>3A<span class=\"token operator\">%</span>2F<span class=\"token operator\">%</span>2Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">%</span>2Finfoplus<span class=\"token operator\">%</span>2Flogin<span class=\"token operator\">%</span>3FretUrl<span class=\"token operator\">%</span>3Dhttp<span class=\"token operator\">%</span>253A<span class=\"token operator\">%</span>252F<span class=\"token operator\">%</span>252Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">%</span>252Finfoplus<span class=\"token operator\">%</span>252Fform<span class=\"token operator\">%</span>252FJSXNYQSBtest<span class=\"token operator\">%</span>252Fstart<span class=\"token operator\">%</span>253Fticket<span class=\"token operator\">%</span>253DST<span class=\"token operator\">-</span>3779417<span class=\"token operator\">-</span>6SDr7iRPSkJxSd3MFyNd<span class=\"token operator\">-</span>cas01<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>org <span class=\"token punctuation\">(</span>Caused by ProxyError<span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot connect to proxy.'</span><span class=\"token punctuation\">,</span> RemoteDisconnected<span class=\"token punctuation\">(</span><span class=\"token string\">'Remote end closed connection without response'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nDuring handling of the above exception<span class=\"token punctuation\">,</span> another exception occurred:\n\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"d:/workshop/PythonProject/CheckIn/checkin.py\"</span><span class=\"token punctuation\">,</span> line 61<span class=\"token punctuation\">,</span> in &lt;module>\n    response302 = sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span>=user_form<span class=\"token punctuation\">,</span> headers=headers<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 578<span class=\"token punctuation\">,</span> in post\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span>=<span class=\"token keyword\">data</span><span class=\"token punctuation\">,</span> json=json<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 530<span class=\"token punctuation\">,</span> in request\n    resp = self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>prep<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>send_kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 665<span class=\"token punctuation\">,</span> in send\n    history = <span class=\"token namespace\">[resp for resp in gen]</span> <span class=\"token keyword\">if</span> allow_redirects <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 665<span class=\"token punctuation\">,</span> in &lt;listcomp>\n    history = <span class=\"token namespace\">[resp for resp in gen]</span> <span class=\"token keyword\">if</span> allow_redirects <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 237<span class=\"token punctuation\">,</span> in resolve_redirects\n    resp = self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\sessions.py\"</span><span class=\"token punctuation\">,</span> line 643<span class=\"token punctuation\">,</span> in send\n    r = adapter<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"D:\\Python\\Python38-64\\lib\\site-packages\\requests\\adapters.py\"</span><span class=\"token punctuation\">,</span> line 510<span class=\"token punctuation\">,</span> in send\n    raise ProxyError<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> request=request<span class=\"token punctuation\">)</span>\nrequests<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>ProxyError: HTTPConnectionPool<span class=\"token punctuation\">(</span>host=<span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> port=7890<span class=\"token punctuation\">)</span>: Max retries exceeded with url: http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>cas<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>cas<span class=\"token operator\">/</span>login?service=http<span class=\"token operator\">%</span>3A<span class=\"token operator\">%</span>2F<span class=\"token operator\">%</span>2Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">%</span>2Finfoplus<span class=\"token operator\">%</span>2Flogin<span class=\"token operator\">%</span>3FretUrl<span class=\"token operator\">%</span>3Dhttp<span class=\"token operator\">%</span>253A<span class=\"token operator\">%</span>252F<span class=\"token operator\">%</span>252Fjkgc<span class=\"token punctuation\">.</span>hrbeu<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">%</span>252Finfoplus<span class=\"token operator\">%</span>252Fform<span class=\"token operator\">%</span>252FJSXNYQSBtest<span class=\"token operator\">%</span>252Fstart<span class=\"token operator\">%</span>253Fticket<span class=\"token operator\">%</span>253DST<span class=\"token operator\">-</span>3779417<span class=\"token operator\">-</span>6SDr7iRPSkJxSd3MFyNd<span class=\"token operator\">-</span>cas01<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>org <span class=\"token punctuation\">(</span>Caused by ProxyError<span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot connect to proxy.'</span><span class=\"token punctuation\">,</span> RemoteDisconnected<span class=\"token punctuation\">(</span><span class=\"token string\">'Remote end closed connection without response'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>报错一大堆没怎么看懂，<code>ProxyError</code> 看来应该是代理问题，可能和主机的网络设置有关系，没有深究原因，所以解决方案就是 <strong>关掉代理</strong> ！</p>\n<blockquote>\n<p>尝试了在运行前用 <code>export</code> 或者 <code>set</code> 命令设置 <code>http_proxy</code> <code>https_proxy</code> 代理，也一样无法使用。</p>\n</blockquote>\n<h3 id=\"结果判定\"><a href=\"#%E7%BB%93%E6%9E%9C%E5%88%A4%E5%AE%9A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>结果判定</h3>\n<p>调试时还发现个问题，原代码打卡出错的判定有缺陷，只报 Python 脚本出 Exception 时的错，而提交表单时可能成功提交，但是返回的不是打卡成功，而是打卡失败。那么如何判断打卡提交正常但是打卡失败呢，这里关注返回的数据 <code>response_end</code> ，用 requests 库转换成 text 后的 <code>response_end.text</code> 缩进一下长这个样子：</p>\n<pre class=\"language-json line-numbers\"><code class=\"language-json\"># 成功时\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errno\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ecode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"SUCCEED\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"entities\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"stepId\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"办结\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"autoStep1\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"flowStepId\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"executorSelection\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"posts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"parallel\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"hasInstantNotification\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"hasCarbonCopy\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"entryId\"</span><span class=\"token operator\">:</span><span class=\"token number\">2797847</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"entryStatus\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"entryRelease\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n# 失败时\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errno\"</span><span class=\"token operator\">:</span><span class=\"token number\">22001</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ecode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"EVENT_CANCELLED\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"发生异常\\n\\njava.lang.reflect.InvocationTargetException\\n\\tat sun.reflect.GeneratedMethodAccessor457.invoke(Unknown Source)\\n\\t...\\n\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"entities\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到返回的字段中 <code>errno</code> 为 <code>0</code> 代表成功提交，剩下的 <code>ecode</code> 显示 <code>str</code> 型的状态，<code>error</code> 只有出现错误时才有，包含了所有的错误信息，这个错误是在学校服务器上报的，不是本地脚本的问题。<code>entities</code> 包含成功提交后的一些数据。那么这就用 <code>errno</code> 来判定远程提交后返回是否成功。先使用 <code>json.loads()</code> 将其转换为 JSON 格式，注意在返回的数据中 <code>errno</code> 字段为 <code>int</code> 类型，<code>entities</code> 字段为 <code>list</code> 类型，发信的 <code>msg</code> 要用 <code>str()</code> 转换这两个数据。</p>\n<p>实现代码如下：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ......</span>\n\n    response_end <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>submit_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>submit_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    resJson <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response_end<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form url: '</span><span class=\"token punctuation\">,</span> form_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># print('Form status: ', response_end.text)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Status: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form stJson: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取表单返回 Json 数据所有 key 用这个</span>\n    <span class=\"token comment\"># print('Form stJsonkey: ', resJson.keys())</span>\n\n    <span class=\"token comment\"># 加入远程提交返回结果判断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Succeed: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡成功 &lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>submit_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"stepId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">>'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t表单状态: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Error: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡失败！校网出错'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t错误信息: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n:.:.:.:.: Except return :.:.:.:.:'</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Python Error: \\n'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> <span class=\"token string\">'打卡失败！脚本出错'</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t脚本报错: \\n\\n\\t'</span> <span class=\"token operator\">+</span> err<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好啦，现在就差不多完美了，唯一美中不足的就是没有加入 <code>retry</code> 的功能，还不了解这个怎么实现，有空可以试试。</p>\n<h2 id=\"完工\"><a href=\"#%E5%AE%8C%E5%B7%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>完工</h2>\n<details><summary><strong>修补完整的 auto-checkin.py</strong></summary><br />\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n<span class=\"token comment\"># -*- coding: UTF-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\n平安行动自动打卡\n\nCreated on 2020-04-13 20:20\n@author: ZhangJiawei &amp; Monst.x\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> lxml<span class=\"token punctuation\">.</span>html\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> smtplib\n<span class=\"token keyword\">import</span> traceback\n\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Accept-Encoding\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"gzip, deflate, br\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zh-CN\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"max-age=0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"MESSAGE_TICKET=%7B%22times%22%3A0%7D; \"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cas.hrbeu.edu.cn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Referer\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://cas.hrbeu.edu.cn/cas/login?service=http%3A%2F%2Fjkgc.hrbeu.edu.cn%2Finfoplus%2Flogin%3FretUrl%3Dhttp%253A%252F%252Fjkgc.hrbeu.edu.cn%252Finfoplus%252Fform%252FJSXNYQSBtest%252Fstart\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Upgrade-Insecure-Requests\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362\"</span>\n<span class=\"token punctuation\">}</span>\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"studentNumber\"</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\"># 学号</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"password\"</span>                      <span class=\"token comment\"># 教务处密码</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">findStr</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\ntitle <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#get</span>\n    url_login <span class=\"token operator\">=</span> <span class=\"token string\">'https://cas.hrbeu.edu.cn/cas/login?service=http%3A%2F%2Fjkgc.hrbeu.edu.cn%2Finfoplus%2Fform%2FJSXNYQSBtest%2Fstart'</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin to login ...\"</span><span class=\"token punctuation\">)</span>\n    sesh <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    req <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url_login<span class=\"token punctuation\">)</span>\n    html_content <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>text\n\n    <span class=\"token comment\">#post</span>\n    login_html <span class=\"token operator\">=</span> lxml<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>html_content<span class=\"token punctuation\">)</span>\n    hidden_inputs<span class=\"token operator\">=</span>login_html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">r'//div[@id=\"main\"]//input[@type=\"hidden\"]'</span><span class=\"token punctuation\">)</span>\n    user_form <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> hidden_inputs<span class=\"token punctuation\">}</span>\n\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span>\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"captcha\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n    user_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'登 录'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Set-cookie'</span><span class=\"token punctuation\">]</span>\n\n    req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'https://cas.hrbeu.edu.cn/cas/login;jsessionid=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"JSESSIONID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">?service=http%3A%2F%2Fjkgc.hrbeu.edu.cn%2Finfoplus%2Fform%2FJSXNYQSBtest%2Fstart'</span></span>\n    response302 <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>user_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    casRes <span class=\"token operator\">=</span> response302<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CAS response header\"</span><span class=\"token punctuation\">,</span> findStr<span class=\"token punctuation\">(</span>casRes<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Set-Cookie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'CASTGC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#get</span>\n    jkgc_response <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>response302<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#post</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'*/*'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jkgc_response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">]</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Host'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jkgc.hrbeu.edu.cn'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Referer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jkgc_response<span class=\"token punctuation\">.</span>url\n    jkgc_html <span class=\"token operator\">=</span> lxml<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>jkgc_response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    csrfToken <span class=\"token operator\">=</span> jkgc_html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">r'//meta[@itemscope=\"csrfToken\"]'</span><span class=\"token punctuation\">)</span>\n    csrfToken <span class=\"token operator\">=</span> csrfToken<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">]</span>\n    jkgc_form <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'idc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'JSXNYQSBtest'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'release'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'csrfToken'</span><span class=\"token punctuation\">:</span> csrfToken<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'formData'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'_VAR_URL'</span><span class=\"token punctuation\">:</span> jkgc_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'_VAR_URL_Attr'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'ticket'</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r'.*ticket=(.*)'</span><span class=\"token punctuation\">,</span> jkgc_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    jkgc_form<span class=\"token punctuation\">[</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>jkgc_form<span class=\"token punctuation\">[</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    jkgc_url <span class=\"token operator\">=</span> <span class=\"token string\">'http://jkgc.hrbeu.edu.cn/infoplus/interface/start'</span>\n    response3 <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>jkgc_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>jkgc_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#get</span>\n    form_url <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response3<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    form_response <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>form_url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#post</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json, text/javascript, */*; q=0.01'</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Referer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> form_url\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'X-Requested-With'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'XMLHttpRequest'</span>\n    submit_url <span class=\"token operator\">=</span> <span class=\"token string\">'http://jkgc.hrbeu.edu.cn/infoplus/interface/doAction'</span>\n\n    submit_html <span class=\"token operator\">=</span> lxml<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>form_response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    csrfToken2 <span class=\"token operator\">=</span> submit_html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">r'//meta[@itemscope=\"csrfToken\"]'</span><span class=\"token punctuation\">)</span>\n    csrfToken2 <span class=\"token operator\">=</span> csrfToken2<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">]</span>\n\n    submit_form <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'actionId'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># boundFields 修改位置</span>\n        <span class=\"token string\">'boundFields'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fieldCXXXdqszdjtx,fieldCXXXjtgjbc,...'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'csrfToken'</span><span class=\"token punctuation\">:</span> csrfToken2<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># formData 修改位置</span>\n        <span class=\"token string\">'formData'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">r'{\"_VAR_EXECUTE_INDEP_ORGANIZE_Name\":\"学院\",\"_VAR_ACTION_INDEP_ORGANIZES_Codes\":\"xxxxx\",...}'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'lang'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'nextUsers'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{}'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'rand'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'remark'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'stepId'</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r'.*form/(\\d*?)/'</span><span class=\"token punctuation\">,</span>form_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'timestamp'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    response_end <span class=\"token operator\">=</span> sesh<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>submit_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>submit_form<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    resJson <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response_end<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">## 表单填写完成，返回结果</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form url: '</span><span class=\"token punctuation\">,</span> form_response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># print('Form status: ', response_end.text)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Status: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form stJson: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取表单返回 Json 数据所有 key 用这个</span>\n    <span class=\"token comment\"># print('Form stJsonkey: ', resJson.keys())</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Succeed: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡成功 &lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>submit_form<span class=\"token punctuation\">[</span><span class=\"token string\">\"stepId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">>'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t表单状态: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Form Error: '</span><span class=\"token punctuation\">,</span> resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        title <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'打卡失败！校网出错'</span></span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t表单地址: '</span> <span class=\"token operator\">+</span> form_response<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\t错误信息: \\n\\t\\terrno：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'errno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tecode：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'ecode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t\\tentities：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">[</span><span class=\"token string\">'entities'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n\\n\\t完整返回：'</span> <span class=\"token operator\">+</span> response_end<span class=\"token punctuation\">.</span>text\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n:.:.:.:.: Except return :.:.:.:.:'</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Python Error: \\n'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> <span class=\"token string\">'打卡失败！脚本出错'</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string\">'\\t脚本报错: \\n\\n\\t'</span> <span class=\"token operator\">+</span> err\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n:.:.:.:.: Finally :.:.:.:.:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">## 发送邮件</span>\n    <span class=\"token comment\"># import sendmail     ## 这个是普通.py文件，不是Python库</span>\n    <span class=\"token comment\"># sendmail.sendmail(title, msg)</span>\n\n    <span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> MIMEText\n    <span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>header <span class=\"token keyword\">import</span> Header\n \n    <span class=\"token comment\"># 第三方 SMTP 服务</span>\n    mail_host<span class=\"token operator\">=</span><span class=\"token string\">\"smtp.exmail.qq.com\"</span>                 <span class=\"token comment\"># 设置 smtp 服务器</span>\n    mail_user<span class=\"token operator\">=</span><span class=\"token string\">\"example@example.com\"</span>                <span class=\"token comment\"># smtp 发信邮箱用户名</span>\n    mail_pass<span class=\"token operator\">=</span><span class=\"token string\">\"emailpassword\"</span>                      <span class=\"token comment\"># smtp 发信邮箱密码</span>\n    sender <span class=\"token operator\">=</span> <span class=\"token string\">'1@example.com'</span>                       <span class=\"token comment\"># 发信邮箱显示</span>\n    receivers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2@example.com'</span><span class=\"token punctuation\">]</span>                  <span class=\"token comment\"># 修改为收件人邮箱，多邮箱以数组形式写</span>\n    message <span class=\"token operator\">=</span> MIMEText<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token string\">'plain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    message<span class=\"token punctuation\">[</span><span class=\"token string\">'From'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Header<span class=\"token punctuation\">(</span><span class=\"token string\">\"1@example.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\"># 发件人邮箱</span>\n    message<span class=\"token punctuation\">[</span><span class=\"token string\">'To'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  Header<span class=\"token punctuation\">(</span><span class=\"token string\">\"2@example.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># 收件人邮箱</span>\n    subject <span class=\"token operator\">=</span> title\n    message<span class=\"token punctuation\">[</span><span class=\"token string\">'Subject'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Header<span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># smtpObj = smtplib.SMTP()              # 使用一般发信</span>\n        <span class=\"token comment\"># smtpObj.connect(mail_host, 25)        # 不加密时 SMTP 端口号为 25</span>\n        <span class=\"token comment\"># smtpObj = smtplib.SMTP_SSL()          # Python 3.7 以下版本 SSL 加密发信</span>\n        smtpObj <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP_SSL<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># Python 3.7 及以上版本 SSL 加密发信</span>\n        smtpObj<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mail_host<span class=\"token punctuation\">,</span> <span class=\"token number\">465</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># 加密时 SMTP 端口号为 465</span>\n        smtpObj<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>mail_user<span class=\"token punctuation\">,</span>mail_pass<span class=\"token punctuation\">)</span>\n        smtpObj<span class=\"token punctuation\">.</span>sendmail<span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> receivers<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>as_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Success: The email was sent successfully\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> smtplib<span class=\"token punctuation\">.</span>SMTPException<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: Can not send mail\"</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>合理地偷个懒，需要修改的地方都在代码注释里了。</p>\n<h2 id=\"定时任务\"><a href=\"#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>定时任务</h2>\n<p>要想让代码实现自动打卡，还需要另外设置定时任务，Linux 可以用 <strong>crontab</strong>，Windows 可以用 <strong>任务计划程序</strong>。</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># Linux 下添加 crontab 定时命令，每天 8:00 执行打卡并输出日志到 .log 文件</span>\n<span class=\"token comment\"># 建议先运行测试是否可行</span>\n<span class=\"token comment\"># python3 auto-checkin.py</span>\n\n<span class=\"token function\">crontab</span> -e\n<span class=\"token number\">0</span> <span class=\"token number\">8</span> * * * root /path/to/python3 /path/to/auto-checkin.py <span class=\"token operator\">></span> /path/to/checkin.log\n<span class=\"token comment\"># :wq 保存并退出</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Windows 下按 <code>win</code> 搜索“任务计划程序”调出菜单，然后在右栏选择创建基础任务。跟着创建基本任务向导的指示一步一步来就好了，「触发器 -> 每日」设置时间推荐避开 6:00 腐败街预约打卡的高峰，8:00 就不错。「操作 -> 启动程序」的程序或脚本项按下面格式填写。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 870 686' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-779ae8e1118617cc54ca7e07fec05044'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-779ae8e1118617cc54ca7e07fec05044)' width='870' height='686' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAyCAIAAABj4UpDAAAACXBIWXMAAAsSAAALEgHS3X78AAAJVElEQVRo3u1Z%2bW8T2R13pf4d/R%2bqrfpLValdtVLbpb9UVaU9tGUFXdgSYHcrLW23QAMsbAjsbrqlkIUcEAhJ7CR2nDjxFdtx4tvja%2bL7Gp/je2Y84yuJ3e/MkEADm4SqglDlo%2bdvXt68mfc%2b73uOLcBxnKhUcvl8gUWxXC6XOBQ5VPcrKA75fF5QLhUUC3P3RseGh4eW9CtWq0WjWdRoFxcXVSarvdPptNvtzv5Dq9VKJBK1Wk1AUdVas1NrtGimtra2Xq/Xq1W62Ww2Go1Waw3239mXgGNdX19nGEZAV1IbuK6IhaulPH%2bl8yqAtwtWA0zOnV36q0E1Ew14YYgol7NZvFQuJRIYdIql8n4nQNN0LJk3mAyxWBSGnIhFMiNVyGdHHjwQTk7JFMqN9v4mwPkyHo1GwaNZ52g2wbDWWq16vcHUau39b0IQknYINe12%2b9UgsLGxwQ%2b1n8KrQeDlbqW941X%2bcPlpW33oPCJQqVTgD0gwegD0OR9Y2xWt1lZnD7OfdT8PXv98H4YhBUGHlWxnbcsunpCPiYEDC9wu%2b8jIgy%2bvXfv6X7empyZVKsXdu3dDkRhEJ2BF7IBKpcwBprEfDsTeQJIkxAwcz0HhYjIa7A4n3Asj2WwW1oUOW9EUS0SFsFvZqKhfXhYKx01m8%2bDgoFgsVioUoskpWAzqIEEqlSoU8pCWE1gin8/BI5KpFNy/6w5IggBdVWmaokiwQ1gYKpS97J7VOUP/44vev3x69sqVyx8c%2b8PxE13nzp873919/tzfpTOSj06f7L5w8dSpk2PCqXmx6Fe/%2bOVnly6//uMfdX1w/Afff%2b3QG4eOHH7v8LuHs7liPpcTmA3Lg4NDkxPj/bcH8HwRtgF62Xl5mmH8qOf%2byL2RERD3Bu8MSGUyjVpttTm25myT20CRxPjY6NS0RCgSoasogtiX9Xqj2ex0Os1mE8BoNGq1ukg0ZvU4J2RzOjtiRd2LZuPA6OiIWDolXxDKZEWayYEGQsGAHUHisVggECyVK%2bzB7sEACrmcd3U1FA4HAgGv1xfH4hiWgMzNl4o0zYAE/cBZMAzoBrRE8RUkb3VQ7XLVJEmyE1hADQbuRzN0bRONep2CG43m5ry8Kluoy1VNuWpNpakvKJh5OSWWkk4XXigIMtnsWquhVMjVWh2GJakqtaspA4FkKpHJZjAsHo5EstkMns1GIuFQMAiWCFSAFVzy%2bXzpTCYYDEGOB2PNsMhuum6rwZaL4KvNeoOLHptg/wE%2bNF1nmAZNZ776Ojwn887LzA8fmsYm7KLJsFIV1S1FRFOl4RG8XBZkWQJNC2jOYoFlYHO7EoCji8Wj4XDY6UBA3Q6Hw%2b1B7Xab2Wxxu12I0%2blxe/x%2bv9vlXFpaslhsTodj1et1uZweFN3gogeHda49C53OOkzrdCAopceFGEUag75BqeTu7JxIr7fE4vFmPZZKFUXTuWJR4PV6dfqVQDhSpWtgQKUKsXOrcGYNugctg97ZwrvOgj8%2bhoEoTPM%2bDYYBFkJzoDjLgk9lL9CvVBWqqlpDq7XlP/05030J77mOX%2bnNg/y8N3O5J9NzLX3m0/Kt2zhBCHwuq1wiRBFLs1ppMSS09RrZaVBPtzYna1XWhgr5XCgUisdjIEEVYCRgMOFwFKwEgmDliai6bW87hyeCpkkMy/fdSK4YUhptXKXOLRsyClVWqS7rlxOy%2bYxCmZyXl/SGnFhCPBjDSyXBhBnr1RWGrMUBI/7Alhu15m7qs1fVmd7F7e26JnNRkTaECq06HY2GxyfGp6ZEQ0ODA4PD6kXV3JxUOCVRKuUWqx1sbO85YRsBIhItDgy73C63YQW1mH0IYtMvozZ7OhJxGk0ukwm12TwIgsjmidFxHEzoN/9EBb93v9YX/eGN2E/64z%2b7g33vYlBwzPOdE6jgj//RvtuFCg67r8nTnSZZJiiwmhqXt3lrgS4J0ZEkd80hO8cHoljMPxRVpmWEZIGckVem5wjxPLTS1CwpWYAOKZkvT8sK94Vl7RJeKgr6lOF3xxJHx2NHJrD3hYljosRRrvN0Oy5KvDOKyTy59TqNxWOLGvXSkt4M7m82Ly5qDIYVjweNxbH/8vg3EwhE2ygkYpJiSwy%2bdth8r20/0a%2bvtwt0LYdnBeFVRDZ5XyuXrtepTpMz9%2bazWxtki2KqBFWlY%2bHQjHhapV70B/1Op2NlZVmj1ax6/eAG5LcQgJqDKzseFSD8dreKka0%2bBEEsk8%2bWqGp9jaq1oBF0g2SaJN0gNhsMFsl6oUywiSyOJeKJJJZMFUpEqcy24o6tzIUhiCr8iz/NJiyaC0h1mvu641uPlqpC7IIpYGwg%2bXAMT6huJj8wRzb9gRtAKKeqBFmFtUiKrjVaVaYOEhpTh7zRpNgFm2C6kAMEEDf4TPm8ut46uV0jDFyC58fj8XQqHY1ELFZrLBYvlkp4NiOVSiFjYBgWCvo1Gg1iRxwOF%2bTpVDIRDoWgSAv6fbe/6dfpdDdv3Xo4Ojp0p//6l32zM5K%2br/r8wUgJfCCdTj/v7p8XwLRRr1397MKp0x%2be677w4emTfzt7bk42399/8%2bKlS1C0dZ04cbWn58wnn5w9233mzJmJ8fHens%2b7uk7euPVNwOf99aE3enp63nz77cNHjr71u9/%2b9PWff/zxR2%2b%2b9Y7JaofDeREE2OhCEN5VFHK2B12FQsPtdoP6ggHInxE/ZBD24%2bPGPaFwJOBbFYslapVSrVlKJuJKlcqwsuJ0o3bEPiuRjI0LdTot1JHhSLRQKL4gAgCGcxT%2bhYmNuSTJ8CG4xmyBvboZlLnUTUNIAGfjwzVI/nUHngPykQ%2b8MAJP%2bskOlfaTE55O5I%2biFlfPwhGwLzQvjMD/HLDtAwIHBA4IAIFU6kADBwQOCBwQOCBwQOCAwAGB/xcClT2Pv2QC3E88j%2bTjEZKsUgS1bZCTVfIx%2bEvwzpnL5V4aAVg3lUqlOXA/HWTgv3wmZY/kZ5CU1pvV%2bnIaL842H77gzrjjhUwqkUgm4S54Fc5k0slkMhKJvBwCcIrRaGQVRW1mq9OBKJWK6WmxVDqXSiaMQXxWrnFYzUsa9cyMRCad8TjsjtXgih9PxKKxWPTe8PDIvRGT2QIH4PP7XxoB9susUNBmtaEoiiCI1WozW6xwxkBAYw%2b6vEGtCWGb0W51%2bQxozBTMJbEY3IXY7frlZY8HBVUEAoF/A7plcjGZ2sWXAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"870\" alt=\"Windows 定时任务设置\" data-srcset=\"/assets/static/heu-autotask.82a2fbd.22a101484c9f4d4a1d03d2ac7783f0f0.png 480w, /assets/static/heu-autotask.ae085b2.22a101484c9f4d4a1d03d2ac7783f0f0.png 870w\" data-sizes=\"(max-width: 870px) 100vw, 870px\" data-src=\"/assets/static/heu-autotask.ae085b2.22a101484c9f4d4a1d03d2ac7783f0f0.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/heu-autotask.ae085b2.22a101484c9f4d4a1d03d2ac7783f0f0.png\" width=\"870\" alt=\"Windows 定时任务设置\"></noscript><figcaption>Windows 定时任务设置</figcaption></figure></p>\n<p>Okay，睡个回笼觉庆祝一下 🥳..</p>\n<blockquote>\n<p>查看《<a href=\"https://blog.monsterx.cn/tech/modified-github-actions-4-heu-checkin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">照葫芦画瓢 · 编写 Actions 打卡工作流</a>》了解 GitHub Actions 版本。</p>\n</blockquote>\n"}}]}}},"context":{}}