{"hash":"9c7b33804577cb67f7a3b80e45b9a0bde245beb4","data":{"post":{"title":"过时的 NoneBot2 插件编写心得","path":"/code/outdated-tips-4-nonebot-2/","date":"July 16, 2022","timeToRead":29,"cjkWordCount":6965,"cjkReadTime":22,"tags":[{"id":"机器人","title":"机器人","path":"/tag/%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"id":"NoneBot","title":"NoneBot","path":"/tag/NoneBot/"},{"id":"HTTPX","title":"HTTPX","path":"/tag/HTTPX/"},{"id":"Pillow","title":"Pillow","path":"/tag/Pillow/"}],"cate":{"id":"code","title":"code","path":"/category/code/"},"description":"使用基于 NoneBot2 和 go-cqhttp 的 QQ 机器人已经有一年多了，分享一些插件编写的入门心得。","ogimage":"","published":true,"content":"<p><a href=\"https://github.com/nonebot/nonebot2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nonebot/nonebot2</a> 是一款跨平台 Python 异步聊天机器人框架。我已经不太记得第一次使用它是出于什么缘由了，当时凭借着薄弱的 Python 基础，跟着 <a href=\"https://61d3d9dbcadf413fd3238e89--nonebot2.netlify.app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alpha 版本官方文档</a> 的示例就开始编写插件…… 就这样一直到了今天，动手实现的功能估摸着有十数个了。这些插件有很多共同点，实际上一个模板就能批量生产出许多类似功能的插件。我觉得也许记下来是有价值的。</p>\n<p>由于我疏于学习 NoneBot2 的新特性，一直停留在 <code>2.0.0.a16</code> 版本（NoneBot2 Alpha 阶段的最后一个版本），编写的插件也只保证了在此版本的可用性。而 NoneBot2 进入 Beta 阶段以来，在适配器、依赖注入等诸多方面有了很多新的特性，导致原先 Alpha 版本插件的一些写法过时。不过这对本文的大部分内容应该没有影响。</p>\n<h2 id=\"利用-httpx-获取数据\"><a href=\"#%E5%88%A9%E7%94%A8-httpx-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 HTTPX 获取数据</h2>\n<p><a href=\"https://github.com/encode/httpx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@encode/httpx</a> 是 Python 3 的全功能 HTTP 客户端，提供了同步和异步 API，并支持 HTTP/1.1 和 HTTP/2。其 <a href=\"https://www.python-httpx.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a> 提供了详细的使用说明。</p>\n<p>HTTPX 是获取数据的工具，数据的源头则是应用编程接口（Application Programming Interface, API），如 <a href=\"https://github.com/mixmoe/HibiAPI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@mixmoe/HibiAPI</a>、<a href=\"https://tenapi.cn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ten▪Api</a>、<a href=\"https://github.com/genshindev/api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@genshindev/api</a> 等公开可用的 API。一般来说使用诸如「应用名称+API」的关键词搜索就能找到现成的接口，如果没有，那么也可以尝试通过抓包等方式获取 API 地址。以上所说的 API 通常是通过向固定的网址发送 HTTP 请求获取返回数据的。</p>\n<p>获取数据的函数一般定义在 <code>data_source.py</code> 文件中，比如我经常这样写：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> AsyncClient\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n\nresPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/monsterx/.cache/bot/\"</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    api <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"https://api-static.mihoyo.com/common/\"</span>\n        <span class=\"token string\">\"blackboard/ys_obc/v1/get_activity_calendar\"</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 请求 API</span>\n        res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"app_sn\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ys_obc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        resJson <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将 API 返回缓存到本地文件</span>\n        cacheThis <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">raw.json\"</span></span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cacheThis<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resJson\n    <span class=\"token keyword\">except</span> json<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>JSONDecodeError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"解析 API 返回出错 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个例子在网址中携带查询参数 <code>app_sn=ys_obc</code> 向 API 发起了 GET 请求，并将请求结果缓存到本地文件。如何从 API 获取数据需要根据 API 说明修改 L17 的请求方式、请求头、请求正文、是否跟随重定向等，常见情况在《<a href=\"https://www.python-httpx.org/quickstart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">QuickStart - HTTPX</a>》中均可以找到示例，HTTPX 的具体用法也应该从该文档查阅。</p>\n<p>HTTPX 除了像上面这样从 API 获取字典格式的数据外，还常结合 <a href=\"https://pillow.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pillow</a> 库用来获取图片：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Union\n\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\nresPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/monsterx/.cache/bot/\"</span>\n\n\n<span class=\"token comment\"># 获取图片 Image.Image</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">pic2Image</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span>Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    localPic <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">material/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">.png\"</span></span>  <span class=\"token comment\"># 根据输入 name 确定本地文件路径</span>\n    <span class=\"token keyword\">if</span> Path<span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>is_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果本地文件存在则直接打开</span>\n        userImage <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 本地文件不存在则使用输入 url 下载</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 将请求返回的数据作为图片保存到本地文件</span>\n                userImage <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>BytesIO<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                userImage<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">,</span> quality<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"下载图片 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 出错 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                userImage <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token comment\"># 返回 URL 图片的 Image 对象</span>\n    <span class=\"token keyword\">return</span> userImage<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>绘制原神角色卡片时，有些新角色的图片本地并不存在，但是通过相关接口可以获取到该图片链接。这时我就会使用上面这段函数，在第一次用到这张图片时将其从远程下载到本地，后续直接使用本地文件。</p>\n<h2 id=\"利用-playwright-获取数据\"><a href=\"#%E5%88%A9%E7%94%A8-playwright-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 Playwright 获取数据</h2>\n<p>有时，数据的提供者采用复杂的加密手段阻止接口被第三方调用，<del>亦或是插件编写者懒得查找接口从源头处理数据，</del> 那么 <a href=\"https://github.com/microsoft/playwright-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@microsoft/playwright-python</a> 库是一个不错的选择。Playwright 是一个跨浏览器、跨平台、跨语言的自动化测试工具，在编写插件时可以利用其模拟浏览器操作来获取数据。</p>\n<p>Playwright 之于 Python，就如 <a href=\"https://github.com/puppeteer/puppeteer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@puppeteer/puppeteer</a> 之于 Node.js。在著名 RSS 生成器项目 <a href=\"https://github.com/DIYgod/RSSHub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@DIYgod/RSSHub</a> 的《<a href=\"https://docs.rsshub.app/joinus/quick-start.html#ti-jiao-xin-de-rsshub-gui-ze-bian-xie-jiao-ben-huo-qu-yuan-shu-ju\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">参与我们 - RSSHub</a>》文档中介绍了三种获取数据方法的推荐优先级：</p>\n<blockquote>\n<ol>\n<li>使用 got 从接口获取数据</li>\n<li>使用 got 从 HTML 获取数据</li>\n<li>使用 puppeteer 渲染页面获取数据</li>\n</ol>\n</blockquote>\n<p>其中使用 HTTPX 请求 API 返回数据的方式与上面的 1 类似，是最为推荐的。而使用 Playwright 则相当于上面的 3，这种方式性能较差且消耗较多资源（因为需要额外的浏览器进程），一般来讲是最不推荐的。</p>\n<blockquote>\n<p>通过 <code>pip install playwright</code> 安装 Playwright 库后，还需要执行 <code>playwright install-deps &#x26;&#x26; playwright install</code> 安装浏览器必需组件。</p>\n</blockquote>\n<p>抛开性能不谈，使用 Playwright 获取数据的代码从某种程度上来说可能更直白，比如像这样：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> playwright<span class=\"token punctuation\">.</span>_impl<span class=\"token punctuation\">.</span>_api_types <span class=\"token keyword\">import</span> TimeoutError <span class=\"token keyword\">as</span> PlaywrightTimeoutError\n<span class=\"token keyword\">from</span> playwright<span class=\"token punctuation\">.</span>async_api <span class=\"token keyword\">import</span> async_playwright\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getChim</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    url <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"https://www.laohuangli.net/zhuge/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">.html\"</span></span>\n    <span class=\"token comment\"># 定义所需内容的 CSS 选择器</span>\n    contentSelector <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"body > div > table:nth-child(5) > tbody > tr > td > div > table:nth-child(5)\"</span>\n        <span class=\"token string\">\" > tbody > tr > td > div > table > tbody > tr > td:nth-child(1) > div\"</span>\n    <span class=\"token punctuation\">)</span>\n    fortuneSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > b\"</span>\n    trigramSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(2)\"</span>\n    poemSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(4) > span\"</span>\n    intpnOneSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(6)\"</span>\n    intpnTwoSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(7)\"</span>\n    detailSelector <span class=\"token operator\">=</span> <span class=\"token string\">\"div > p:nth-child(9)\"</span>\n    <span class=\"token comment\"># 使用 Playwright 获取数据</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> async_playwright<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> p<span class=\"token punctuation\">:</span>\n        browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p<span class=\"token punctuation\">.</span>chromium<span class=\"token punctuation\">.</span>launch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打开浏览器</span>\n        page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>new_page<span class=\"token punctuation\">(</span>viewport<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1080</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 新建标签页</span>\n        <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>goto<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> wait_until<span class=\"token operator\">=</span><span class=\"token string\">\"networkidle\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打开网址</span>\n        title <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 页面标题</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\" 诸葛测字算命 老黄历网\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 等待内容加载</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>wait_for_selector<span class=\"token punctuation\">(</span>contentSelector<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> PlaywrightTimeoutError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"获取内容失败\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获取内容的 ElementHandle</span>\n        content <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span>contentSelector<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> content <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># 断言内容存在，阻止类型检查报错</span>\n        <span class=\"token comment\"># 定义结果字典和其中各部分对应的选择器</span>\n        result<span class=\"token punctuation\">,</span> dataMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> fortuneSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"fortune\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"诸葛神算第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">签\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> trigramSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"trigram\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> poemSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"poem\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> intpnOneSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"intpnOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"解签一：\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> intpnTwoSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"intpnTwo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"解签二：\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> detailSelector<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"detail\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"详解\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 循环填充结果字典</span>\n        <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> dataMap<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 获取内容的 ElementHandle，确保其存在</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> content<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">assert</span> value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>PlaywrightTimeoutError<span class=\"token punctuation\">,</span> AssertionError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"获取</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">失败\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token comment\"># 将元素的 innerText 填充到结果字典</span>\n            result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> value<span class=\"token punctuation\">.</span>inner_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 根据需要对直接取得的结果额外处理，比如去除空格</span>\n            <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"trigram\"</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 关闭浏览器，释放资源</span>\n        <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 返回结果</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是我从 <a href=\"https://www.laohuangli.net/zhuge/1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">老黄历网</a> 获取三百八十四诸葛神算签的数据时写的，稍微改造一下就能抓取所有签文信息（所以说拿 Playwright 做小数据爬虫其实也可行）。代码看起来长了些，但实际上按照注释解读一下是没什么技术含量的。如果安装了 Visual Studio Code 的 Python 插件，将鼠标放在函数名称上就能显示出所有可用的参数和意义，对代码的理解应该会有很大帮助。</p>\n<p>这段代码中首先启动浏览器进程（L23）、然后创建新标签页（L24）、最后在新标签页中打开网址（L25）。后面则是处理 HTML 内容，需要有一定 CSS/JavaScript 基础，Playwright 的许多方法名跟原生 JavaScript 一致，对于吃前端饭的大佬应该比较容易上手。总之利用好 <a href=\"https://playwright.dev/python/docs/intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a> 会对写代码帮助非常大。</p>\n<p>这一部分的最后是我写了一些 Playwright 的代码后的心得：</p>\n<ol>\n<li>在打开网址时根据需要选择 <code>page.goto()</code> 的 <code>wait_until</code> 参数，这里用的 <code>networkidle</code> 即等待所有网络请求结束，适合有大文件需要加载的场合。</li>\n<li>在使用 <code>page.query_selector()</code> 类似的函数获取 ElementHandle 对象时，经常出现无法获取到对应选择器的错误，导致程序将很多时间花在等待上。可以尝试利用 L28-32 的异常处理、合理选择 <code>timeout</code> 等待超时参数来搞定它。</li>\n<li><code>element_handle.scroll_into_view_if_needed()</code> 可以将元素滚动到视图内，在一些采用了懒加载（Lazyload）的网页上可能有帮助，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/api/class-elementhandle#element-handle-scroll-into-view-if-needed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>如果 JavaScript 对你来说更加熟悉，那么 <code>element_handle.eval_on_selector()</code> 是个好东西，它能帮你模拟在控制台执行 JavaScript，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>很多时候一个 CSS 选择器对应的元素不止一个，这时可以用 <code>element_handle.query_selector_all()</code>，对应 JavaScript 里的 <code>Element.querySelectorAll()</code>，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector-all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>使用定位器 <code>page.locator()</code> 也许可以简化对具有相同 CSS 选择器的一组元素的操作，这是关于此方法的 <a href=\"https://playwright.dev/python/docs/locators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>。</li>\n<li>及时使用 <code>page.close()</code> 关闭标签页，使用 <code>browser.close()</code> 关闭浏览器进程。</li>\n</ol>\n<p><del>在 Gist 我还存放了一些关于 Playwright 有趣的用法</del></p>\n<h2 id=\"利用-pillow-绘制图片\"><a href=\"#%E5%88%A9%E7%94%A8-pillow-%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 Pillow 绘制图片</h2>\n<p>使用机器人高频发送大段文字可能导致封号、直接发送文字消息排版不易，所以很多时候发送图片是更好的选择。Python 绘图的一种方法是使用 <a href=\"https://github.com/python-pillow/Pillow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@python-pillow/Pillow</a> 库（对于数据统计之类图表绘制来说推荐使用 <a href=\"https://github.com/matplotlib/matplotlib\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@matplotlib/matplotlib</a>）。</p>\n<p>Pillow 绘图一般至少需要两个参数，其中一个是坐标，另一个是待绘制的内容（可以是文字，也可以是另一张图片）。将一张图片的左上角作为原点，以水平向右为横轴 x 坐标轴，以水平向下为纵轴 y 坐标轴，便可以确定图片中每个像素点的坐标。下面列出一些常用的代码，更多的绘制方法就需要根据 <a href=\"https://pillow.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a> 学习了。</p>\n<ol>\n<li>图片基本操作</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageDraw<span class=\"token punctuation\">,</span> ImageFont\n\n\n<span class=\"token comment\"># 设置 Pillow 绘制字体</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">font</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/font/zh-cn.ttf\"</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>size<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 新建颜色模式 RGBA、宽 500 高 600、背景颜色 #393B40 的图片</span>\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#393B40\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 打开现有图片</span>\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/pic/avatar.png\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将图片颜色模式转换到 RGBA</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 使用抗锯齿重采样过滤器（resampling filter）将图片缩放到宽 70 高 70</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 从图片 img 中裁减坐标 xy(20, 30) 到坐标 xy(80, 100) 范围内图像</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将图片顺时针旋转 45 度</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将图片左右翻转 / 上下翻转</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>Transpose<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">)</span>\nimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>Transpose<span class=\"token punctuation\">.</span>FLIP_TOP_BOTTOM<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 在图片 img 上粘贴图片 anotherImg，粘贴后 anotherImg 左上角位于 img 的 xy(30, 50)</span>\nimg<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>anotherImg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> anotherImg<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>常用几何图形的绘制：</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 使用颜色模式 RGBA 在图片 img 上绘制</span>\ndraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 在坐标 xy(0, 0) 到坐标 xy(100, 100) 范围内</span>\n<span class=\"token comment\"># 绘制边框宽度 1 边框颜色 #000000 填充颜色 #ffffff 的圆形</span>\ndraw<span class=\"token punctuation\">.</span>ellipse<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span> outline<span class=\"token operator\">=</span><span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 在坐标 xy(0, 1) 到坐标 xy(100-1, 200-1) 范围内</span>\n<span class=\"token comment\"># 绘制边框宽度 1 边框颜色 #000000 填充颜色 #ffffff 的矩形</span>\ndraw<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span> outline<span class=\"token operator\">=</span><span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制圆角矩形，和前面矩形只差 radius=20 的圆角</span>\ndraw<span class=\"token punctuation\">.</span>rounded_rectangle<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span> outline<span class=\"token operator\">=</span><span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>字符串的绘制</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 使用颜色模式 RGBA 在图片 img 上绘制</span>\ndraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 以坐标 xy(20, 30) 为待绘制字体的左上角绘制颜色 #ffffff 字号 26 的字符串 Hello</span>\ndraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 字符串居中绘制时，需要根据显示位置和字体尺寸计算绘制起点</span>\n<span class=\"token comment\"># 如下表示需要在坐标 xy(30, 20) 到坐标 xy(100, 60) 确定的矩形范围内居中绘制</span>\nfontW<span class=\"token punctuation\">,</span> fontH <span class=\"token operator\">=</span> font<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>\ntextCenter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fontW<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fontH<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\ndraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>textCenter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"4\">\n<li>\n<p>矩形图像添加圆角</p>\n<p>只要随便一搜就会看见这样的代码：创建透明正方形图片 A，在 A 上绘制不透明正圆形；创建与待添加圆角图像等大的不透明图片 B，将图像 A 分割为四角分别粘贴；将 B 作为待添加圆角图像的 Alpha 通道。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 图片圆角处理</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">circleCorner</span><span class=\"token punctuation\">(</span>markImg<span class=\"token punctuation\">:</span> Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">:</span>\n    markImg <span class=\"token operator\">=</span> markImg<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n    w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> markImg<span class=\"token punctuation\">.</span>size\n    <span class=\"token comment\"># 创建透明正方形图片 A，其边长为 radius * 2</span>\n    circle <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 在 A 上绘制不透明正圆形，其半径为 radius</span>\n    draw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">)</span>\n    draw<span class=\"token punctuation\">.</span>ellipse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建与待添加圆角图像等大的不透明图片 B</span>\n    alpha <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">,</span> markImg<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 将图像 A 分割为四角分别粘贴</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>\n        circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>w <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">,</span> h <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    alpha<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span>crop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 将 B 作为待添加圆角图像的 Alpha 通道</span>\n    markImg<span class=\"token punctuation\">.</span>putalpha<span class=\"token punctuation\">(</span>alpha<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> markImg\n\n<span class=\"token comment\"># 在图片 img 上粘贴图片 anotherImg</span>\n<span class=\"token comment\"># 和前面粘贴区别在于 anotherImg 四角为 radius=30 的圆角</span>\nanotherImg <span class=\"token operator\">=</span> circleCorner<span class=\"token punctuation\">(</span>anotherImg<span class=\"token punctuation\">,</span> radius<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nimg<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>anotherImg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> anotherImg<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这些代码基本搞定了我的插件 Pillow 绘图需求，还有很多高级功能我都没有用到。如果有相关需求，我十分推荐前往 <a href=\"https://github.com/MeetWq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@MeetWq</a> 开发的插件中学习，比如 <a href=\"https://github.com/noneplugin/nonebot-plugin-petpet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@noneplugin/nonebot-plugin-petpet</a>、<a href=\"https://github.com/noneplugin/nonebot-plugin-memes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@noneplugin/nonebot-plugin-memes</a>。</p>\n<h2 id=\"利用-playwright-渲染图片\"><a href=\"#%E5%88%A9%E7%94%A8-playwright-%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 Playwright 渲染图片</h2>\n<p>Pillow 的功能已经十分强大，但是我觉得它的代码写起来有些枯燥且繁琐，于是对于稍微复杂的图片绘制我都会逃避使用 Pillow，而是选择 Playwright。Playwright 作为自动化测试工具，除了前面介绍的用法也可以用来渲染本地 HTML 文件并进行截图。</p>\n<p>Playwright 提供了全屏截图和元素截图，用法如下：</p>\n<ol>\n<li><a href=\"https://playwright.dev/python/docs/screenshots#full-page-screenshots\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">全屏截图</a></li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 对标签页 page 打开的网页进行全屏截图</span>\n<span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"screenshot.png\"</span><span class=\"token punctuation\">,</span> full_page<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li><a href=\"https://playwright.dev/python/docs/screenshots#element-screenshot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">元素截图</a></li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 对 CSS 选择器 .class 对应元素进行截图</span>\n<span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>locator<span class=\"token punctuation\">(</span><span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"screenshot.png\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 对一个已有的 ElementHandle 进行截图</span>\n<span class=\"token keyword\">await</span> element_handle<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"screenshot.png\"</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述代码都将截图写入文件，有时不希望如此，可以使用缓冲区（buffer）：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n\n<span class=\"token comment\"># 截图为 Image.Image 对象</span>\nscreenshot_bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nimage <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>BytesIO<span class=\"token punctuation\">(</span>screenshot_bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>利用 Playwright 渲染图片前，还需要创建渲染的 HTML 文件。我经常先创建一个 HTML 模板文件，其中待显示的内容用一串占位符代替；然后在 Python 中利用 <code>str.replace()</code> 将模板中的占位符替换为需要的内容，另存为临时文件；利用 Playwright 打开临时 HTML 文件，执行截图，完成后删除临时文件。这种完全手动编写 HTML 模板渲染的方式学习成本较低，但是在一些复杂的场合可能代码就不那么优雅了，这时可以考虑使用 <a href=\"https://github.com/pallets/jinja\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@pallets/jinja</a> 来创建 HTML 模板。Jinja2 是现代的、设计者友好的、仿照 Django 模板的 Python 模板语言，采用 Jinja2 创建模板并渲染的代码可以参考这份 <a href=\"http://docs.jinkan.org/docs/jinja2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非官方中文文档</a> 和一些 Nonebot2 插件。</p>\n<p>下面总结一下完全手动方式的代码流程。</p>\n<ol>\n<li>新建一个 HTML 模板文件 <code>tpl.html</code></li>\n</ol>\n<pre class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./tpl.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  <span class=\"token comment\">&lt;!-- 相对此文件的 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GenshinCN\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./zh-cn.ttf\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/** 相对此文件的 */</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GenshinCN\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#f0f0f0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\"><span class=\"token class\">.container</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">360</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token unit\">%</span> <span class=\"token operator\">-</span> <span class=\"token number\">150</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#e3d8aa</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token unit\">px</span> <span class=\"token number\">2</span><span class=\"token unit\">px</span> <span class=\"token number\">2</span><span class=\"token unit\">px</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>/<span class=\"token number\">20</span><span class=\"token unit\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        {{content}}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>\n<p>在 Python 中替换模板中的占位符，并另存新的临时文件</p>\n<p>注意临时文件命名最好具有唯一性，否则一段代码被多个 QQ 消息同时触发时，截图调用的临时文件错乱，最终消息响应结果就会出错。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 待显示内容预先处理</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token string\">\"what you get\"</span>\n<span class=\"token comment\"># 打开模板文件</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/tpl.html\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    template <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 替换占位符</span>\ntemplate <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"{{content}}\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 另存临时文件</span>\ntmp <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"/path/to/tpl.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>flag<span class=\"token punctuation\">}</span></span><span class=\"token string\">.html\"</span></span>  <span class=\"token comment\"># 最好使临时文件命名具有唯一性</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>\n<p>在 Python 中调用 Playwright 截图</p>\n<p>这里 <code>element_handle.screenshot()</code> 产生的截图不保存到文件，而是直接被转换为 Base64 编码字符串。发送图片时直接将图片 Base64 编码字符串传递给 nonebot2 的 <code>MessageSegment.image()</code> 即可。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64encode\n<span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n\n\n<span class=\"token comment\"># 运行 Playwright 截图</span>\n<span class=\"token comment\"># browser = await get_browser()</span>\n<span class=\"token comment\"># tmp = f\"/path/to/tpl.{flag}.html\"</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span>new_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 新建标签页</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>set_viewport_size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设定视图大小</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>goto<span class=\"token punctuation\">(</span><span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> tmp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打开模板文件</span>\n    <span class=\"token comment\"># 使用 CSS 选择器指定截图对象并保证其加载</span>\n    card <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>query_selector<span class=\"token punctuation\">(</span><span class=\"token string\">\".container\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> card <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n    <span class=\"token comment\"># 截图并将图片转换为 Base64 编码字符串</span>\n    picBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> card<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"base64://\"</span> <span class=\"token operator\">+</span> b64encode<span class=\"token punctuation\">(</span>picBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关闭标签页</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"生成图片失败 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"生成图片失败！\"</span>\n<span class=\"token comment\"># 删除临时文件</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># 发送消息时</span>\n<span class=\"token keyword\">await</span> Matcher<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">(</span>\n    MessageSegment<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 为 Base64 字符串时调用 image</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"base64\"</span> <span class=\"token keyword\">in</span> res\n    <span class=\"token keyword\">else</span> MessageSegment<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 为普通字符串时调用 text</span>\n<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里 L7 使用了名为 <code>get_browser()</code> 的异步函数来获取浏览器对象，其具体代码可以参考 <a href=\"https://github.com/HibiKier/zhenxun_bot/blob/main/utils/browser.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@HibiKier/zhenxun_bot</a> 和 <a href=\"https://github.com/SK-415/HarukaBot/blob/master/src/plugins/haruka_bot/utils/browser.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@SK-415/HarukaBot</a>，其作用是：创建截图时，总是尝试在已有的浏览器进程中新建标签页，而不是另起一个全新的浏览器。这也是本段代码只在 L19 关闭了标签页而没有关闭整个浏览器的原因。</p>\n<h2 id=\"利用-json-缓存数据\"><a href=\"#%E5%88%A9%E7%94%A8-json-%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 JSON 缓存数据</h2>\n<p>为避免不必要的网络请求，浏览器通常都会使用 HTTP 缓存。如果一个网络请求存在匹配，则从缓存中读取响应，从而消除网络延迟和传输产生的数据成本。网站如此，机器人亦如此。除了从成本角度考虑，很多时候机器人频繁地请求 API 可能导致机器人 IP 被 API 服务器封禁、无法正常获取响应。此外，诸如米游社之类的某些接口本身也存在缓存，1 至 2 小时才会更新，没有总是实时请求的必要。</p>\n<p>为了合理地使用缓存我通常使用这样几个函数：</p>\n<ol>\n<li>\n<p>实时请求</p>\n<p>和第一部分利用 HTTPX 获取数据的函数相同，只是在写入缓存前添加了一个 <code>time</code> 字段记录缓存的时间。注意，如果后续单纯使用 <code>getData()</code> 不为空作为继续执行的条件将引起错误，可以根据需要使用 <code>Dict.get(\"data\")</code> 之类作为判断是否非空的对象。</p>\n<p>这里自行添加 <code>time</code> 字段其实感觉并不十分优雅，如果原返回包含时间信息，应该优先使用原返回中的时间信息。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> AsyncClient\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n\nresPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/monsterx/.cache/bot/\"</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    api <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"https://api-static.mihoyo.com/common/\"</span>\n        <span class=\"token string\">\"blackboard/ys_obc/v1/get_activity_calendar\"</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> AsyncClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 请求 API</span>\n        res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"app_sn\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ys_obc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        resJson <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加缓存时间戳</span>\n        resJson<span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将 API 返回缓存到本地文件</span>\n        cacheThis <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">raw.json\"</span></span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cacheThis<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>resJson<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resJson\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"请求 API 出错 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>\n<p>缓存检查</p>\n<p>第一步缓存的字典内容具有 <code>time</code> 字段，判断其是否失效就好办多了，只需要将当前时间与缓存时间比较即可。我通常让缓存有效时返回缓存内容、缓存失效时返回空。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n\n<span class=\"token comment\"># 检查缓存是否有效</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">cacheChecker</span><span class=\"token punctuation\">(</span>cacheFile<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> cacheTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 缓存文件不存在，返回空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Path<span class=\"token punctuation\">(</span>localPic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>is_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\"># 还存文件存在，判断时效</span>\n    timeNow <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 当前时间</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cacheFile<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        cache <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    timeCache <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 缓存时间</span>\n    <span class=\"token comment\"># 当前时间与缓存时间差值在指定范围内则缓存有效</span>\n    <span class=\"token keyword\">if</span> timeNow <span class=\"token operator\">-</span> timeCache <span class=\"token operator\">&lt;</span> cacheTime<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> cache  <span class=\"token comment\"># 缓存有效返回缓存内容</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 缓存失效返回空</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>\n<p>获取数据入口</p>\n<p>获取数据的入口需要合理地决定何时返回缓存、何时重新请求。我通常会传入一个 <code>force</code> 参数决定是否需要强制刷新。</p>\n</li>\n</ol>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 获取数据入口</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">dataEntrabce</span><span class=\"token punctuation\">(</span>force<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 缓存文件的路径，与第 1 步实时请求后缓存文件命名规则相同</span>\n    cacheFile <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>resPath<span class=\"token punctuation\">}</span></span><span class=\"token string\">raw.json\"</span></span>\n    <span class=\"token comment\"># 检查缓存，要求强制刷新时与缓存失效效果相同（返回空）</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> cacheChecker<span class=\"token punctuation\">(</span>cacheFile<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> force <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\"># 可以通过判断返回字典的索引初步确定数据是否完整</span>\n    <span class=\"token keyword\">if</span> data <span class=\"token keyword\">and</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data  <span class=\"token comment\"># 缓存数据完整直接返回</span>\n    <span class=\"token comment\"># 发起实时请求，同时产生了成功请求的缓存</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"暂时无法访问数据接口！\"</span>  <span class=\"token comment\"># 实时请求数据不完整视为失败</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data  <span class=\"token comment\"># 实时请求数据完整直接返回</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上实现缓存与刷新的函数将数据写入 JSON 文件，在实际运行时需要重复进行文件读写。如果有高级需求，采用数据库可能会更好。</p>\n<h2 id=\"利用-github-actions-代替直连\"><a href=\"#%E5%88%A9%E7%94%A8-github-actions-%E4%BB%A3%E6%9B%BF%E7%9B%B4%E8%BF%9E\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><del>利用 GitHub Actions 代替直连</del></h2>\n<p>在境内服务器上部署机器人时，某些网站的直连访问效果不甚理想，通常大家会选择使用配置代理来解决。其实我觉得某些场合使用 GitHub Actions 也不错，GitHub Actions 的运行环境不仅访问境外服务速度不错、还能在某些方面分担机器人服务器压力（指把吃性能的代码一股脑丢给 GitHub Actions 执行）。</p>\n<p>我之前尝试制作原神抽卡模拟功能，需要获取角色、武器的抽卡图片。我选择了利用 Playwright 定时抓取 <a href=\"https://genshin.honeyhunterworld.com/?lang=CHS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Honey Impact</a> 的数据，将图片下载并上传到 CDN。这样机器人请求 CDN 获取图片等数据，要比直接从 Honey Impact 获取快的多；而且 Playwright 定时抓取感觉还是比较占用资源的，和机器人本体分离之后也不用考虑相关影响了。</p>\n<blockquote>\n<p>感觉此部分内容其实不太推荐，只是提供一种思路，姑且就写这么多吧。</p>\n</blockquote>\n<h2 id=\"利用-cos-发送私聊文件\"><a href=\"#%E5%88%A9%E7%94%A8-cos-%E5%8F%91%E9%80%81%E7%A7%81%E8%81%8A%E6%96%87%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 COS 发送私聊文件</h2>\n<p>向机器人提供接口的 <a href=\"https://github.com/Mrs4s/go-cqhttp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mrs4s/go-cqhttp</a> 只实现了 <a href=\"https://docs.go-cqhttp.org/api/#%E4%B8%8A%E4%BC%A0%E7%BE%A4%E6%96%87%E4%BB%B6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上传群文件</a> 接口，在私聊对话中无法发送文件。暂时只能曲线救国，采用发送文件下载直链的方式间接实现私聊文件发送。我部署机器人的服务器为腾讯云机器，所以就顺手采用了腾讯云对象存储（Cloud Object Storage, COS）储存文件。</p>\n<p>腾讯云官方提供了 COS 的 Python SDK <a href=\"https://github.com/tencentyun/cos-python-sdk-v5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@tencentyun/cos-python-sdk-v5</a>，也提供了 <a href=\"https://cloud.tencent.com/document/product/436/12269\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">快速入门</a>、<a href=\"https://cloud.tencent.com/document/product/436/65820\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上传文件</a> 等文档。根据文档说明，开始使用 COS 前需要前往 <a href=\"https://console.cloud.tencent.com/cam/capi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API 密钥管理</a> 创建用于 Python SDK 访问存储桶的 <code>SecretId</code> 和 <code>SecretKey</code>。创建 COS 存储桶时如果选用公开读权限，则文件链接不需要签名即可访问，但是这样容易造成流量超限，建议采用私有权限，发送文件时可根据 <a href=\"https://cloud.tencent.com/document/api/213/30654#Python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">签名方法 v3</a> 生成链接签名。</p>\n<p>我将初始化 COS 客户端、上传文件、计算链接签名的 Python 代码整理了一下：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> hmac\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> sha1\n\n<span class=\"token keyword\">from</span> nonebot<span class=\"token punctuation\">.</span>log <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> qcloud_cos<span class=\"token punctuation\">.</span>cos_exception <span class=\"token keyword\">import</span> CosClientError<span class=\"token punctuation\">,</span> CosServiceError\n\nbucketName <span class=\"token operator\">=</span> <span class=\"token string\">\"name-idnumber\"</span>\nbucketRegion <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-shanghai\"</span>\nsecretId <span class=\"token operator\">=</span> <span class=\"token string\">\"AKIDz8krbsJ5yKBZQpn74WFkmLPx3*******\"</span>\nsecretKey <span class=\"token operator\">=</span> <span class=\"token string\">\"Gu5t9xGARNpq86cd98joQYCN3*******\"</span>\n\n\n<span class=\"token comment\"># 计算 COS 文件链接签名表单字段</span>\n<span class=\"token comment\"># https://cos5.cloud.tencent.com/static/cos-sign/</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">toBytes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># SignKey = HMAC-SHA1(SecretKey, [q-key-time])</span>\n    signTime <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">60</span>\n    expireTime <span class=\"token operator\">=</span> signTime <span class=\"token operator\">+</span> <span class=\"token number\">3600</span>\n    timeStr <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>signTime<span class=\"token punctuation\">}</span></span><span class=\"token string\">;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>expireTime<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    signKey <span class=\"token operator\">=</span> hmac<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>toBytes<span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toBytes<span class=\"token punctuation\">(</span>timeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sha1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># HttpString = [HttpMethod]\\n[HttpURI]\\n[HttpParameters]\\n[HttpHeaders]\\n</span>\n    httpString <span class=\"token operator\">=</span> <span class=\"token string\">\"get\\n/{}\\n\\n\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># StringToSign = [q-sign-algorithm]\\n[q-sign-time]\\nSHA1-HASH(HttpString)\\n</span>\n    httpStrSha <span class=\"token operator\">=</span> sha1<span class=\"token punctuation\">(</span>toBytes<span class=\"token punctuation\">(</span>httpString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    strToSign <span class=\"token operator\">=</span> <span class=\"token string\">\"sha1\\n{}\\n{}\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>timeStr<span class=\"token punctuation\">,</span> httpStrSha<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Signature = HMAC-SHA1(SignKey,StringToSign)</span>\n    sign <span class=\"token operator\">=</span> hmac<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>toBytes<span class=\"token punctuation\">(</span>signKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toBytes<span class=\"token punctuation\">(</span>strToSign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sha1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"q-sign-algorithm=sha1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-ak=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>secretId<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-sign-time=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>timeStr<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-key-time=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>timeStr<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"q-header-list=\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"q-url-param-list=\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"q-signature=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>sign<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 初始化 COS 客户端，一个 Bucket 只需一个客户端即可</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">initCosClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> qcloud_cos <span class=\"token keyword\">import</span> CosConfig<span class=\"token punctuation\">,</span> CosS3Client\n    <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> pip<span class=\"token punctuation\">.</span>_internal <span class=\"token keyword\">import</span> main <span class=\"token keyword\">as</span> pipmain\n\n        pipmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cos-python-sdk-v5\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> qcloud_cos <span class=\"token keyword\">import</span> CosConfig<span class=\"token punctuation\">,</span> CosS3Client\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"安装 XML Python SDK 失败 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        config <span class=\"token operator\">=</span> CosConfig<span class=\"token punctuation\">(</span>\n            Region<span class=\"token operator\">=</span>bucketRegion<span class=\"token punctuation\">,</span>\n            Token<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n            Scheme<span class=\"token operator\">=</span><span class=\"token string\">\"https\"</span><span class=\"token punctuation\">,</span>\n            SecretId<span class=\"token operator\">=</span>secretId<span class=\"token punctuation\">,</span>\n            SecretKey<span class=\"token operator\">=</span>secretKey<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        client <span class=\"token operator\">=</span> CosS3Client<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> client\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"初始化 COS Client 失败 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n\n<span class=\"token comment\"># 使用高级接口上传文件到 COS</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    bucketDomain <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"https://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucketName<span class=\"token punctuation\">}</span></span><span class=\"token string\">.cos.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucketRegion<span class=\"token punctuation\">}</span></span><span class=\"token string\">.myqcloud.com\"</span></span>\n    fileName <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>upload_file<span class=\"token punctuation\">(</span>  <span class=\"token comment\"># type: ignore</span>\n                Bucket<span class=\"token operator\">=</span>bucketName<span class=\"token punctuation\">,</span>\n                Key<span class=\"token operator\">=</span>fileName<span class=\"token punctuation\">,</span>\n                LocalFilePath<span class=\"token operator\">=</span>filePath<span class=\"token punctuation\">,</span>\n                StorageClass<span class=\"token operator\">=</span><span class=\"token string\">\"STANDARD\"</span><span class=\"token punctuation\">,</span>\n                EnableMD5<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件上传 Etag：\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">[</span><span class=\"token string\">\"ETag\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">except</span> CosClientError <span class=\"token keyword\">or</span> CosServiceError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"上传文件 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fileName<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 到 COS 失败\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    urlSigned <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucketDomain<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fileName<span class=\"token punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>getSignature<span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">return</span> urlSigned<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>修改 L9-12 为指定的腾讯云 COS 配置，在需要发送私聊文件的项目中，我使用了这样的结构：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>upload_cos <span class=\"token keyword\">import</span> initCosClient<span class=\"token punctuation\">,</span> uploadFile\n\n\ncosClient <span class=\"token operator\">=</span> initCosClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfilePath <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/file/example.xlsx\"</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> cosClient<span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"未成功初始化腾讯云对象存储，无法发送文件！\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        fileUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> uploadFile<span class=\"token punctuation\">(</span>cosClient<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> fileUrl<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"文件已上传至云存储，有效期 1 小时，请及时下载：\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fileUrl<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"上传文件失败，请稍后再试！\"</span>\n        <span class=\"token comment\"># 删除本地下载文件</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">return</span> msg<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<p>最后是一些自己觉得效果得还不错的插件展示，能公开的插件代码我基本都放在 GitHub 里了，没有公开的大概率是因为代码写得太粗糙，不好意思公开。</p>\n<details><summary><strong>使用 Pillow 绘制原神 UID 查询结果</strong></summary><br />\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 950 2592' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7ba3dcce41f029cf8f3c5855fbf4ee03'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7ba3dcce41f029cf8f3c5855fbf4ee03)' width='950' height='2592' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAACvCAYAAABNe9iJAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42ty9Z1RVy7Yuuv%2b%2bX/e1F26755y794k7rL2yEiRIzjnnnDOIIDkjQUGJSg6SgyAmMgbAAGIAQQUVFXMkhznH6P1VHzCV5XK5zmnttfvj/ihHqlGjqldP31c18Q9yCiq4rcAueWXhuHUOkvtbBf93K3/40uDlPw1Wcr5dMP97CkAyQDrulFVCaTkVkFVQpSPKfnwm1PsoBHlFKqr46Vr14/HzZ5/uq368v/XNX5Xt9z%2bvI7ne3tbn5Zd1VL76vV9pgMJuVbAx1BYnu%2but%2b1ior3tZaK1rqKrzm0IQBg8yu3aDtKwiSsko4E5peaRz6V27hXOZraOUjOLmkZ5tq/vzTrmP9b42QIVtg/l8YHSkdn6WkhOOO6Tkt46b51Rnp7SCcE3font0LXl3%2bzd/IQBZNsOKCop8orflSmdV4fqFzjMblTkZqwq75DkZOaEjQAMxt7BFVzcv9PELwn0RMejCznV0jTAkNBztHFyE4urujV4%2bAWhl44BmFjbo5OyOwSFhGLo3AgMC9wjPZOWUvjh4uv/jzzJC5%2bl6c2ByH58pqWhidHQ07tu3D9P2pwrnwjEqCmOiY5jAd2NgYJDwnI7h4fvQx8dXuP8FDVAm1RZmlho31jMUd3ec5JYXl/HDy%2bfY39mNRVkHxaq7VTg5RTXqGLDOQ0HhUczJzce6%2bkbMPpQrDPpYTT0eOpyHZeVVWFJageUVVexenVDnaFEpFh4pwlOnzmBtXQPm5R9BZVWtXwmBrncra6CvfxCaW9oKnba2dUR7R1dBQPRchb2XdfAAHsjMwMOHsjE1JQXz83IxIz1NuEezHR4ezq7TMTY2FiMjIjFsb9gvtOijAMiuSQhM5eAHJvV9IaHiualbcGOoH07WlcDpplpcfPMaooOC1pnKCfbPOg4mZlaoq28idM7Q2Fxo2MLKDg2MzFBNQ1c4N2V1qJ6pubVwX0VNG/UNTYV7xqaWv%2boQXZOG6RmY4t1705ialslUexd2dffiiY5TH9VXlmnj9z9KC3XJlOhI12QSP%2b3YJbRFYyGz%2bOEnGcEEqM5vmMCmBijsVmOVpSA5KUU0dfMqnj9eAhdqj8C18124%2bPYt72pnL/6ZNUQ%2bQkp2NxPWLsHOf2RHKtK7lITj5scUhY78tEMOfxQKu7/lFzbtcbNst%2bntGkCasTcsUhAUDdDPP1gws%2b11/f0D0MvLB4OCgoXzkJA96OLiht7evkhjcXZ2ZYK3Eu7r6Rt/1LRdv2ECgn0n%2b//rWlG85cpoWQn0xwXCPlMjqIkPwOK0xHVlud0b9ILMLiXQ19MFPw9btLIwRitzYwz1d0QDfT30drNBc1NDtLcxZcVMeO7qaCHUsbUyFe77uNsIdcmn/JbHp%2bOPO2QF50nXpAUSH8C%2bj6rq2ph1IBPj4%2bKwqb4GU1NTsKqiTPADhfl5gonk5R4WhFFdWY5ubh6C4D%2bPSh8FQM5PWVkJXGx2rOZZK4vPWClis40iNgbq4svOWAy3NORkpBRE8ruZirLZZ4MEGrSNpTE62plhiJ8DmhgbCEdPFyv0ZYMM9rVHL1drDPS2Q0dbM3RxMEc3J0sM8LJDTU0tYSBfC4E0i5Lrz0OnwtY5aYeyqqbwbLeyuvCO5D3JUVGJ7ql%2bLQ/YNAGW8OBPssp8srWW%2bKy9Bl%2bsIcvvN1cXZ%2b2xE7uZGYtlWej7FC2U2QwqfezQTpndgl3%2b0p5VPn6YzIOuhU6z97bP9G/lAp8EovJFDZHdaofMigRB2kJHKpLnVEjQsp9980tOEOVYgiPLbqjK7%2bYNd8pyCjKK3M5dyszW5WGHjKLkZfh8trZniPR8q%2bD28qXB/l4SJP9ZHvB5GzTDdJ/MQYlFDVJ7Co/kPzbzmU1tIA2g55/nEb/SAME5UOdZRRlSn92qH2eRIgT5iF/jgk%2b4QW4bhhAGQGn05nufZYu/LYDtecBPzAd8ygM%2beXEhDKpp4ZGCfCEElpcWYzYLiaXFR4Xr3JzDQt34%2bHg8lJ2FiQkJQniMYjmCJPn6VSYomTlBXWUUQVpGAdjHWbYnZHyU/ACFFPZx2Mka38zsFLfPyiZeoE5uqqOQMO3YCkv0rpAtsphO78tuM5/PBUF1NLX1hXwiMHivIIjomAQhiaI2qL6ikjr6%2bvoLHj4sLIwlO8EYHhYuRAN//0ChDScnV%2bHaw8MLHR1dhEIa8SsT%2bDwJcXF1h6DgYKDw4sRCCXlSHx8/3LMnVJA8ey6EHxsbe4lENwfPzhVtnTZkNHTFriwcsc6Bl7cP7AkNZdlZNFqz%2bkYm5mhn74habIBfmg1JHqBvaIYXB4cwN69QEGJ%2bwVHMPJj9MSrQICi%2bb4baTQF/x/IAihw//iwr1KGj5FqSCv%2bGCXzqAM0qhZbio4UsszqMoaF7MSIiAtPSUrEgPxeN2QBSUpIxICAQff38PwmAdVyaJR76GVlrqkGhayHsWVrafmChCIqLCvFEW/PWTAVh0dECYXZIE%2bR/wwfQTGlpG6C6pt6Wh9cQkqjtzzMz0jEpMZGpfZag4sVFRwQ1T09LE%2bonMNV3ZeEvPzcHbWwdBEzyxUzwc/ujlym0COdM1TbvqX/UEPKq273wVnIh%2bADmS3h2zm%2bpOEULwRR2bzkhKqS%2b5Fe%2bNBvb70m8uuRbEo2hc1UmjD1M/d3dPfEgywd8fP0wNiZWuBcZGYnKzBmSSdjZOWJKcjJaWdt99CG/5QN%2bEXOpkyQE6igNnu4pqWh87Ax51l9CzM1kipyoPCsK7H3WBpD3pcHvFq4/eeUvzcTvRYfPfYYEhUqSI9JeiZ/ZLkDSNMm4vgqHyTtTuppzOBtLS44y71okAI6EhHghw6osLxEkSaqXkpwkPKcUkxyegqIK/CytjKkBOosxbkrLIXsjWTtZUFiQC8eqyrGn8ySSL/BjpkHmRT7lSz7g93KC7fWkt2C2RBASAUics/S23ECCGb6YB2xvlGxSyKd9fAX46OnpLTg9wfF5%2b6CunhHLywOEOuRdKQZTZKCQJ71LGa1NNNfN9FQ3rGwcabBg7%2bAEVI9gqbmFNQNNZsyp%2bqC%2bgclv8gDbzetz9ZfcI00yY3m%2bsYkF2js4C%2bc0OXS0sLQR6tDkGBiZCkcTBrx0dA1/EX1%2bZQKSm9/9IIXfUvl%2b56ZnZV70e%2bZxv/luhyDJv7P75HnJw25HWCSEn6UZCBJIj11A71Kh9/76958ET/wTy%2bnpWkJafClRkoQ5ScpLJqiqrrMt81MQBF9RViKUupoqQasa62qwrKQIy8uKBa0gZ1jKrslHZGcdxOSkpN9lhAT1cWWzTRpAs0az7eHpJcRc8rAkTV/mcLR1DATpW1rZCiZACY/0LkU01LMSWxm6rds7OFIEAVYXQpnqE2FBdSkUUjgllPYl30Mxn5Df8bYTmJSShu3tHZiyPwPb2DEyOg7j4pPQ0MhcEAZpI2kS9cOQQW066rB7dJ%2bea7AIQv2le2oaOkJu8dUoIKGRKMxRaKFwRfZOIYZ8QXVlmaBmh9gziZlQosHeISgNP8vIYLRX7nqAbep6ZPQ%2bqg%2bsHaDZOdXRKoTA4OAQrKwoQU8v71%2bpInWOZo4EUHikGCOjYgUChVimgsIijI1LEvICYqOon5paeoIm0MAkWrMZLrUEU1baimZkLhqs7m/hgV%2bFwe3OiTw/qaDQ6Jb06KPUqODdldW3YQHCE6o888I8vcfiNkgACb1DHaQ2JCH2t0KgBNBIuEVJVJLwinSkNkitKd0l%2bEvJGjnr3MOHhHyA2iGVj46KFgRP6TJpwddS4Y%2bdoIEpsgHSRxS3wtZ2QCIBIpuD%2b8Qkywl44mMuD5J8gQp9WIIWtzu4L/mBr4U%2bilSbs60mmKqZubWgleT4HBydBROjDJXq2NjaMwfpJJgH8QESv/JVH0AdpTBIIOJIYR6WsVBXVVkqkAtHC/MFT1qQlyOERYVP9vTLdQN5le2g6XfD2X81BErqSmAwCVpylIS%2bTUyhuCV4pV8kQb%2bLBci2JaGPbJzSXgqBlMNrMwFQ9kVcn2Q2/lcuYmzXFIokhBMoGkm4wK/T4vK/TYtvv0lhjghGKnROYYvCGYVCkurf2TUBke1o8H%2blECSsMSFBAmzE%2blJkoShF9wi/0Mx7sByGJo/yEDo6M8f9mz5gOxQlp0EJkBubaTonEGPLcmq6JhRHH3Nz92D2ZvfFBv//muXtqfZ2TkHCB%2bQzUyTsX8KcHjlEygmIDyATptkmweSx54QFJA7xd8MgzWp62n7mAw4KCJAaPlZdzo7EwaejkbG5EBaTkxKFPIHU7AtEI3zRN/wXBk%2bDJCJUYs%2bUQNH19nqk9hIbp3pUh/ovsXfJyhE9I4p8O5T%2bahSgQhFAXVNXCF/qGrrCNakdgSMJQtsWAn8xaAk5sr38V4RAg9BjCU56xkH09PYX7DiZJUVRLBH6lMqqCFwFeX7ySaTmfn4BQhQgVac6lHhRIb9FiRwhSJmvpcKSo%2bImkhNCoGQ2NlGc%2blZMVvsYBj9fVP3loD9y8PCF518cPLVPM21r54wXLgxiUvJ%2bQQA9vf3Y0NgszK4kr6D4n7Z/PzY31ApaWVNdIaS/lHjRJJEm57C8gIR0vLmBaa%2bZ8L7811aHqVSxjI/yacoEqZD6k0lQJkgxNZOZAi07bY8CnwlBWE3W19XeMNDVFm1fVP3PaMLWAi1q6RgKWkjXdE6rTZIcQpKbENTV2kpxaVIoAZPAdgrTxAsIxCmbfdnfyDd%2biQZZ5ZCQEMG7EnQNDAoSjuQAKafX1TcSrilEUifkPpthFTUNERPMupam5npUmPtCRKjbopaG5jolQRKS5GtC%2bBIhsj2mb6%2bzmf%2bbs5BsKeAAQoIGhqbCfXpO54QVSCB0NDA0%2bSIk/lUY/Obbn4XQJwmBEmRIiI5oJQlCFGLrpwRDyPw0tbXFsdE%2bC62NaYuPHzSuUuk5c2g5Ic5vjT3jtxZD4PdIj69dS6IAoUAqbS2NQqp75mQb1lZXYu2xKgEHUDikCEE%2bgaIBJW%2bUK3zutH8VBin5IYqJ8ms6J2dDcXTPnj0CCnRg%2bJucCwEiOienx2YdpGR2o6W5kejFTK34/kSVeOFZMzdyoWDtTFvmamn%2bvkVnB4uNndLEy33dD/z%2bQskmH2DIsD4hP%2boLzT6lvZQSU2pM5klIkK4JA5gwLSEu4vOV6M8YIVWBESJAQWkw2XxuziEBGRJBSk6GGqHrOBZjiW939/AktRIEQB1TU9MQH0rxW81NC1zOiPd5l7DP482BRN/ltFjvJQ11DU72l5HiK2HwE4aQ4IjP0dzH9FfCDDFtlNoCTBLMIbVFo9PEfk6qfDEK0EskMfKydCQHQ3CTVE51i5WVRASJI9q%2bkWoHm2HZXbs5Qz3tZV8X82UfVozYuZy8Eie9mbPD5w7zS/YviThEhBAbLIG62%2btupsKfdpz8vJX2SvKAncK6xKeV6K8sj/96UVL44BZ6ooHSOTmTz9njz0MgMxEggRkYGHEOtpYbzvY2G4aGRrwqEyZrBzQ0dWELlcHXwmBAUCieP3%2bROeFQ3J%2bWiRGRscImC2MTS2EwtAxGUJiYYIG3ZOe0MYLukWbSjFNaTEQMHaMio4Q8QfprqTDFbVK1IhZHjx4pEFJNwtgZGWnCOZGixOuRM6HlaPIJkoGTetHgCvJzIT19P2SyzqSmJAORItQWyxzB3sFZIEnJp7BZg%2b3OaHv6S3GfBHDy1Blm1y4sAnmjt28gVlYdE9gdyj5JABTnKQ%2bgbDWJZaaUAtNOESpUh5wg9ZUwAmWtlML/bipMNkVhjvJ/Orq6uQsS9GdOMCwsnMVjA8GrEhaXZFySpTWaWQqPtnYO6OjoDBSeKAlxdHIRzomVoWvmuASiRLKD63P1l7S5Ywu9SVLYbRr3kRuUhG4J5JX4DElGSYIQjuQfvmYCn5OiVCgMEuojFPjt91IsPO4QOiNBituIzY8rwz/8LAss1AiFttOweh/v0foia4vOSY1hc9eYwseNS18jSH61ELPlBIW1RskutW1l%2b/K4hFWWlVP%2bfT6AHtIs2dk7CbNOM03hhXh8umZqLsy8k5OLkKVJNjlIZmLv3r2C5lD4JO0hDpDqE5dASQtxDUSL07Ia8YLEM9D97ajyPxMG6VsC4cnyfHMLG9RnSQ5pmSQ5ojqkcdq6BoIjp0RIfSuT/OraIA2IbItsn9b09jNbp3SYwmJTQ43QOKXFiYkJwgclaFDiuSlsZjKfQe/Hx8cJaTVllQLEZgMm30FtkuMi8pUcFwn8c6T2pa0skr2DkkSI0nVaEqfwfKQgT0iCjhYWCD6MVJ7sv4j5Hwmpm5iY%2bPU8YHsIIo8vya0pJBIapI9ukqHqXwxdEkqNPiJZAt%2b%2bsCGh0CR1Pt/0sL0NSdiSkKCSVJjMTmhra2GE0B9pKB2Js6DEhxIjqkOpL13TROkZGAup8fY1ya%2buDUq2lwrC2GJ/JU5IAjy%2bJABykmQapHYClGbnGluFwikJkfILEuzn5KgkDyHgY2ltL2yrMzS2YPjDWIDHmtoGLMtzEFaMJbZN70omS6KJn7cnyRwl73x9eZxJmlSGhTIh9JG6JicnYV7uIYEgJWmSGpMJECKkGaGZJYnTgCl7JDjKwp1gDhI1JXMiVad1Bmo75FMI/UV6S043Lf2AAH1pTaChoVlYC6B1gcSkVLxz566QG9D36FuxMTFCmCP2p/ZYpQCRyQxIg2jpnMhcYoRodSguLu4jH/BVVphUiTZA0L4AwgAUT8mGadmZHAuhRXJy5Nykt9bcJTwd0c/2zIGSGtI%2bPYr55OgIV9C79A7lEuSUvuTwSOVdXD1xX2SMQIZEx8SjX0CwsGfQw8sPwyOihW231E8iOUio5AzpexSuicqjb9Fz2hNAfoe%2bSaGZaHLF39ohsl11KMR9uxUG6ZyFMQEB0jU1LNmBuT2uSvJ3QolETX0vWVPcCpk/bBGqkl0d0lus0pfMSGorhZVsrt4MlZt%2bgNqUMFJ0Ts8lO0S%2b/2nzm5t1lIQ8gtqha4Ee20qZP//erzSApEozSavDhPjIyRDlRAiRdmFZWdsK4WY7IbKpAepCGKRZIC2h90hzKGOkSEArtdQuhcSv4YAvbYXfviAjoePIyxPZSRskWdYpqDzBXyp0jzZIk1kSS0ThmEJ5IYsWpKnbo8Ev9geQhMjeKe2lUpCfI4RBarS1uV6It4QMyaYoBktMgASnzpwbkaVkkxR%2byHwoPSWmlkIeCZY6Sjs3fm%2bT5O/R4hSVyP4pOyUbJzOlVJd8Fm2NoSPlGiQwekYLvCR42v5Djl2SFP3G0tjmWiAVmnGSIp1TIiHZLkPIcPuOq08ASf0X3OH2GSRvLVnj%2b89ukvwaYyQJkwSeJFCYzE/YOCUwxAof2WOJGdH5F01gO5O7S16JcvVtZTdsxXIBx0vuy229I7/tJza7tp5t2zC5hf0/nUsIEfnPmOPfKtu28P2ibO1BBIWPexFVJOewbV/jx/Ot5yjpi0QIf/h0wXyAPEN2mwXp5zKy8ps/mZHepQwyciofd1tTHWn2HtWTYvk4YX1puc09x/KSHEFhW3tyKsLmaOGeHL3DZnCXRAOE7e%2bsjhJQO1L0cx1WpIS1vl8kTJK%2bAf2cR0ZOZeu7KsLPe6g92Y%2bkrPAd2rUitCkrryR8jxU21o87UOEXGqDIJKOxWwm1VVRRS1WZV92twKspKXAGmmq8gZYG6mio0W5SYROUlqIyaiupoNpuJdDX0QVdLS1eR00F1VVVOSkp2XWmRTzNsIaiEmoqq6CGKmtbVY1TUlTe0NZQ4Q10NEFPUw0Udwv0Oagw09FQ00Q9LS3Q09HhdbS1WLua7KgB0jJy67K7FMXUT1VqT4l9W1kZNVVUeF1dXV5PXRl01VVQT0OVtaPKM0GDkuJuUFdWRC11VdTW0ORUlbV4fS010NdiWayc4oa0jLxIIoQ/SLa4Bdpbbhw6nPY2Psx7MdrfYb2z7dhGXfGBtTBXw41jMeZwMt2KdzXV4NzsLMWxWWGv4vYHfKhJC%2bJmr5zgJ/vrxa1prrDPXmne2sLsvuJupXf2Brp8Vkb8%2b%2biwoHfhxmbi4sr2jYKqk0vhFraiFBtVrjPLFmI99Dh9DS2uONBysdjP6L2ezA5RcrA95CV6gp2KDL9XT2bFVFv9vpKS0lM9VRV%2bf1TI4sGDSW/TIv02IguLOIe4VC41I46rTXHbaMr0XjkSZsjpamjwGX6BawV7Ml4fS45aDbTZI9aRjeU8jAK4kjBTzlRL7pGBnu6jnVK7NkgIf5BlAtgtp4jxMXs/lM49f3zw9OlHN2/eFnOIuMr%2baamvXiuPMBQN5NpjpJMW7tnntxZ6q%2bFJ7KWaZ4/He8WLDy7j%2b5lLeLuzFFK8tBaSI3xfGGkqffB1tFkvvX37cfq54cetp66sDU99wLHZJew6dwcd1A35hlhD/mikKdob6omn0ixe3knSe/rtP/7DiuqO79HOkNnsP/0Ji6S%2bW/U01pw101d%2baa2jLi7q7Xqae2d6tmJ45EPewAjquYdAaE4ZnurtWm3NcF07nmqC9iZ6WJfQ%2bKIv%2b8ODvMSuD6pygagsG4XSP0ZgoLWrOMBW%2bbm7tf4zuV271uUEATAV3M1UOiXIWZRbnPWqsb35w6sFHmeffYDpJx/w/uMX3KlDrvyFAnuI8tTHEDtTPj075H1RQfSHB4Ot8OxGFz4eOYVT/bX88XQHce9hGz7FXx/8bU0h/WDC84KO8y%2bvPVyC8zdeQO/IExh/KsKDR9tFaZ46SyUxZuhsaoCtMXbzUYYyb0x2K4OnqRW66ZuBpaoWBv3wI3fUT2epMtEcnE10sSAzaqHqVOurnnsPRacm7%2bPwkxdw6tY9rDvZIT57wJrvOGgDdkZaeDjYe7n5YP9Te7OUNXfXVPzxGzf45m8uqClvy53MtOFOHbDiTfTUgXzRH8hxkC2m%2b1piWbg11uyPFTc3d%2bLkxDh0dvVj5/EuvivHXXy11AljPHVhn7MZVkY44MnDofxo93F%2bpLMJL3e24qUTlXxXrqv4apkrZgYbQKCtEZaE2YiP1pwTV9efw/raLjje3AuVVZ1YcKxfdKHQYb0kxgQ9zPWxPNYV7XW11xM8fLAiKR7i3Dxhn6U1mmqZckVRpmvtB6zQxUwXj%2b6x4k621i%2b3jk5iXm07NPYNQfOJs7i/tIFrTbUV9%2bTaoL2RNhzdZ48H9risZCdm4bHceqwuaAJn42iU/dmFO80m8%2bIROzTVU/skgN0MJmb6m0Ndmic27fVbu9RUL8b1l/hmbhL70jLXBnI8xTdrXDHeWxciXYyhLtkVjueGr4x2NXEw/xxXX87i%2bZYSce9R341bx9wxa48%2bBNsbYn2CPZdZ0Lxcf/wSvrl7HRYfjkN96xAeLqhcuVnpxJfFmqCnpS7kh9iuuuvqi5Lc3fDl2DmcGRnAupRY1JNR5Q/6W65UxRmJWD2sirKFgpTgpZT6Du7J9CTiyivoPDeIe/PLltoz7RfPFdgwjdKGglBbPsrdZTkmMBImLl5hxszDhROd%2bLe/OkNKYIToaqkNkAB2yjInuCkAFTgcbAF1ibZwIjNuLT25SDw%2beBbrK6vgSOrR9ctF3uKJGgdM8tWDOHdjrE90EHlFRK567g3H7pPN0NZYiU5hsRARG7J6u9qeywkzxFBHI2hNsoLMxMT1fTk9cGVgAO6MXIbwQ72QlxKxcbfWDirijSHYwQAP%2bhsvqn37w4aTpjY32lm/%2bv7e8Eacl8ua5vdSfLS94vu2THORr7UuE6gtNKU4il3Co5cKSsrh/uUuDD5Sj6WFMYvXSu3EAwVW6GGpjXl7rMT%2bVtaLf/oHQ9jrn8otPLgFLjbh3P/534zQz8pl7Va1HW%2bmr4YfBaDEBFC4zxpOZDhhVYr7ipN9sKgpLQgTfH0xPCh4dbTcTnyvwR5TA3Qh2dccTx505RICLBb8wiL4YzXHsKi0FF18/cVHY80X7tbZ8/kR%2bhjhagzdOR4Y62644RKSx59pb8XOE8fRMygbkjy112dbnbE22Qh9rPXATk1apPPDTrDX1OICf/g3UeJP/8a7qKuIzJl/MpP/ZvVwiCbva6PLhTi5L1tZ%2b6zKyGmKfpbXQQMDc9Txj4WKihTuZrkVDBZboqeVDlbFOXJpAU7vDZTM52X/RUvs/I0W/vAvBtzOv5svFUS6Ll6vsABLQ/UtAbAERUlJFcpjbfHsYQ8%2bp7iUKy8th7czo3jvaj8kHS7ErkPpH56HOs8lmBku5kTYYFW8HaejIM1X5mXA6bZG7D3VCgeTwrHY22bpSVTAXI6FwfsEfws8nWHNj3bki%2brOTEJnfR6ersqA4o7beP9szfKDIIe5Rjfrd2oK8hvmCjLv9aVlxYbSu1D2T/%2bCcn/8Z9T8cQda/CwjqtE1n03YrffC30pzw8LEf8khrBKV9W3AyCEEncOyQMPKA62i0kTDof5PR7xtnntZ6vONKbb8%2beOnN6rym7jKjDymEZmQFJ6NTcWtouGoA8%2bHvR2eWaqrbeyU2/QBwASAFfv0oDjNSxxZ2gOy0qoYEuQLjlZWoG7liy1ZbW/ehybNpJo7fMgM0EF1qb%2bJv/nmO2yqLsbBrna42NkOxQUZmG9j/uFVStFsjq71y0RPVWzKill/%2bug5l5%2bcBpby6mC/WwNSw6NxfuzmylxQ%2bvRxF/%2bXhiq7lq0VZBYUvv0R//Lf/wEUfv4O9FUV4I//9/%2bLmn/6y%2bq9sMzHZ9zDnnoaq636OruuW9gHYl1HC2QXnwJT7zKobj%2bLBw%2bXiF8erp0bcQx94G6ozPWWJ3BP7ryEiUsP8Nn0S2isOgUdTZfwVv8UXPVKfnIrPPOJyS7lVSnKBOl3gKoM7Ax31sHt8Stw494D7O05C2OXuvDS%2bTPQPzSI02M3199dHFjMjoneqKvIgzMdrdDX1YF3p27B1UsDODYyCLdvX8e%2blkbR84H%2bxeKUlPWKwnR8cn%2ban5l%2bAJf7z/JDPT042NMNg72d8ODGqPjt0PBiWwTwQa4AACAASURBVH7uWkJMFH95oJM/296Mp9ua4PL5Trw5cg7OnmzB3rYm7lFPz9KZo0WrMZER3AjzISfaO/Dh3RswNTWFfRdvwPMn0/h0Zop/OTy0fLO9fTk80Id/9mACFj%2b8hScz0/B6bg5vXL0OE2O3cHZqEh709q7cOX162crEgtspo0gC2E08Hdy9M47PH9/Fh5MjMHvvJj68Nw5PHkzii0dTMH3nGq6sv8O8wjzs6%2b1E5BZw/u0cvHv5EB%2bwzjyaGcf3rx/Bh/dPUcQvYFVNJba0NMH68kt8/Wwa5x7dwYfTN%2bHJwwl8/uQuvGbvrYs/4OnOk1hSfBRBPI%2bLH57Bq2f38dHMBNy/cwOfPLgNiyzCrIne44WhfjzMoDVsvMPFd0/gxdw0zkyOwrOHt/De7VF49fw%2bzi%2b9wOkHE5iYlIxvWVSaGBuEmTtjeHfiKhvHOE6zcc1MXcO5p/fw1ZvHaM/g%2bQ4pOSABAEHee5NjcLq1DsrzD2Hhgf1wrCgPKwoOwbHifKw%2bmgcvHt0RfgLTebod5t8%2bgadsUG9ePBTqtdVVwrvXj3FudgqW3z%2bFitIiaKw/xjr7FN68nIUL3SehvuwIFh/KhKaqEmQDhSX27GR7MxTk58ACa4/Vw7NtDVCQkYKluQehLDcLXz6dgfk3j6G/5zQcPJABi6ztF09n8NrwABRlZ2BrTQU0VBSxibvHJmMWpm6NQEJ8HLCJhCMH06C5uhRZPTheWwmlOQfxGBtHc1UJUH1bWwcgxuijBkyyl5nUkUmfNXQVp25eYVIew/tT13HmznX6OBEc0HW2A5Y%2bPBM69%2b7VI6YBpC23kARA95bZrFWUFUNTQw0ss3qvnz8Q2r3D2hTaY7MrqXfyRIuwXkj1XrF6bPZx/NoQTt%2b%2bxmZsTLjHhIgDvWfh4MFMWJl/DuxdZMKHO%2bNXcZL18R6rSwJ9z74/NTEK8UwAdD12%2bRz1De6OjyCV%2b3euUz%2bBaSw%2be8IEYPdJAEBU9cTNq/CWzSi9ODM1Jnyo7/RxHOg8AeNjw7i29ApoUaTrzAkkDRgZ6qNBMRu8h1cu9CBpD727uvgSiEFuYBrABincu339ElPTB3j1Yi92tjcJ7zIhQgfTAGKfqe3rVy8wtR0WvnuDnVNkYZoj1OtjGkDb9NaWXsL4tWHmIy4K32Xqj6db6mCo/ywT6jTcuX0NYmNj2GQ8gtnpW3j9ynl4OnsHSJg9J1vgfHcHPmPaQYWIUiYAwQSIv4dpNtMf2ItDfWfgYs8pmjW4erEHBs60wS32QZ75ANZZpo5nYG3xBV4a6GR1T5NEgQbYdaIRrl8%2bBxyrd6yqHI63NIBo5Q0yAQhtPJi6DlOsXu%2bpFhgZ7IV1Nmgyp6IjBazt9zRoOM%2bEzTQPppldD5xtE0xnfeklXjzXTRszhHqTNy7DOZqU0UF4cn9CaG%2bo/wybvAfMz4xjUmKCoKHULzaBcJO1y4TBnO9p6GfXz5npvmU%2biH7NQivRf5AscZ/sOM49eXwP7965BdP3xvE%2bU%2bvZB1M4M30bpu%2bO46OHdyEwMIgrLirkXjAVu3fnJswI9dgzVu/h/Um8xxzp3ONpiIuL49PS9nPPmapPMxO5z1T73vQEzjCn%2bvD%2bFE7fuYVk88yn8Hv37uWezk3Dvbu3NtubpjKBD1h79N25xzNQXVXB%2b/j6cbMPp2CGPZ%2bZnoCZu7fY81v4aPYe1YPH7Nh5poN3dHTmJm%2bP8feF928ia1co1B61T9%2b/cukCr6NryBM7/YetHzeDlqoG72VtDj425ujrZAOO1pa8u70lH%2bhmgwGuNujlYM7L7FLklZXUeUdLG3C1tUVvJ1twsrHkbC3MOE8HKz6A1fV1tuQVFAVChLdneYSLrTV4WpiJfI2NxYEmxpyfiw24OVlxujo6S7vklUS7mAk6mJjyHtZW6G5rxdlbW2x4Odqw79ryvs7WEORuAzqamtxOaQXextCI97RhwMjSDH3cXDb8PVzEbtZG4OdijUHutmCkp839LKUA1gYGPI3Dw8aOC/ZwF/s52fIhHm5iT0d7PtjDBi2N9TkpGcVNRoj4AEW53eju7rQhVX9y3vxw9oqpiiL3L3/ewX377U5uv5cO1xBnCh2pTDi2OpybqSFXn2I0XxZtsOhmpMap7drJ7ZbewXmbKa83xpsJ9fa56vFWujqipr0WC2We2i%2bq5X5aPCf9HfTt%2bJbv0peDZGuFRW1NtWkFefnntiaGEJ297%2b2%2bvIgX/q4mK3//21/WZXb%2bwJtoyGyURxhzrD3MDjbkzXV1%2bISD4R8CD4c/L84MWb/ZWb8%2b0X9cfK42W1QVbSFqSTDBsmhT3kxdlbdNSFz5tr5jPjSlZO3l0Dn%2b4VAPN9PTy2ftiRI1xRtgXbwZr6OhxktTJkgcG1FNrkH%2b8/%2b9e%2bb%2b/9M8/OrPu4z4b2X08Y/faaCyspa4Lc2O7ztsC%2bEuehjlaSJ6MaD3ordU9ZWmkhyvKi%2bLKnIyqLpLmjvgr79xLtceUv0N0NvcYP1hptnzmXj9ZxM6CqJbGvI4pr4L7qjJYo3Cz4s%2b9jqPLXUU37nbmXMJw5UvgkfrHuu72q//8S/f4P/489/wX77/GYMdtNe7s%2b24smgTdDE34FP7S195jR57PHajY3nj%2bV0GBmdwjYXJS6054vZUMzieZgWOhlpoeLDw6R965x5GXrm7gMsfkMVmEL17hx2lpeKWJBP%2b9AEbBocFPkAAQ8DQICZ6WXF%2b2emvpFz85/%2b%2bUxN/lDcEGRUz/ElOl69JtOYuFTtjpIce7HEww7aDdvNWmn9f%2bPc//gk1FGTAUk8TFKR2opOezPKVEhd%2bf4AB%2bNuaYH2EzYdLlsrzl9RkcEhFBq5qK8CI1i7slt%2bBXdHGfGmCBboa6%2bKheK9FmwDXd3Lq2hAYE41pBTkgbWWHyjZWopMH7MTVSRboYqyDB6Pdl4sj7F4/6m7gX8%2bO47sHN2DhyW2cvXSK78lx4U4csAYnIy1MDvdetc068HJ85MI6PhzHZeZUOeb87vXUiE%2bmW/DdOQ5g%2bgtCRFEF0nwtsSXBGe1MLMRqxh70V18gMzsfLeyDoPmAp/hahQtGe%2bpAuJMpVid48VZKPy15GqliTkIY1OenYra/DZ/pqbZ0vdoTMgL1IMjeGI/udRDVKkqtntBVxWMmOlBrZQytJtpY/O1fRU1hBstl8aboaaGPR8LsN4xNjFZ3a2pgV%2bMReDl5Afb4OqKqrSN3JMZypWW/Obqa6WJJhCNfb757%2bWZ9Adw4UQWTXQ0w3laGF6pzVs4edlvqOmyFDsbaUBRuj/UxzjB5toO7fLoLH7JoNnyyC6%2b3HxP35TnxA/l2aPYLQoShwQwfY2w9HLrh5ndYXFRYh4jz8Hp2Erz8s7AgI3N9staZj/fWw0hnI2hO94Qcf6Ol87WHlnFtDvHDfejIj1o4m%2bu2dqvGA7NDDSDYzgAa09z5fHeD9yeCPdYWH1/Hp7fOQ5ezFTab7V4cqfXcqIg1Ri9LPWxIdOIcrQ3mzWytYOnxVcS1WSw7FI/a%2bnrLfYWuK63pZuhhoQtV0XZQEum4cLW5aH1%2b4jyuPBjBmYHjopO5oYvDpe5cb66VQIiURNhhdbKH%2bHx99frMzXHAjbc4fmkUBmvz14dK3fjBo3Zgri8QIhI0qIYHfA3gXHPRRkpWN6Qd6sLpW9fgyvBViM9swTOn%2bsQTzYHiZF8tjPUwheYUJ2xJc9koSvBcHDlTD2eqGeRNd1kYO%2baF48ccMSfcAMKdDbEu0RFd9VVE3//j/xSfbyrFwY5jEPLNXzBQ7se1C0dt%2bYZUU/S20oWWVCcsDLdctnC2%2btBSW7x%2bc%2bA4r%2b3guJYeZTc/UePIt2SYgY%2b1Lh6Lsea6i5PWB2uPbAy3Fq3MXeuG9sK410PlPhs3qp3wfKEluJprQVWMLdYmO/Nj3W1rtztq10e6TuLUqYa1Gz3168PFtnC1zBYtDNQljJAKKCupYO5eG/H96Rnx46fvMCgwAzz99oCDcwicPHkO3y5wMHH26Fqylwqf6meGZ7NdoC7VlVPdJc8rSyuj9A/y6GCoIb5S5s7drbbh8sP0INLdhPc2Vlr993/%2bM/7xH/8ZdZWUwFZDDVT/9V/x//pv/wP9jWRWq2INxMGOhtie4QKdWS5YkeazZGWouu5gpgXWzhbLBeUxS/2NqWsnDnls%2bNtqYccBd74wwmspzEB11VXhJ1Gulixej3HmTh/2FQ0e8VobKjDjPZhAm1KdsXG/i/h0U%2bNyTmwyZ%2bYYgeUZWaLu5vLlq8V24rFiC97SUF2iASQAZSyOd9%2b4NT4jmn/zAk11rKCipBKdrD2hrKQc3527Mn8/LPlhkonhQsIeF2g5ul9sYWDE//U/fkJLPWXQUFCAf/rjXzHWxGLheVz048MmJu9CnA1EJipyi/I/fIeKUjKw69vvQJaVHTt2oKeqylqnseN0sbnFy3A3QzyR4cCfPlMgbqw%2bykDOQTyak4ne3p5orKG6PhqZ8bjdxf15gI02fybdjo91NV/XkP4RLX78M3r/2z/AsTg/rE6KEJ%2bwcnl61cPliae5Lt%2beboPVaYGioqKzMDzEYPPAdejpncAjeS38kJ/3s7t7fZ%2baKqmuS9HSGC0hqamoYFaIpWhi7Bp3Y%2bg8mqmYQtWJPkiIOwihPnvw1fGT717HH36YYecy7x%2bwB7MysuGv//FXVJbaCZmxgRjgbAXf/PnPaPE36fkP%2bc1Pso1dX2urKIC6rCx%2b/%2be/oraaGhh9/y2q/Mu/grezNR5wsl29E5AyW%2bYQ%2bCrcURNbqveJhyf64Malcwz4XIDCw0UwNnoZj0aEr84k5jw54x/9PMhKQ9yR4cVVhHhhc1URBtiZwjf//EdwYV6/PHafuMct/OmgW8QjLzNN7mz1IS48OJ7frRSK0UmjcCh3GALCLqKagjvf7Rw%2bN3eo7KmJnPKalILyJiGirq6FF3rahXx6%2bvZ1uHR%2bAMeuDuG1S4NwZegCzt26Jvowenk5Oz5eVHOsAhk4gq7TbQzo9OPTh7dh9t4NGL7QhUNnO8SvrwwvF6VnbGSzmSRscJ5hi5sMTF0c6IJBViYZihs91809H7q43JCXv34oMwnnnt2GJyxcfXj1RCA4HjDU9uHtHL55dId/PXJ5pbOibG1/Ygy8f/kAphmye8nQ3Nz9CRxmWGSSga3H98bh0YWB1dG246tRYXvg6ZNHcOXSVbx4/jLcvHGXId0bMDlxj10Pwv3BwbW5oQsr1uZWPK0qfyJEpm4gg7dAZMLM1DUBNt65dQVfPLkLr17N4trGO8zNz0UCQwRyFt7NERQVoDNDXTj3YBIWGAhZF73HKiakttZGANE8Pp2dQgGQMGzBQJOA5B7OjKOYW8AzZzvwyJFCBnhe4wuGBwgxErC6wdp7MXdPwP4rq2/w/MU%2bzD6UTegSR4cH4PaNy0I7BMWJx7jLUOGzZzN4/%2bEkxicksH5fxru3LsP0xBUGhS8xlDmEj2duwIsnd/Du1DW8c2cM7Z1cPhEiAhy%2bcYUGL7AyxYcPCMTFKQY12YcETE8ERg5DZJ0MDrPBExyFutJCpHqZcVFwqqUW3zIBLrJnFaXFUF9bhevLr4HgdEpEKJ493oC9DI3VFOdjP0OHG0uv4cTxJtpfzJK1Z/D00V2cZ%2b/WlhbCwYRoARaTUBbePIH%2b7tMExeEFg7HsGVYfzYWCzBQ81VwLLcdKsaGiSECSM1M3ICY6GsrzsyFnfyLkpSdjef4hKMvLgvb6KjzX1QHVhTlQxYqjkyvtZv2kAbcZtn/HZp8GyzA0Pr5/m4gHoRMCgcFm93NChDpJuJzqEn22nRBpbKghAoOeCYQICfbD2ydCfVZXePaREGHnJFAiWOaYxpD2vXnxUGhPQohkHcyEpffPgMiXRwwGU5tzbMYZtheYKOoL8QFEiFD71MZjVm/u4WZ71O5jBvHZPSJbwM7e8VeECOvkDAz2ncHxa8NEGmBH4zGmBbUwOtz/kRDp3CJEqB6pIQmLzSieaKiCa8yJ0ayXlRzF%2brrqTaLjygUcGexjmHyc6guzRYTH2uJLONHWJGzHIxKF2B3WJhvgTYENqis9Auw9Qdv6ek4Lu0qpPWKnhgc6BZJjZuo6ttaUw8Xe00K927dGhB9zvH/9GNhg8dK5LmpX4BCp3rnOE4JQn7NJ/SUhoqHLGr5B6ovXhvrgyvkuePboDkzdvEzn5AsANj4QewM0GxvLr3HsUj9cvdADD9h7Y5cGsPdkC0yzGeA33sMmIVJP7%2bC9iRG4NNCJd1hbMywnP3e2He4zHwMb75kw26HoaCF754NAhhLJMj46JJAsA6ze3fERoEEPnu8R/hYB1WMzKtQjkoa%2bPcgGf2tkkLQIyHkmJSXC4vtnguaODrE%2bXuxlWjApkCs3r14UzJy4zI%2bEiOTn7rW1Vdw0U6/JiTG4c%2bcmTowzZzF1Eycnb8KdyRs4wxyOu4cXn5V1kLs/cxvo%2bb07N/DB9E18OHMLJpljuT1xjZ1P0HZ7Pjomhpth3pnqTU1eF2jziYnr7PwGjt9i794dh9TU/Zyvry83fYc5U%2baw7pGDmhzFqYmrrO0xnLo9go/YTB49UgBOzi7c5PgVnp5N3b4KrODt8cvC%2bSR7d5Z9t5UJ3dzCmrt6eYC/y55PTo7AXWqPRZ67U6M4yeo%2bmL6F/b1nQF1TV/gR1x%2b2/sIbqO1W5a30DRiy00VrPQ1wMNbh7Q01eE9LHTTWVl3buWPne2lZBU5FURmsdLR4R4bOTLT0%2bX//t13w/V%2bU0VvbFqz1Ndd3ycp%2bkJKRFynKK4G1rjZvq6%2bFdsb66Gyiw7uZafMulvrgaa2HPrZ6oKFCP6VRBV0dF15P15XX03ECEwNX3tTQnTc1cAdjXSdOUV5tXlpGcVVmlzJoaljzxgauYGrogdamAWBj6s87WASjtbEPyO1Snd8pJb9Mf/5LR9OGNzLxAktdV6S2DI3cWObnCXbGvqggp77A6i1Ktsr9QfLHD2LdzcWnD%2bu97akKne9pOroxNdzIjZ%2bvFZ/M8sAwe/W3gUHBD6R27HwX6GgjLmyofJmYmf5a9lsjTk/HAnfvNgOtf7ZAq28U3/p4uzxQUlJ%2b425uzOVVHH2VXZr/qtRff%2bNCuDJ/YY8i1xyqI66Lt4DOTGs4GKTHa2l5iSv3JswX%2bzq/UNL0WTKy2geGFmGcvmmYSE7O4b2Rvvl9FWW1J9oaduKcyLPzZbHnnyUFHls3lLfktHdqce5GezeCbVOXHazdHjk4ujxVkzMQ66WfXPqPjqm3ponNa0Z%2bWZyCZwJntqeQi/QqF/s4Bz%2bzs3Oc/eln2TXaz/SHXQr0x48YrN1nvvbwrNrTmStx754%2bmYC1hUlcej%2bFTye7%2bKxgo6XMfU6vzbTkV/Z4u66U3Lv3KKTu9FxH%2b1nx6sI4Ls6LIGl/GX73F6mVnFjP17aGSku%2bDlYbRdevP86/evVRd6TZ6vU0B7yS7IADYYZ8a5IV133IHgvCDNgMBXDXkt1eTCTqzTm7BK/q2e5Ffdt9qMeKiob7kqfl3pfWBq7vjPXcudrEkWfdmXMPHLSc53/60z%2bh7J//gtL/9h8g99dvV4I9PB77ubo90VWz5rVS2p79H%2beezP697MyCYkAaqu05gIqBKajrtX8j2C3hTbBr7FsFeQ0R/cULYZcY8QH7fW2wJNby3cWB1uVnc5P4%2bvEVePd8DN%2b/uA4Xq8L4wXwrjPM2wHAXS8hODHrf2NazIF5jYevRLXj2XATPn77FqqIjG305Vlx2qDH6WxtDcVb00pFYj/nJylR%2b%2bc4VpDLdlMufiDUSXyxyxaORhmBuFIw5YUUrgY5h83Ye4RCyLxXMHSNAzzYUra3jxbWJA5gZXIGm%2bt6YHd2wVrm/7b3Sd1Ii%2bW%2b%2bR6W//wQyf/sOv/%2bf/yra7394/nBozZqZniuGBlWsmyXUv5X1SRIFpB1FBf902OEYiaqeieKciDauLOoMGmhbofQuhU/7AzL8LbE4ynVjqK9lbeB4Cd7qq4fLHaUwdek4DLVmrgwfteNivfVgn6M%2blseH8n3dEzg6dAWvDU/B%2bNV7MMLS577Tl/mRSn8%2bM0gXAm0MGVBxxtpYF26gOI2f6W3E2QvteLE4DbqzPERXyt2gNFofLAyD4GBEGzo5HuAsHQLg3Mk6nBw5B0GBwWhiGcc1pZ3j0gNKGH73w9L9BQvZ0cnvTJV1RfG%2bXmjP7N1NShbN1Q3Wi2NOiUqjT6KJnhskB1ZjYmAJt8MqSFR6JAuPVFSBgV8YylvvEZcmnOIqYs6AnqYlMAF83CECWYHmtK4uvtiWu3b3QhOK3kzj%2b5mrONZVwXWWhi3dqHaFBF89iHbVx7LEvavVx%2b5udJUP4/KjOVyYvIMd7Lyk5PracFnQRs5ePQyxM4T6FHe%2bzltZfDbSDsVTlwDvj0J/kie2eMtxt2q9%2bco4fbA2DoHs8BYM9jy0bG0fLFp%2bMYOIa5iYkMY72CQudWRd4g8GlYONUQAmhFetH0o9vuZh4imevXoG1x9cg8pwP7RSN%2bDqUnv5sqgTYG7gAfH%2bVXg4plns4Br34VJfG4c4j0UVJbyDS8pCa%2bYAXx3XCQZaVtsFoAK5e8yxIdmJuz3UsDHaX716d%2bA4N9RWtDzSU7rc23J4aaTcYWN/gC7Ge5piQ4KNqDQnfa2j/pzowcQkf/fGXb4mt36%2bKtXr/c1jDlxehAGGORthc7w11%2bcnzR8z%2bw%2b8VpoCY/WF0GD7HfZ57%2bSvF1nxdfsN0c4kFLL2NmP6vhbREae9Sx3xodB2OBlr7VxWSmI7VlszLuHh0GPoYBSIURENG%2bmpbWuG8kZ8lJcjXm%2bvQltLc3Ay81iuS%2bznKmPOoKWhF6QEHYND%2b9qwIKZotbawamF8uAuTE4%2b8r03rFzWlXcDaxD401LZGKYkJ0AaJkmg7bEpxEI90Fa2Ojw2sj1y5xF8buyK%2bM3pqva0ma/7yMe%2bV9GB9TPGzgNOH3LEpy28hL/Dwoot9Kng5ZXF1YUlLN8psuXvltuL8UD0u2ssMz6bYiLsjjCDffjcOnGmB25d6oNpJFk8H6vAjacZrDYl6nLNlBBREtUNOZAfWpKat5gYYiONdjaAp2X%2blJrWH60joF%2bcHlIkdTIOxtaRv49aVaxt7TG3ggKoRltg4Q4prCNY3nRRNnLq8diyqZcPGyAey97VAXlQznxx4YNlMy1gkJf0jmmk7rVYnn%2bJaEjrFTZGnxUba1iAl0QASQFm0Jbbvt%2bInBurE0wxB9fX34tjoEM7du4wjzXEr41VmaxkhBpAWYA4DuXYQbm2wHrK3kndzL8ag4Fp08ziA5fZG7xfiYx9l6xq/TvAxwIZAfe5ssjNW2kmBc9lZ9KvtgmJ7KbwSZbV61yX4Qb215Qs36wjM3tMOo/0T4vMdedh9LBVv9lRDc%2bk%2bfDx4aWXSL%2bdRq1XocwdDr40n07P829kZ3KtlAHXRcTDS1Qg1AQF4KjaVe320dm7IMXzWzsCDyw4/ATGefuKECDdITdoD8jt%2bRCV5aXQ31%2bR67EPnbvkeemIkp7kupaC0KQBlJoCaFGduoDpePDZ6Ge5P34a5R3c31/0mbsLtK2f5p6d9%2bANhZvzhMCs4lR8gtjbex/t4MQdT1gzF5cfB2nY/RukFza8Vl8/lWTq/3R9oyud56omqgnSxOcEDbK0dwMnRBUqT/HAw2mr1YVTWbItvwGtP%2bzisDC/lXl2/yGckx%2bNBVzNoCLIFT3sbfHSxd%2b19YePc2aDEVw467htNBTWi6Ruj6OfoCGmpCXiu%2bwSEBvnjsYxM8cvC%2bmfDPjGP3S0C%2bf17ijhjLRU%2bMcQeC1P9wdfOCOwtDFFRagdfb%2bH1dDa75pmxvOaalLySQIigqpoW3Lo2xL8goPD0Abx99QReMvRG5fXLR0wY92D%2bzSx/KPsAf/p4DYOu92D8xjhO3mQY%2b9lDFgqnGRC5iXevX%2bc%2bTN1cLz2cLa6rLsZXT%2b/x98av4MN7N%2bAxC4FP7l4DSp1nJ67y71i99qoy0aHsHHzD0NscS11vjl2CuwwUPZgYhbGrF2Du/m3%2bw93b690NDRtpqWl4f5yl6TeuMOB2Ge6wtPs%2bS7VvXBumZXJ4fnN042Zf90ZMZAzcu30dRhkIe8hS7Nk7o3CbPb914ypcu3IRHo5e2nh45dK6jZUd0K9KttCgLk4yJEUkBy11EwojpDd%2bbQiG%2b88KcJKBEuEHEN1dp3F14QVDXA8ZcrtB6%2b7AAA8%2bnb0Nb149xNXVN1hZVYZNDbUoWnsndO5810kcYx0aZG0R4htlqHGDgaFTp9roN4mwuvxKEDR95woDL2NXziMBrNcMEi8tvsBz57sxK%2bsAa%2b8tLaoCkSz0nIEhYYme9gZ8%2bPAU7zEsE58Qhx/ePBZ2sBAUvsEA0PjoII4N9zO4PYvvGCR/8eKB8AOKj2iQ%2bAAiRGgHxrGiPFbyBejIEBnSTgtatydURois68wJIOj55sWssHfgEkOOXR3NDOJeZHD6weYOkbJiaGBweGPlDVzoOSXsDDnTWo9NVcXQWFGEtOxOcLijrVkgROi7xEb1MwRIOzlYHWHnB6E22j0y0HMGDh7IJB4CXj9/gLdGBwUy5vL5biDILmzWoB0i46MQH7e5QYLevX3jkrAv4ERjNdQUFwi8wRbf8YsNEp8IESYhIjCIXHj26C4rd4S9OsTWEGkhIURot8jLp/cF9oj4AOIOqPxqh8gW0SEhTmjmqB6bWYFg2U6IEHylQiTMk4eTQrvUHmmlsEOECWBl4YXAGVI9Ijio3a0ikCnMLAQB0ODpPgmCuAD6Jn2f3iMBbm6Q%2bIwQGWe2RVh5sP8MEuFAH%2bg/0441JQVA21AIb9NfjxAIkTdPoPf0cRwZ6oNH9yfwfPdJYZ/QeTbbpCm0Q0QgRJZfwdXBXmRaADNTDN7euootx8pgdHhAqHfieJPwx9mIEKFdKKQB9C2qR1TW8LmuTUKke4sQYfXujI9A35k2YXsMF8KpQgAAIABJREFUbZNhMwu9p1qJbaJJxLi4WGYmD4kvFDSKdonQWGqK86GzvUkYPAn5F4QIacDMnZtMLV/B3fGrRErS7guknRpjwwPwikkYRB%2bETVI0G9zae4G4YAWfMI25zZwXEQ8zk9cAxfMg2SGC4gUiQ4X27k%2bNweOZceGcSA0UzYNAiDCsz%2bqRtsGNy%2bfJnxCBgSOsPXpXtPoGhi70CpwgtfdybkZo4974CFFicJ35AuonCfTh9DgkJiTAyvwLYbvPxLVhgTihTVOjg330DtDkvWfm9pESk/yfAfl52dzwYA8OXuwTSm/3WejtOYPnz3Xi%2bYFOHLzQSz%2bq5OPjYrjLw2xWz3fi0GAXXLxAx24cHurBYeY8L7PZ9fH144OCArmhi91w/txZvMjqnuvvwvP9Pew9dmT3rjJHGBkZCU7OztzghU5W74xQr7/3LLLvsuutepfP069NwcLKhuvrOQkX2L3z53qwj9Whv1Y70N8t1L3CvltcVAgGhibc6ZMtPLXF%2bgaDF7vwAhvDpeE%2bdt2Nl4b6hR%2bC0/%2bSQZzAFiOkCEq7LXgjPQ%2bxurzSorWxyXr0Xj9MSYzlAz2jeANt%2bxWpnfJvdkrLixQV9cFQ14OzMPTlTXT90VDTkzfR9uMt9P1xt5zu8s4d8m9%2b3rFrXUFRF4z0vMTGej68o/Ue3tvHi3NwoV0ne8Qm2m4iWVmlNzul5Fd3yWmCvrYXZ6TD6tnu4WIioyA6Yh%2bGBMTwploeYvldqm93Siksycqqgr6mC2vPW%2bTv7spnZCRhRnYWxMeEgIO5m1hRTvu9lJT8grSsEmiq2/GmBj6cpaEf2hgHgr6WvVhP016kp27H7ZbT%2bvDjjzIfhB9%2bbf5miH7lpYEhnkmi3jL3V6WJ9s%2bunL%2b0Pjvei09nxmCGedLk6IhXvj6BD6Sk5N4Fuh0U16eOvSiLvfiyMK5IPNhYxV1pa%2bPs9B1Eiju0X0bti51VUFR6ZW4YIj4bu%2b9tR1zwq717/dcLsqMwMcYLWmsbuL2uae%2b8PX0famhoPTPU9Yb6Q1Hzp456vz5R37Jx8%2boI3hq5Che6%2byA2JH/JxytkVktLe05Xy0Ec13j8rWt96aOaMyVrk48GcerNGFybOIUWhmarNhaus3a2do9UlExE%2bTFdi43JY3PpoU3LttYxnKaaLWegpCLyMPPe8HXfN%2bfk6CwQIvTTvy0BaGNiaOz67eOaz8a7It5x/CreZzb47v4kPntyB/a6h732sQ19pqNmuuzvnL56Mu3ebFt679yT0RbxxuNehBfn4dLJIxDr47O8f0/BeysD9xVHi2DReKrr86EY7WfZaeGiNy/uI/mS2fvXsSDzyEK4W/o7ZzP/JQtjfxiqdXszVa/68lRNoWio/yJe7D0PQ729WLIvaWOvdeR7N6s9C2b6Hnxkc8Nr3/7yx70z51YfLzzEZwu34P78GO5PT18Lsk16H%2bwcN6%2bv7cDn7TvzciB77mGoT/Z7GVULjNYxx1C5n9FLw1gc5Xt4fp9H6rySorZ4F2WC9DtBBUV1CHLLweTg3NW6wprVheWXOFaSC0%2bYXT9%2bdIc12CiqjOvl/eyiwdEyBgsT21brs9NXn42ewMmeGnh17TjMDNZhRWo0NKSe48Nd0tHBMgJT/YtWSg/kLd4dH8JXTJB3bwyy5Ooctla1iCpi%2bhiwKkRLk2BM8C9YzdCz%2btBaUo1nW9ph/PIoTN24gYXmvhvZNgc3svc1MJTng9G%2blaKcuobFtrGT2HfnGo7OjkHXeDc2sVS9Iq2bL953Ak303TAmoJzLimhdsrYMFNk7B6CVsglEyiphkZwSX7m3DkvjepDB4U1ChKSgoKgBoe45mBhUD9VHGldGe5pxuvs4TJxpxKGuNlF5evtqY8pF9LeLAhfLRCxOqeaG6jP4wdZiPHeiFiZ66nC84ygMlB8Qt2b2cXud9qOTRTjsD23BokPHVturM6H3eAkOtJdje00WVhWUr9QmD3CJ3nlgYxIISYF1kJdav9peWws9J%2bpw7GIntNeVYUNx%2b2plQpcoM7AMbY39Mcjn6EZIeeFabt0hbCw5iDUNZdBYlIZxx4%2bIwzJKlnNCGjgzAw9MCKpmQijmzUw8ue7mUpZ9dsC%2bYD/U/u7HjUKbkMWymNPMnwiEyKYAFHdrQJh7HqTvqYdjBR0b90a6AdfewOrzu3ilv0tcf6CPa91/EYIcYsHFIhF6KhvEp4oK58/VHRXzy8/xzaNb2JZzeHWgMn/pXMlZLswxkwkqAg6GNWNaWOVKyYHshZc3O%2bH1RA82Hs1fKIipX2rPvISpvoVgaxoEacFNWHygUXSmuRmWX80gv/gUO9tbsDa3UdSUfBGyQyrB1iQAI33L1gP8D76zC/ZZGj5VgY%2bv9eHh3FjOMSDqXU5U48KRfS2chYEnJgUeg7SwY5yBvit3Y/AUIm5AW10JaqhbrZfHNi5URLZzhto2m3yARABRXoWYEdwEreUt3PSd63go1h%2b6WiqEXLsh6xTXln4NQ5wS0MduPxbG5H/IiSxeGCwp544fKcXTJZV44UiFuCi6YL4pvX0lxjMH3a2jiOmB/OiTmJdwbPV84xHxUMsRLi04d%2bX4gUvYmnEZ0wNL0d6UGKHjuD%2b4Yj13f%2bn7HGbPR7MyuYOxh9825OeutBac4g6F1qKdSQBkh7ViXkQ7eLulvffy8tzoqD6KGnrWCyXxp5c7DoxgZdxZJPo7fU8DJvtViC3Nw1ci9yat9HYcAxtT77eBVsnzbQeuItO%2bT4QI%2bQBFRU1MCi7hStPOiPs7WrmLfSfRRPk/oDE/FCZuXsKO/GMbpyI7l/fYhItC3Q/ikZjT4tyYmg1fC3dw1vFHR20/DLb15GsSTqx2hJ1ZjndMFvs6JjFBnYacqBpun68TP32xGWeHW9HSQBuKI%2bpEXXF9awfcsjdcrcMxP7IDavPPbJxsO7l6xC1UfETfg01E9VpHRT5cbG5bzQ04uOJsvgfzY07BoX01fPnhGrGRtR1ouDljkN9erjXvlLhp7/G1uj2N67bGPkzzGqHi4Alxa%2bPpDVcnL85YVwEjgiPXLp6%2bstGWcHKteU/rmpGWJS8QIoIPUNCA4tzq5bPHG7jjFYfAUlsKHbT/Bg0ZZgx0JOK5xKR3c0GZ07GGju9D3Q/hXrujopLsMi6exWtjFTswVbGC9LRU7E/P/zAbmDubrW3/yts%2bESuSTnPddYWckvxOPF58AM43FcGOHT9gWVjg8ouAnJlKU98Xrlb7MD%2bsg/dx2Cs6eaIGByPSccAoAAY6GzHHL2DtcXTOoza7wKdOhn5ME05CYepB8fS9a9jI0GZ8YgyMXruCl7vbRNd8k59csop46GDoxWfsaRD/f819Z1Ac2Zbm/tmfuxG7ETP7Yt7si3n%2bvWmnbkndQhIgCYFACCO899577723whRGeO9BOEnIIY8c8hIyeC88BVWVec7ek0C3%2bu3MbEzE7Pb%2byMiqzFv3Zp6899b9vvzOOX0XLkhmZz9gRnwwWusdg8ZaEa6tzMOwX9LYsHPKmJac8o5A4ofD8qigoMonBEeLI7z0MTfCHItjDKAoUgeH%2b6Ohp8wNq5xsl2eSRGPRxg6roW7ZYKYVKdVS8cBQT2/Q0dAF3TO6kJscj%2b3h0WvT6ZWT2UYei1GOp2QveitlAy2F6OFsA%2bEB7hDq6wqeHvZYEeG7tZJePlbjGLjgbB6GzaIembG%2bHlRXlsPb%2b4NwvboUrl67iN66BluvYs9NXvCNnLXT8eTK09r4V8ODfEl5E4pKKuDu9R4IT8jHe1evy6YLq6fveiZMWOk48UURFbLOpnru9avnDNw9gUvtJbA4N4YP7tzkH4SlTr9Lq5g%2bK39qe5cQkQeKDfD4/k2GwF6wdfML2FwexfVPo7C%2bNM7W1O9w/O1TfmViRJaRnMx3d7XTOhtH37/G0Xev6CWqoN8f/8AQF4OZK%2bMjspKCfL6BTTri5ffs3GsBghIKm5/aQZCEH9amP3Dt9TV8bk42g7mTDLC8YICGHCxGkYQRy5%2bmWZ0vYeHja9mlrlYuOSlJAGQksh778FogYlZYmbFRhvbG38Li2Bvu%2bf1bXFhoKEx/eM7a2UGJq8szrN5poLpJgLEw/pYbf/GYExwmDn7uMMGAwvLCuABzr/R2wNU%2bts7u7SBkJri4bK7NYlZWBvb1tNMrcCTJ%2b5XeNkF0QJj/Wn%2bHoBaRiBfxfGkRdVHY2liERwzgkHiCECbp//sF7uA6bm8uYGdHs5C8heojmXxvW71Qjl5rD16%2bgEM3LyORJVcGejFtx2FCgLTkAHG5qxl6W%2btYfQ0MIr/GpcVxfPXioRDAiaAxIVByvrjQVM3q6xV8H4gb6OtoxGlm4M8JEQEOPyeHiV2FSN35AmCwFdvrKogMEfD7%2btIkEB/A4LCAvAgON5QXCcREY0UxdLfUCuwL6QNKiwt/JERuscaJZGFwGfvaG6Cpoli4OCpHDhMEh6kcaQhqS/LhxqUuOo/0OptekYtXZwQfBeIDSElCUJcgdku14C4DZXlZQg8knyWBENn1GKE2yK%2bgrrQAqN32%2bgr211ov%2bEJQz/hXCJFRIiP25CkCMfGRQUwiE34iRNoFhcheOerapA4hImVqTCgHnytEiIXZI0V2lCSC8uRHhQiF4NtcnRHe%2b%2b8pPQi/f3g7LGD3HYVI94%2bECGF5Ok5aJnpYpBih7z8jRNiQ262Hjf2dcuTYRd%2bJPpv8W0JE6UdC5MNOd2bdmvx3Ll9ohfL8bIGE2CNEei60CTdJT4HcWoh4oGFQXXQOH9y%2bCj%2b6zOwqRIjjG9gVO5CYqiQnXTgm3lWI0BCgG3v28DZeZPWRSOrF4ztYkp0muMKQGoUUIhS4hf0G6VqoK5OHCZEiRIj0tTfS8N0lRMIFec07wWOklU2UF0ktAhWsF3a31AnGnxAIkc84weNKpwRChNRfRELQGCPXknFmtVesEeLbkFulIcBTd0RuDSbZE3v5%2bDYJl3D07bBANsyy8cmWcVBeVsw3NdSwz%2bswxaz%2bevgue/pP2YT5El48ukUyN2TnsPdCO%2bSfy%2bHpMwElUqSQyx7J4J6zoUckCb%2b9JBAiqanJPLVLRAcpVqjcNDlPsbrJdYZdu0CIhIeH8UTsLC%2bMCQQNXdc81f34DoyNPGPDaBqX58fBaM9rbDclDcTERHAdbBJqYxNLa3Mt1NRVYn19FXtK9dDaQsfqKZQWeHl5ch3tDdjMJrbW5jpsrK%2bGtpYGbG9rwJbmWmTjWgiiaGNrK9TXyMq0sq7e0sjON7L6O5qhobkO2trqwMnFmdMzMORbmmuAftvVwcq11EN9fTVe6Gxm7dayfQuF5hGIjvq6cp5dG7ay9kiGR9fE2obmnd9SJDxQPnWaLz8v4tl1C/fSzo63tjUB7YVrZnVm56RzFOJTCKKyE0NEHhTlDTndMx4y9ZOOnL6uK58VFI%2bBLsFwVt0FVBUN17/%2b6sDM/gOHtxUUtEFX011iqOkptbMK5kxMLeCUijpvpuUDmspW4u%2b%2blZs9cPCImIiTM6ouUttjxtu2SqdBW08VNM%2beQjuV0%2bCoaMDZ64fxakoG3CG5k7ymqrNMR8NVIn/0LG%2bsYwa%2bdq5sea4NWqfstg98Jz%2b7b98PK3KHT4K6ioNMV8Nt29bcWaqvYwCnlVTR2sKWtzJw3z504MTCwYNHl344dAzUVGyk2mdct86edpZoHDwt1vpGnjNUsZNZ6YWAPUOzRmdcuZ1Es4p7fIAyBrhES%2b7VmM82Fvgth1RewHbPVIbQRBBb1o0m6o7z7Cl82Lfv%2b0Uf%2byxpT%2b7I2EDZu6l7D15L7w%2b/xKu374EopxYsNXw/ubt6vD98RGHO3iyaa4h9MtkRfXmioSOZa76biM2DSVhSHwypto7SQo82LsQhm8FXB2l2%2b9BMWt%2b1CTV1k62yiBi8WZAPehqmqCF/YjPU1/ejqpr6uKqSqSy1%2buZ81o3h8eysgrW6bBGKotKhOl%2bE3jaBYhtz51Fzc/PR4/I60uimlmXHgYaPiWk5a/7fqPDWf/kebL84yiVYZcpyA7vZyrMNVE/qwkG5o3sGUMFIrwjJ/Rq16VeDCcs%2bzvF49Gt9UNxvBPUVLZgUWSCOdMxZNdCwlTqaxWw1RQ2P3agfmXz%2bfpR/8W4c303Ow7N37zEiIFmc6FW8bn7WZdtcP0DaFDM83pFxY7zjYY6062EONt9JhcY7SZho6bGZ59MuC3PIQl1NZ1n6hTuTNSOvxx%2b2N4uf11bggCgHPnS04EBFJhfhErHqYhy6qa1my6c0DM6k3x/6GOMQvB6tZIN5FqGQaeKPDqoGUj/72E8B1onrGirm4JdbtuTaUzjmb2Sy4f/NCQw7oQNu%2bxXQ7YczXG5gK5/LwNdpZf0f%2bYAdQsQ6GyPd88SWzlHbxw7o4dEvtUD%2brxqofsYeAr0LJA3Rg%2bhmFo5musFshu7dePL8g%2bTuo2G8%2b/gZ3B56DE/evGd/kwUgCuiEEPs0NNH1xTivBkleUfp671AuXrieB503cqFxIB5i4sI3KyOuQqRTFkNpXujvlL55rbN9E58N49bIA%2bBmXiL38C4sPR/G3LB8WapHJeprOmGET43UU9trNV7NAf0P6aHHPypD7BErdPlWm8t0r5CWhHXjWTVrDHYt470NfZdd/vgD7yunhmWeAdBxLgeMfvM1f867githqPG0st6OPmCPEPGyzoC04Baw1PffctUzx6H%2bXmjOy0NdJQNZql/lVnPiTXQ2CgIHkxiM9CwQ5xSVcP0MkNy73Au32IR2pfsChobHygoDmqWBNslooRfADFDPhScHb8SG2mNRbjw2VxRifIgjRqT5btbEXpPGOOah8VlPDHIUyS4mp0tHmurwwY0emH47BIM15fihuoITBVdspbiXgYGGM8b41MnsFKzEIcrmeLWzB85Z%2bUPcKXs0/utJWZpXqbgouB3OnraGSM9qDDYL2nQ6dIyvSo7GxoQEqM1JROfjyrIM9xxxecSlnxuA%2bABfm2zICGqBZL88SaSbFyCuwotbA%2bisbydrybjCNcUNgrtJKDiaRGOKbxN3RkldWlNRiihZge3lGbZGSEF7EydJW9IdLtgmESwN2Fh3r4ViIz/OzkpDfFLxOK%2bqpASWpqfFIgNPSUvEZS7WLZMzZQaI8ayV3cnIFw8lxeDEyBDw4gm4di4N32eky5qTezfTPcrRSNMZkgPaeVN5Y87mrwr4dPAurC7NQ75vNGr/6ms%2b06tcUhHeDbrqthAtSGREG06atp9e3booY/eCvbUVW37m/otlUZ3i6oh%2bPKOi/5kBjgqECBETEGAfK4uJSIHummYoyipFX7cw4gT5rvQn6GkeiW7mCZgZ1Mib6hvzsbGR%2bPJKFTzoqwA3N1c00WF/aSl3MMw%2bHe1MIjDdpUSSpey8khiYOa%2blenpLQ1lZkhyaOZ97yme1KencdnxImMRc2xdT/Jr4Av/c9Wpzq%2b22jBToqS2DCjNzWb1X7Hpd0i0ux78WzbTdMd6/ibf5p8Oc3X/9M4bo20BTTgE6/v4I2v3nf4RQgyi%2bJv4G6rMhG%2b9ZBbmhnew6mzZyohPFHXXFmBmetnY%2bvG%2b7JfUu1sRcRQ1Voz2FCPUAZYjxKMGsgFY%2bJ6KAGxubwrzkUgZIbsGj%2b3cx2zZdfDWwe91bx1sS6JSDToYh23baqrLa7Hi8WZcBg2wrSghBexWlrXKrnE8xZlESZ/MoLIzq4Ww1fDd8DT0lyVFOkBbjCAEmPhKvs75rfUney/FWjhvm%2bmGQHdiFiV6NstZwj9VcW3nw1lPAi5H6myUBdeu9/p2bedbpm7YmARjtUMCFfXeSzzL1wK66JrjQ3AJV8ekY/dVRSJYzW6vzqN4w1rSHzOBWzAyo5yId/GRX%2bnu4awOX8e6t%2b1xJbI2s2bths92rfkNTWY8/QP8CZAB5ZoAIp1Is8anmLoQkQ4R3AKalV0NqQgq0JZvhA/fExUnPrJHIMxbLAfZ5qKdkvfn7v/8vEO9qhq1ZYXC5MgN8LbXQ7A//vPwhIPt9uorpnCvrKfGuVZzeX9RA7%2bBxTIoww9QoMzBUVEWnfzi8/sE94n32D1rjcS4m/MWSDq4ivVs2eqcDBwr9sTneFiZu1eBQ%2bYXNEc/c0QsWvlMWGh4yj5Ou3KP%2bfrh6cQDr84ugMjIebg/ewLaMDNnHqLzxK9puHyy0nflox1LeSE5Z5qbzA9682oNjo%2bOwsrGGF8rL%2beovVN4/NQl/p75PfvOgPEWSklMAeQUVFMXU8n2ZNfxgejHGWnmAmaEnmus4QF1gFA4nilamU8sm4sxd1yK8cvH5dTbOA71Yl7SFt/e6cOR2E4T4WGOIrsH6fF7lVKaJ86dwr0xMDRRxLtoOYK1nClbmRmDNNgsDcwxXs978kJg/KdJ1mA9zMhPfac7fzE5NgtqaBv7JpWa4Xx6D17t6IT0wRDyeVTXd65%2bwYKVjL/Oz8eZz0zIFYQbR5rcuXQTJlhj7q%2bpk96IyZ697RU45m/vwMR6JnIuZPkOq6fjk4R2YmZ6C%2bYU5vNbTxffYuk8/C82a1Dqisr3rMrMDh1%2byNTODlKQKoReIuMTW0qsMAhN6ooAD6wyUZKanQX9vB8P5syRJF2TpBEJoTwEUiIRYWxjjSxkabKyvYiBnGmZn3gt1LS9MsP0ELn%2baEDxQ1lh9DA1S1Fj220meECCrA1YWWbuLY8Lb3hnyMWA4ZKCvC9LSGBhanxUIFmp7bXkaVtm6XmibrpdhhBcM0VIEiZVP40JdS2zNv8TOEXJcmHkPJLggHQK9LDUxs/j52%2bHnT%2b7hLh8Ad67349CtAWCYWxAjEOTdhcPY19MhvLKmcj1srU1hL2hPPvzE1gj6ACJEaisJ8%2bOT%2b4OCnp%2bIkG6GMYj0IOy/tTHHcEMT5OUSHzAvxAXoYJidcDvxC8QftNacxy1WBwNgQhR5eqtLHif9HTT%2ba4Q6aU%2b8BREo5MpPoTbpVX0Tq4PCe5CfANXHECR2NlQRP4DN7L4Ir%2bx5jOwQIsM7hAhZiSomdUh5fhY8vH0VGab%2bkRAhA5Cig262s7FKIBrICORUQfIVUnEIfEBtpfDen/yE2MWxiygSLoCMRQagc53MAOdysoAIEdIMkLsMXTwZvqO%2bktQfQjmKIcIMIKhAOhur8e71fmDXKFxnHwNmgjaBQfJ3DMmSy0xHQyVQZAkiaYgM6WmpE6A4g/DkYsOMVgufG2CvBwikwseRp4LCgogEivdBOJ7UGhS/I5MM0N0uKDrIbYXoKeqORIhQOdLkELYv3TGAQGCQ54YQDOXTpKDUoCctuMyszgg9YJcQASJLhFggrMsSFzHy8hEQ6UJqlIHPCJFdZQgbKhOCSw/xA0TG0Hchhkh4OKx%2bmvxRIbK2PIUz42%2bFWCPECxDtR7FJPg%2biIpCizx7fFTQ5xAX2k/cHxd3oaoayvEwhOss6G3M0BHovtAk3SeqQbmbZ4Qc32aR0R3hapMbYNQDu9gBhKBEVRT2Jboq6Nh0T72iEBEJEzPA7iaeI2CCPMKqTlCT0tKm3CYRIKhEic4KIinocDS3iK6m3UM%2bih0HKMYocK4TReXRb4CLvDV7Gty8fQhsbJtQ2BYmZZA/iR05QiNZ%2bXAXevHjEc5IlIhhh4v0zXJh%2bB3OTb5F9ZpPShEB0pKWm8Jf6unjEDaDzH18/xvmpEVimCZH1GNroHDMAX19bJZRbZJMPESuzbOIhz7PF6XdCzCF2jlJx8jlZmazcpkCmkIKE6ltdZE%2bJtU1kCsUsunHtIiQmJPAI60K7o6wcufOtLowJ10nECbe1iO/fPAWGWnmKT0LiKgq4ND/5hpUbxWV2bZOsR9FDoYnTwNCE8qvvEiI/HAUfby%2buqqgAz4sKsCA/j91EIcUUhmJRgUBxFeTngpq6JtjY2nGlRYVYVFiAZWWlwtMuLi5k%2b2K%2buEiERSIGZfWNwNDImCth54qKirC4tAjySgpQxOovKSoE%2bm1psQgsrWxAXUOLKxKxdti54qJ81paIssXC%2bdJiKDtfLOQudXJy5k%2bqqPLnzmVDSUkRlhfnCxNtSWkJm28KsVSUR7lMwT/Aj1M4psSnp6fwpaXFQpmCgiI8d04EIlERlJaKKF8y%2bRXxFGn2M0JEAU6etOAVbOKkKjo%2bMlfnAN7a3Bw93D14O8swUJLTX93/3aGpAwePbikd0%2bb01eTXThz%2bfkv7zHHe2ucoWnspgp66Knfwr3/eOLj/wNS3336/fkxRF3TVXLesTxmIjffJod%2bXihD6nRKclTuEh/Z/vX3gW7nJ7/bLrSooaKLOaW/picO6a0cPGMHXf1LFL36niIe%2bUeOMVL15E00fmZampeyovBqvdcpZaniarR73H99w2fcNZ/unA5zn3/1aYqVovulklIAmZ9y4w0eUeXVlR6nJGWex9ilPPsjBnkv1M9z2szSTmqr7c8eOqC/IyR2bZw%2bd240hoggKh0%2bgnmfB2n%2b/MjN1dPD90svh23C7pxpfDfWxv7drnL2p70xwcOjod1/JLboGJEhC758f8%2bnInglxs%2bTTEx0wL9MdfC30UF3u4EpooO%2bovPzxOSNtH%2bnjJI%2bFZ7E6M1HfKEpaFHQw3UIbAm010VlJcTU4KJAUItNn1e23y8MGJ7tS348aagZs/%2bbvv8Lv/qgNf/7HE2BvHsWJCi6yia0AlE/acF1hwYsf023mPPTc54y/PyQz2/cVWsurbyR71Uvygy5glk89qJ6yhUr/kKU3cWYzF/Oil/BNDvKvskHyJBmq45Il1iZekxZmlh%2b/2fe9WFCIsKUwyB9VQSv7pOXDrbdHbO49W3xyoxne3r8Ar%2b50wOMbHfz1/nppcUrmksFpB4mVVajE%2bnzmWHR90kJOcgB0NhVhb3sp5Cb6ob2BukzzmOYnK13vLXM9L1mfr%2bH4bX%2bt2YSzZ7knBfF4SxQD4abq6K5ivxnmmDXnaOgn1lSz3joX0DFaHfVs4us/6W0f%2bMspPPadAYQ7O2FVaQPUbNmeAAAS10lEQVSWnr/BemIiqqnYQHNw0OK9CONJ5zNqWzqKx9FUVQ205I9iiHUcJwrrhQzvatA4bYdFXsHLT2M0xx9XuW625Tnjyt0EaMt3xsctAbIop7jVcPs8sfIJDe57OXnyGVKAQ3InGcZP4S60l2x1NZaLH12ux6FLbKa91oK3uqv5nro82b3OFnAxDgFjzVDor67evN2Zyg/01eGrJ5dh9M1N7OuqgCdXsvHy%2bU6Jl2kSmhsEYbBD5nqSspa0OzwAFzsqYKqpDD5W52BDWJqsJu42xrnko76WGzobpW2rHnaS6CvrY0miH7QXJ2J9ThjkJVIKnQY8cch4U5/B4WjvOvCyiN7WPHIU7M5qgdWZM%2bBubgDmyoZcWdQlyAtohLPqNhjgXA5ZgaHLvbmmEO6ojoMiG4h2PYO3S6y4sojCrfLIqwSHf2KE2LjBIJcU6fWWMkl9bsp6X3Mljjy9h4/vXMcLlfmypsKM9YHaxm1rrQDe3yWGv9maA7lpwfjiSgeMDw/i7PNbMNTXDPlZwXCvtYIPsovnrQzDMNwuXRp55ARfGxWAjy62wMOrXfCguRifVBdxlaEN27EuhXjk0BnexiIJY0MSsSE7CB4NNuHMyG1oLo3DUAcbcDNNXI20z94y0nbFBJ8GdDUN3bA6oya7VJWDHWU5UJ4UhHrHNTfLo3skosA21FG3gUj3Coz1LpVWxLqvj9xvwekXg/jwUjGWBHutlkX1SM%2bHdqO68k98AMjLq6CPdZq0sTBzuyIza6O7pmJlm/2NTL1%2bKKnOOrfcXpK13ZxeIXY1jEBvuyhpjIvJtoOhEjbnx8Pm9AtY%2bfgYKjIi0Ej1e8wPcZDEeCRILM6GYVpg5WZdgtfWUEoULrx6ACujz2E4JwVvN9ZsNKcNrCc6ifDkMQOxt1veekFSIp8f6ojjDy8BLr2FqrQITPWzhvPhpZJsn1o0ZD0gwasek/3KpXJffs111RUiSifAXO802mk4SLoyhviigGbQO2MPUa7lkBnUiGnBletPr/Zu4dY4Xm9p3hRFdYobEq9g5ecuM8IQOKSMGWFZ0rqcGHGs67nNtNCyT3f7OmTtFfXrWX4Na7mh6eLuapHU0zKCdzZJhBTfrFUH9aOb3jZ62F0QB405EWiteQQ8DJTF5XH1G0G2mehiHgz1hS1rtzJi12%2bHReLM%2b7dwubwcGk0t8GlWmmy4f0ia5C0Ccx1vPsKhdDPUPmo52ddB4mlgit6GDhBorYsVKT58UVS1JMe/CU3PusO50D42BMK573/1PyBQ9QT2ZkaB2q9%2bhacOyvOlUb1YHXsVDTQckKQ%2bGRE9mOFRwovsbWRvB2ow1cBUWh/VB81p97E27vrPCBFQUFDFcJesrbTgxMXy7FbpvdtDcPnKDRwaegj9nYPQGFm%2b3OYQN%2bqj7bHlR04SYb18akDeWnpyMmetchqP/vo3qHpMVVIVWLt41at5KUo/aMvJ0l9clVKz9LLuPDdUV4fv7t2FO/WZkO7viv3BgfxYTOx8upXPvLVBIJbH96O/vWhL7ZCx1N3CF8Pco8BUwwbdTD0kvZ7li0UWqetm2k4Q7pTBWSie4IP%2b8Ft0PnUIvK21wf/AF%2bj6%2b9/xUadtl6ss05YMtRz5NJ9KvtAuXZZxVJe7mhbPFmfL2BHoi7aK%2brIaN9Fqp/P5FS2ls9weISLwAeF2RXy8b87Sg6FbPAUmu351gC1z2TqbLSsfnCtdmHRLfxujZb3sYZGK5/w6eFM1Jy7Q3QUdNE6Ao5ocOJtZYtwZr%2bXVuPMfM1RM5qJCcqRZJoGSZ43n8UZtNYQY62O2rw1cLCvFV/W1mx8tg0fqTdynLXX9Mc2nQxYf0c1nxZfio4EBeHn9BmSmlKC3lpN4Muzc6EW7iKnj38iJFb7dx0X%2b%2bfeY%2bNvfQWl%2bAt6/2gSxVgZY%2bN/%2bXvrQ1nf8op7LO2MlfWnONyf5KpVjcP6r7zHbyBQu9daDv4oafvvrv%2bM7dczGhn2SxjS/Py7eUYjIKYDiMRUsS2/h7197JOnpbOZfPn/G37l5HZ8%2beQh37t2CG6LS1eWK9uk4G4%2bN1IgS7Cq7xFUVi/hz0SF4MScYWiOcQRThjQOFWRvLVV2zGZYeKx2tdXxTSgp/MTcHL2XlQGpgMCQEhkBrbDwOlVVsf0gtnG4MjlnydY6AtqrHnCj3GgM372B65DGOPr8Hs9Nv2D9KnmQkr3auLzLzk4WeiSTB14tv0NLCAbYqHbo3CH2ttfB46DZ2OzpyL6NSFm7E5sy5aOpx1z38sTk4ENuDQiDDyQXc3dj84eiEEa4OcDs6aeFxVtGC9gk1yQE5hZ/g8KvnQ7C6NI7z0x8EYEGvxAlREUASPDd2Ikripf5OBoamcGVxbMd7Y%2bojzs5P4qeFcfg0/5HKwS4fgNviBZxha3VCmURELLG1OxEVU7uv2xkaZEvsHNjenGXtjAgKDiJkZiffsev4CHOsXcIF9EI2IyMVZeJFnGNtktfH6tIUrK/MIBEyC0R6sLU%2bQ4MYGRWJn8ihY26MHR%2bDFXbdAnnDPhPSpHuZZBiD0on9rceI4GbSXlchEBGExgjhMaQlQFhymdnzGKF39mQkwuKkwKgpOgcURIFgJr193XOYIGMQmULojYQMFGShp7VeMCrxBrv6AMFoCzMfhdfhJGig0BhEdBCc3XWYwD2PEXooFAeAQmKQSIJIFIoUQW%2bD9/QB8zseI/iCIULWpsA/XGiqEeAwMUMEy/%2bFkJp3BVcYUlbcuNQlECLE5FwUoPEDAb4KBtglRIg8uXWlV5C0tNWWCawPPV0Kc/FZTFEhqOrtq32CUa/1d5JCQ%2bgNVG7PY4RujCg1utDmqlJBHTJ0c0CISUJIdC%2bmKDOuUB/JaZiR8HJ3q2D4qdHXggH2%2bAAyOrVBThrEQJGWgJwsiF%2bg6yaNwOcCiV2FyH2ynFCIutVePI8Pb4eFuB2E83cNIPQAcpZaEni3McEd5cObJ0AhLchQpbsKETLAyKtHAtVGxAR5lxAeZwYVCJbPCREKeko9g6I/0BMil73X7IZ%2bIkSShIdAbQg9g5Uj5QeVo2g2FCaTekB4eJhwkx9HngrRZlcF954RIaAqkTa7LjQ/D6pKChEaPyQhIXKBqCa6UKKo6stE9HQFfi%2bbvMZ6O2ncCRFcaAiQVxjRT%2bX52eRiI%2biHaA5orK8WvNCIXCGKigKX0BMjpQbVT72oq6NZyBRH7BCdo%2bH36ul9QSNUVXSOqC6hDmYAEkkJYipSm9CwHB4apPC6RNsJsU5oXL9%2b8QgjSSQ1P4r3bw5AC%2bt1VObZo9tYWZiL7F4Eg00zI/yMEFE4pkyUGC/ZnCd5GcyxAiu7pMT81AiSMxW5wiQmxPM9XW08citElgjkBbmoLbHJj75ToGXk14hH4KsqSnlSlbBjMDvxBmm/NPdRGJ%2bLu%2bXaWup5IlmoHAVxImXIMrt42ojooA2ly6QR4mOio3ly26HfUlsk1VvZJURIE0TqltfPH/IUvoOGFE2erF1YZOfoM5WhtsnY1IN09QyB0u/8p50ka0cEoiM9JRXTUlIwNTUF0lKS%2baz0dEhLTQU6lhAfxx87ocwbGplwacmsDNuSE5MwPiaWj4%2bOA/pO4zQ%2bLpZTU9fitc7qcQmJCRgv5AVNgfS0DMxIzxRy/5GqlG0cuwhe%2bZQ6n5gYz6ekJAkTHaX2Jgepvc/0WwtLa549JD4mJponaoyVBSpD5z8vR646h48e58PCQvk0oVwyUFlK8rb7G2K1KIs2//MsM0cUQf2UvczCMm5DTc1l89dfHN/4p%2b/UZb/bf0aqf9pX6mmSil4mqfxpZX1ORcmUMzWL3jDWC93ydErl0/JrtpOzq6S%2bjtmgdthy/cjh4%2bOHDx9f/ee/fA37f/dbsfxXX27pn9bhTDU9ZIZqrlJzbRPY/8W%2bra%2b%2b2je%2b79sDS%2bS5%2buXXB%2bCLnU1I9/nFT5twjMYq9dTdPGiwd/5vygr5xIjloZxm/0Y5oPxje6mCd0JoyCmhh1/%2bavmHmTG/iraJv6rZyf6q4Yj/oGgIqtp%2bshz/VigOuwgO%2boFobRu9IXo2OlZ059nE6%2blFydjmFo5LtuHNxDL4OSQtBfgEjSkrnVn48g9/kdwJUZ97lmg8baSstn32pAaqH1HijU4oo4WOzkZIcMiEvPyxGcoQdVRBCY7In9jbcHeDnRTAJ35KmvTT%2bf%2b9nPzPyx396dznv9k9fvzHfOmCAY4cVkJP9xxxRt/dCZ3IjIVDRj64X98H/qpqi789ac772mXLKiMvg4NBAFpbREjSL9ydrHzyYvbG%2bwn%2b0fQ8Ppicg3tTs1hc2b0WbV%2b47mISxsnv%2b4s0x1huvtz%2b5KLyD/K83uHjqC%2bniMoHj6LpqVMg/92B7UNf/In8dnbzFivCvyft1n/UJrweP3xUiRwm0Ms2a%2buPx42kf1Kzwa9OGoGlsRV%2beVwHTQ3DJS0JN8HRKAjsjaMwzLVko6h7cLP63issufYQ6q4NQcHAfUwRtW9URFyShTqko%2bZJnQ19NYtFVYWTG/L/85/Q%2bI9/AN%2bzqqAtdwi1lVS3HHWdlp10ndfljigIUWz%2brXzk/7cNIEhk/BxyMTGgauubY6bi38hpo4%2blIXRlB6PCcXVJkFP2VkfKPXQ2ChYMkORTz4cE5S%2bXNLZzL16/wJcvn2J2dbMkMbJ6uSn%2bOvhZxoGFfiimBrZInExCFw0VFaX18d7Ymx2KNmoqMjejkMWWlNtbCa6lgtvKZznEfhkDkMOEu0XK1sClYXFCZhV3WNUQLucFQEmcJ7q6Ja1Wx/Vtt8UP4q5CBNIDmjHVr1ZalVm5QgFV10aHuaK4quXK6F5Za8IgkELESj8IUn0bMTeqiw8ydFq7mOIPA1lh6K%2bmvVoZ1yttS7yJSa6FzABC9rlfzgCCPkBBGVoaBrip%2bRV4%2bvwj2nvGg6W2HhjpWqFrQB6U5N9gyG4Iva1i0c0iHrLYpJgd1cq7%2bInE%2bhr63Bl1Y2lYTP12ZfIlaE97jKGOmWhvFAYZAc2QHdwFEYZekpDTX0Loma8x4ITGWkXUZVlbxiMGg6txtwfgL7XtYoHTcOXWM5yYXcEXr8bAztIbDA4dwVNHVeArdXu003Tf7HcvmvXXchX7OWZgVkAT9%2bDBC9mbmQXUdQjBmOxyfD07h3U59ZvXHMsWYnR81l2tYrAwtAdqC7olotRELlb/OCYZKGI%2b%2b9yZ17F5lZXLN41ZPSgn/wv3ACFd5ils7xmC1%2b/n4ebd15ib04ixNsbgbesKv9V0Q%2bM/KC5shma%2bjdQy/%2bSkn4g9tfdkEk4CV%2b88hs6r9%2bHh46dQ3tqF79v7lz9FF73PUDaacTVPxCCTLK4gPozLtNBFLzUl8Nc7A5FnT%2bHVcymbH2yi37aY%2bU7vp6yVQsK3X8oADAwdO6EK124%2bgnejc9jbNwhPHj1lKKsZnz24D6LmHqxOztuYqmqfj3f1E6fHiWBmaobf2FjG9u4%2bGLh%2bA1%2b8fA4XBwdx/smweL6ldyHXPXA9KfIcFKXlczUFmVgVFwkBri4YHugH5bHheKW6XDIiqplvi81cpbieh3/JHrCXL/TF8D1cmvuA5OI6PU7BC94JARSWZt7B0uIYbm4yMJSTyYBJF26sCIgN5hlWoMwOU6MvcYHhgmmGG8Sbc1hWUYpNDCxx24sCRP60OC5gBgI2y8QRzH5k9c3hZYb/2Xoc/rVU2//PDLAXUZIgMDk9MBSIJC6gUBokXBCSopBAImPHY4SSp9AraPIYqS0tEBQbJJAg36CNpT2BRJWQZIWwOXELDQxVkpLjUmezUI7e3l7q64LPDAC/pAF%2bDKFBN0sEBgVToRQVFLlVCKrKENZnITQEA5D7Cd3cg9tXhNQ4u6ExGBzeZYQo5gc7RroAIjiIPHl89/pObJBPE3CpXzAA7i1hf1EDPNtViLx%2bdl9IQrK4oxYRcoSQAmSPEOndUYgIoS4oggPxfJTQRAiX%2b2aYIszs%2bAzV7shbqBypSXZ612tBc0TiC6rjYl/n/xcGoPCS%2bOLpfYFGonggFAKXiAmivChsLpEjhKMpl3d/b4eg/CClBhERpOi4c60fW2vLSNkhcIdl53cIESIwKLTGheZaZshrAonBhoJgVKqDYoOwSfCXnQN2s0bDg3s3eIoPRK4rpNaYI40NOUVN7bC6RJZERUXyRGLIxIsCfUZqkgVicife4g7R8REp5gclTykpKtgpN/0OP6%2bP6qdyEsFrrInft//QLzsH7ClE9A2MeYrp4R8QQInXIWBnj2wvfPb29uEZbOU1NM/ydJ5SW/9tOcpIzzYiWXllldN8gH/A3nm2pzKBuPNbf6H8GQ1t/uAPOwuhPYLiF8ACOw3T/zERCV9/%2bz3s7nc24fMPAolAsHUviTod%2b7Hcvp/KUbL23UTNe3X8i/XR590s1PDvzUD9H94DdjJCH/83CYc9EuH/REzQ/t9Tbi/P0S81BP4Xf1P%2bF/eTSNYAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"950\" alt=\"UID 查询\" data-srcset=\"/assets/static/nonebot-uid.82a2fbd.9e953ceaf4795c9aab166c809ebdd967.jpg 480w, /assets/static/nonebot-uid.991c9fd.9e953ceaf4795c9aab166c809ebdd967.jpg 950w\" data-sizes=\"(max-width: 950px) 100vw, 950px\" data-src=\"/assets/static/nonebot-uid.991c9fd.9e953ceaf4795c9aab166c809ebdd967.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-uid.991c9fd.9e953ceaf4795c9aab166c809ebdd967.jpg\" width=\"950\" alt=\"UID 查询\"></noscript><figcaption>UID 查询</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Pillow 绘制原神每日材料查询结果</strong></summary><br />\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2096 1428' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ec61728de5dd7cd2f690a4ef19d6dd20'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ec61728de5dd7cd2f690a4ef19d6dd20)' width='2096' height='1428' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAsCAYAAADVX77/AAAACXBIWXMAAAsSAAALEgHS3X78AAAZEklEQVRo3s1693NbWZqd/gqX/YN/dJVdO/bWuGbt9e54vRO3ZqY9U9O9HaQO6qBuqVvdyqElUSIpBkmMYs45AAQJAiRARCaAJAiSIAgQzAHMmRQlZlLkOb7vMYjqbnVPuVzuYdUtvPve9%2b6977tfOOe7PLGzs8Pva7vPn3N9fYPb29sEcNRe9bcl5J6Ld35o3L%2b0SWNtbW5xY2NTHn9vb%2b97599/7y9fwwlJ8Lua/PG7u/LHj45Pc2BwmO3uDra1udjmaqfT2cImR7PcbDY7HQfXs3PznJ6ZF%2b8%2bP/qA/5u2c2wN45MzHBmdkOf2eDvlddTW1bOmto6OZifr621sFusxW6ycmJjklJh/a%2btQCd8/z4ntrW2I3YWYDAdaOfyVtb30ZJmz80scHBigTqejUllCg8HAzMwspqenMysrW25FRUUsLS3l2PgExyamZcv5Hs0fzbW9vSXa5nfOf9ik8RYWFqjRaFhZWcmcnBwmJyczIyODCqWS8fEJLCsrY3xCAgcHhzgxNcu1tfWjTfheCzg0nQON4HD3X1jCcz57tsI1YQnrwgyfiuv19U0xwQZXxSRS2xAmKt3bFL9z84tcXV2Td%2b77LED6UOn38G93d0/c3793vEnjSOM9W1nlpthVaX6pfzi3tA5pXfL84vmT5WdcXFo%2bmv%2bHrPBEs70d7c5ebO1bgrww8TIOXpSt41AxUtsTz6S%2b0K4kJ010%2bFyWEVZz%2bD6%2bseMv7fKBmcPvqUaPrRDrz5bwXChB%2bC%2bOnh%2b8I423t7crKUief/dFo7yOY/Pvy%2b794PwHc%2bDEwy/fQOrdW%2bjtG4PNVkutVkNHUxNramqgFmZVrlazu6uLUuTZ2hDBcGtL%2bNfW4S/ka6G4feXtK/FAkYd%2bfHBv51BuX9HPd7m5vgLL49dhDPoJOu0qlJRqhYlXUKVSsbi4GGXqMmqF2UsuNzExISlBzLcpj3OwBmwfzv9Sf2t/vq0X8700/9bRGnGiVpWPIZsee8%2bJxaUlzi4sYV606Zk5Ts3Oi3vL2BKBd0%2bKwJIaROOLxmPXkuZ57BrPxQRixw7u4VvvSP4/40rDfHscVpYmMSMC6MLCPOYWFjE9O8f56WksLC7hydNn2Nk7ivyvnP87%2bt8rI7tAuzYOhdZqFBTncrTDhn67GgM2FRcH29ihScRUX8ueI/U%2beu5%2bzY7gq%2bxv0EGZm4Xyx5GMCUylJScZXmcXtCW1GOrz0aCtYVOtDx73AJpbvDQaq6nINKDDOYD0hDxUVuZTlaeFq7FXXkRVcQHUKTHUJD2ERquHz92BsoQI6LMTqTSWo9vTBqsiH%2bWJEVTFhbJGmQVPkx2KmAdC7hE1KRHodTVDl5cJRdwDliZF0GFUo7HOi7RYDfNTDMhNMMLT0ofibCtyEiqYFq2mudyx7wLq9PuMNjTyQU4x68rS0Zh6Be7yx/Q7K2GJ%2bgQtJTGo%2btXfsuG//AfU/Kd/z/qAi/jyzDWc/Ls/8Y3ffsg3f/ozlD3MQuyVcDbbbVDH5zAjMAt1dg9cXQN0eruZGF2EwmQzIgLvY2zISXWhAur8Wnk3Es%2b/ibAPX%2bOjy58xPOQhLMUZCH/751Cr8lnSYGVzRT5Sb59FWkwYLUUZNOmKYMyIwv2Tv2DOg%2bvIu32atpIUJF96D2lfvM7sKyepjb6A4sx6XP7DFYb8w98j6N17NChbEHg%2bF3944y5//%2bZtpgaWiDggKaAokR1DozDZGlGWk0CfKpxtVQXwe52oSb3JPmMade/9hq7YUBg/ehOtEbcYczeIIVdvwWaqxJnX36ApV8usyByODDihzVGgJMnMvKxy1hmr0NnmQFJ8FrX5DubGZXDApUNeQjKNZa1S7mFF7A2mPn4gFBQMZ/ZFeqqyWRnyAe3lGTA8PssBUxqLVXkscPegrTITrRURdJcnsyToFDOrNajID0WXNZemB5/Q2mCGvSIHrXmXaCntYPrrr6Pwtf/IzCsJcJn8jAwo4D%2b%2bdx03r8XBmNogx4UTl9//E%2b4EhjEgIpKNReEwpt1DYOBtFiiUDLt6Gj2GDPzpv/8NooJu8dpv/onJdy4hI%2bg6Ir86zfSwQD4486%2boUjQg5m4BNGmpTLofzSZLGy6fuYuyrFg6DPk8/9FXMBR34OqpCHjN2bz%2bXhgMSq%2bwgF2oMiNQkXKN7oy3OKL5AiP2PNgSPoIt6zN2Zf4es85sVOcEwF4eT7fyAv2aLzFqTkJscSDyKkLZl/F7zDRlwlD2EBmdFrrzPuC0%2bRpc%2bn4oruVS%2bXUktCE29tumUBZRg6tno5l8pYTOgl45E5wwVzvwMCqeSo2OT%2bYnsTjWB5fTwWqBsvxdLjyZm0ZaehYeR8cwLiaW7R1eLE2MIz89gw9DH7C7pQHLi6uoNtVBk11Iq07P5eUlDPYOwqQtpaWylF6XCwszKygrVqPWVM7iXAVmJ5exvrGOaqsZ1eZyemoK2Nuiw0hvO%2bxGJToaNGysSMZYvxs9zQa0VmWyvaaQXc2VmBnphqreAK%2bIVS5rrlhzN2wdbbDZ9Ww3pLGjsRytDe0wljbQZnChWm2jo15YdEUDbNom2iocbLN1YGNjAzIQGh4e4NzszFGIFPAXE%2bPjR2F3cnKCfr8fk1NTUv6X742OjaHT58PWzn5/eHiI/vExjIt0JZmW9NfbN4De/oGjcYaGB9nh9cE/6ufunsQx1jEtIv3QkJ/D4zOcmFmUM0Df4DD8Y1P0dPXL/anZBfQMjnBwZJJD/nGsivUN9vZjeHSS/cMTWFnfxKRY78DAMHuHxtE74Mfo%2bAj6h3oxMj7M4dFBDAz1i9aHAX%2b/GGcQYxNj2NwUChgZWcTC/No3U8S3Us4hCTqEr4eE5Pl%2bnn9JRgZQW9tH4%2bzIuXjnaA5J7BDo5CQZERemZlp4KTUZlXDUdyE6SImkR2VMCVXBWduJ/DQTYoME5L2vpDLbgjqzW7ikkAkvY3JoMZrrOpGVZEBscAkTQgRUL2lAvdmDmGAVU8I1iA8vhdvRj6wEA%2bJCy5kRqWGNtnE/CCbe%2bxKp96MwLDRXW1NNi9mMjg43mx3CDaxWSE3wAPnjtjY3jz5GAiISS5M%2bVPoQAYOxKe5JcHj7QOYQFB1yjeNASEJwkuyDqwre%2bTgdd0%2bdR%2bqtLFYpWvjV6RSGFdUg9GYuDYVNjPi6hOFXi/DoZjHiA0upzrPz5ocZDL%2bYhdBPk2hSOuVxgr/IQfCNDOZF6FiSVsvrH6bzxqUs3PgkTcg0M%2bRiIe9/noGMwBgWRuvEWrd5wpQRiIbCVKyu7cIrEJ%2bn08cRYd5Dw350dvewq6eXS8sr%2b1SU%2b4Do0DpwZC0v0dMXiAV7EhDCPtZ/gf9lmH2gAEVEPTNvlyLhUjTKY%2brZqu/hpfNxDCnUIzvEQGdFF1UxNkbdKkLuvSpUJTayQdvN9JulTPk6HAXBFjh1QibSxti7%2bch%2boIEprYX1JR2MDahEaJqe6YFVaNF3sehhPQuCC1EUlIeqlBZpM3miVVeMThHYnBYTZkXAmRv2oU4ngktTNb3VeqzPjWOo1YSZAS%2bHWiycHZC4wwAarS56HV2st7Rj3D%2bDCk099FUNLC%2brxUDvmDC5XvR0j3J8ZoGOGi/W1zZwQFCOsP721g6Mic1QBZTSGN3OhkwffLXDUIRWCzxho%2bFBC/pt4yjPtCE/xEhDRAttWR64LcMIf/c%2byoLUrIpoQ3e1H4poCzJDNDQ%2bbKU91wOPcVBkGCdVsY2wRrWxp34MlY8boLyvozHSRWdxD3aElZ64d/4izK45ZubomffwLkoefIGf/Nt/w9/%2b7Ke8/LO/RVtBNGojP8XiUAeG7GV0Fj7E40fluPpVBG98co/3ArKgyqjGL359jj9/7Sx%2b%2bg8fMvlRKbKE31p9frZOzTEhUYepsTnsx4MXpEQiLo01jWgw22m3OGi3NmHMPwGtQo9avY2VJQZMjk2hr2cQWqWeTdVO%2boVyd7f3RByogzJPzWHfKHY39zA%2bMgV1cQVtxkZuPt1Gj68Peq2R7fYOGDVWzk7OwVhpFuPoaKmopcvRIcekEwUKI5uafNAaWlGtUbEs4iqDzp5FemgYLrx1ik2KeDqjL3PW18Reawk8mnTGR5Xyndc%2bw5//%2bV3cuf6YemUbT38YAKNByzOfByI73sjMdDPLbK2wd/cgLFLF%2baknslMIBfA4I1xcfsqFpyucnZ/l%2bMQYl58uU0Rsjk6MYlBkp2crzwQFXubwyJDICHNY21iV3UuS6x/sk/sipgpytSMyxCCmZiZlRT95siRlJiwsLXBiSmSOtVVOTk%2bKcYYxMubHzOy0XO848ej2bTQ3upmSkCvMKxiPLn2GWyffYHtxIt/5X7%2bETRGP%2brgrcJVl0h51jt7iEIRcKUTsnVDWqhU8/1agAEJefPmnAHRqMxj00T0Wpdjx6FqpiNypImrn89rHWQJPPBMxY%2b/IAg5qDZj1uzHdaxe7uvFN4vItEiNCimw1UiCVyJYcW57vYn/M50exRwrAh8/FOwcxaBcvBSuhNRkI1WhLUKG3UKVQcdxdi1qjCQ%2bvX2PUF2eYm5gMf1c7CgUMTr1xiTVJoRz2NKHNPgCdukrgciON5Tb4%2b5ZgKjIhN/Im1an57OuYQb9vCqlZKkYlZNHTPoqV5XXs7h2PAbvc3lxHXuDvEH3mJ2g2F0Ol1gr6Wy5lHqnCg5ISpVwF0pSXc2CgX8pEMh2WLEiqX4gsJFNbqS9T5E2ZnuOoL9P17SPKvvWCwsvvyWxQUkZ9fS27RAY4VI/IBqiyWPFcmMjq%2bjoNZgudbS442tqFic3JMv6REVhEitza3pD7T549oUmwyiFhYocqbm11orvLJ0HewwoNjleDnu8IX62JglN1DfOT/cI0JzgsAJegxQIsjYlsNI6R0TEM%2b0fwbHXtWJbBN7DKS1Rb2twflDmgwzjxZFnk5R38RUBIupRNUGh1d5/nHxY8BPd/fmhqRzhAekfys%2b2XzP7l64aqCliVuagtyYbLXo3R3m5hTTmwlStYrcrEWF%2bnsA4DjAUCIxSksdlcjs72QUFtRaYorKM6txY9Xj%2bqNA4oc6pZXlDPdkcX2lv6UZRlYXmhnep8M3o6B1BZ2ghVXi1Lc6101LbtKyD6zpfIjEoWkHReQMl%2btrW1YXh4mAP9/ezs9MLj8WBqalIqOx0BIWnhUtX1wLQOQY5kkjwwwf00t//sqC730q9Q5NbmBhMvnELUh7/hjbMfCtR2i/XFKQh4/X8i6P1fI%2bid/8Y6ZQpTrn4kZP6FAe/%2bEsUhn8gf/fmb4Th/6iIuvxVOg6KZQRfzcOODFN48fR%2b5UWoWplTj0slE3Po4HpdP3qVeYUPA%2bRzcFCDr%2bukQpIYWifUJF8i8eQplkeEYn15GS1srS1RltDc2oVE0g8lCa3UNxyenj6xhH9bgpWAl1euOW48AQC/M/BUl90MFGKO%2boCr4fdz%2b%2bios6dfYZy1g3Llf88qp/4r0a7%2bAz5zLmrjLTAk4icirb1CiunaNmyFfxAmgE4KkGzlw6rtZGFHH1NsFiL0YgcrkRtaruxjyeQLufXGLOXd1cOh8zH9Qy6RbKYi5FCxkHFJA5omhlhqM%2bdoFAOrC1rMFbD%2bdw7PZCW5trPHZ5CDwfBMz/m6M9HdypKedK0szmJlcRK9nmH3eYY4OTeHp8gqG%2bybR3zdGn28Qi/PLRwHv1RVhKQhuoCHxI1RFvsuWlLc4UHIGw7Z8RH36N4j96j%2bzLuZXmGvJgT3jAorj3mZn9jsY05%2bHu6obGdfL8fjaY5YGWdlpGYEutglFt5UsD7axIceHJrUXSVezqLxvQpUARx7TINQRdmTfKWP5/Vrac7yy1Z6oTBRc2zPDmkpBP/Puo6EgAq3lRRx0e2iKvAyPLgWFD77E4OgUK/KTaM8LRXpwPiLDLjI%2b82s%2bOhsEvbIZH78Vhj/%2b8i2e/MfXoMzar/ZIEfhVCtiRr3cw3SOIiyaNndZ0ro42YHLQi8qiCHQ3FtBrThYb045qfQGs6gS6DUnsaSqGv3tUxAkbmnRuWhUNgjJPwayqRkVOFa3KRnrsPWKD%2bqDNr2B1aRMsShtmRxdRo7WjssBMQ0Ed3TafBNRxQluiYWvXHKrb58SACroMhWyx6uG2quEwqNmpjWNtTgz9M6toqzGjNf8hE2OKWGwMhc4Zg5C7odQVuHj61Ne8%2bdlZ3Pz7f6ImSSN7glShfYUbHJXdJTlvVw97Bd2Vrp%2btrGLIPyZo7BQ7fL2YW1yC19cFV4eXLo%2bP3X1DmF%2bcE%2b%2b44evxsKXdKcDOPDq7PGhzt7Kz28MhQXfn5ufocrvY2t4CqT1beUpvp4eNjgbU2mokeiwz1xM5QZc55uuGWqGDJT%2bBuY9uMufhbdYrEhF26VO2q2NZEXBORM1qVEaF0J0bwrTAYn78xz/zw3fewMNz96jJc/C9P19id7sZ7//5DDMfFckfs/UKBRwPkoUZJmTF6ZkbV0lFqhqu5n6kRGuQLe7lxWvQ4ewVENcm%2bgZmP65ghbIaLQ29SI2uQFFqNZMe5KNNINnSfDtyEo3MiddTX9wACSAdj0sH/W8DofT7d9FsczE3pYgdhiKBlXORcP8Ok0PCmBYbhoFmI4xZEVBkZrA4IYIjjSpoM%2boQfPEeA2/cojI6Fw02O4LvJSA1Pp7Btx5DJTD8PiJ7pQsc0eHwK0W89XEmzv3hIqIuplBf0sIrJ1MYfjkZgZ9G0FDskOnwpfei8dnbt5EUoBRZwMbrH2Tw4tshOPe/b9FU0szAC9m88rYIeqezhYyKG%2bubx84kXoCl430ZCFXoqlCsUMoHjctPn8InrEE6DBkd8bOvrx9LT5ZRodNBr9exymikBEw2t7fQ0Cj8qVLLQYG/pcpKs7MJJpORJlMV/P59MCQdlLw6CwgFbGyxWNDhpGv5CPsoGGURIj8LOpxyU838uDjk3NHAUdnF8pgmXrx8D5%2bfuwFdQiNtGh9Tbqh57o/vMe16GVzGfmaF6Rh1WoOw0wVQPTZyZ/MlV3v10diGQHrr62uQylP7RY5Nrq6uHhQ5NuUTF/Fcvre%2btibLSIOura1xZWVFzv1SXzyXZVZXVg%2b1%2b8rJX9DhbUGHW1ASoKZZ0GF7hg9e6wiKwouhi7NSH%2b5ir3kEuVnVOP84jrrwRtamtsNjHUf2x/eQfvGxeK9TBMtBkQUc0EQ6qAiupjW5TQZrL6HOVylg/5xvH6oenvEdO9g87L8kc3Be983%2b0VnhId09fqb4rSxwQIfNWiuqSgzUKUxsMDVjYmQShnI9qrU2mkprRAqewciTJagqzLSqavlsdh39XQNQJKXCoqljva4JC9NLmBqah7msht7GHi5PrR6s4S9QwP%2brf2T4rn9s%2bB4LODiEfc7%2boSF29fXR7XWzf6CPi4sL7OruYm9/DzrEPYnOCqRFr8eNzu5O2bVm52bZ5nbTJ/oSZV4TFrqzu0NPpweT0xP7rPMY5f4hC%2bD/77a/sH0LWZ7xi1zv/S4K/F1nejzgGC/JPJco8QEXkQu32zs4dtSPv0oFSO6ysb6FqvCfwxr079Bi1cBotrKyQiudSqO2tkYEVCN0lZWo0Gohld0P%2bIiM4DY2NuUYJRVjZR4ifH5zY/NYUXb7gK9sv8RPvqmQH9EC9oNgf8VVjFS8i4WJAQwMj9Dj9dLj8wkwMyL6fgFefHKhdmV945t09hhz/dbJ8bf6r%2bInP6oCpDTprDaiTqNEY5UGvlYnpkeG0GysRKtJz1aLHguTY%2bhsboC9Us0aQZHb7WYM9IxBX9YEq9ZJs7YZ/sEp1FncqFK3UF/WQI/Ti%2b7OEUF/G2iuaKFR3YDpiXl8lxJ%2bPAUIFxBsELHn30XE6V8z4P3XGX/rMiyF8Yh45xSUwfeZdPldNKqzEX/xNB598FsGnvpnZgWcRnleLc4L0HPjXDovvZ%2bAKmUT7n6Zi6vv3%2bPFfw1g6n0VCtOsOP/mY3790WNeeCMQ7obe7wRnP5YCZDos%2bXDVwzMsCL%2bCR9HZsKVdoLsqi%2bqACzQnPYQ%2b7A12mrNpTbjGuLO/Q%2bTHv0Jz/nU2lLsYfUfNuLByAZaqZKpbGGlhRlAssu%2bqUJnSRGuJiym3dChLyUNuYAn728ZlR5CO7f5KXGBX/pcWR%2bJpFITdYE38J/CXnUGfNQe6kPfRlHCS3tTfcbIpA7bkzxH9yf9g7YN/4UjFOcH/vYj7upLF96xQ37MLpQ0iJ6QYBXd1LLlrY216OxxlPYIOK6h6ZIHqth3D7ZPyOc5BhvjrcIHNjTW0m4vQZlZyqD6Zg415mOhzw16eiT5bNjtNsXgy2ganuQRVBdHsr0vhuEuJno5BlOdUo93UTVtpK8Z6p1CpqIaluIEOjZve%2bl4MesdgUNbQUdnBZq0Hi1PLEv39q4kBMgp8%2bvQZnW0dlE6Dvd2DdHV0Ce4haKugx129w2x0ujEzv8SBoRG6PT44XZ0YGp2Cf2SYNnst%2bgZ7BWV2Y1GAJUFzabIa0NXrw8TUOKdmJtnd2yUocye7%2b7uwsrrCvd29b8HzH0UBhzxBYoT7GWpPPkeUTFQ%2bS5SQzt7uQV/IHDzbL%2b7uycqTbkmFWKn8L1Hd/YNpSX5P/tDd3aP/qtqXPVaDOL6W/wNZ7kYKx4QTPwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2096\" alt=\"每日材料查询\" data-srcset=\"/assets/static/nonebot-material.82a2fbd.e2830f5be54b658e4b67520add0af9fa.jpg 480w, /assets/static/nonebot-material.cbab2cf.e2830f5be54b658e4b67520add0af9fa.jpg 1024w, /assets/static/nonebot-material.feba589.e2830f5be54b658e4b67520add0af9fa.jpg 2096w\" data-sizes=\"(max-width: 2096px) 100vw, 2096px\" data-src=\"/assets/static/nonebot-material.feba589.e2830f5be54b658e4b67520add0af9fa.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-material.feba589.e2830f5be54b658e4b67520add0af9fa.jpg\" width=\"2096\" alt=\"每日材料查询\"></noscript><figcaption>每日材料查询</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Pillow 绘制原神实时便笺查询结果</strong></summary><br />\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 600 1040' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-bd2f0367a6d69b7fa8701f65531a86ee'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-bd2f0367a6d69b7fa8701f65531a86ee)' width='600' height='1040' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABvCAYAAABck8Y9AAAACXBIWXMAAAsSAAALEgHS3X78AAAfmklEQVR42u18Z5AdyZHe/tOPi9AfKRSh0x%2bFIhS6i1CIp5APUXG8CzKOcU68FWNJ8SiKe8cleeQS2AV3j0tg4XZhF26AAQZmgHEYDDAY7zDee%2b%2b9ffPcPO9NP1OpzOzuNz0Pb2bewOzqyP2RUd3V1dVVWVlZ%2bVVm9Rse6yb8NtMbqR/oBKVui04QKfniN54B2g7L1xvCvbUhp3TPTNCBhim/eQzQpj7XFvhdVvA5LeBzmEHu/G%2bWJOwiATq8NwjdSJO02lMWME53BC3LI1F%2bZtElT43PjfCbiVR7vVeZ3crtyQCvwwQbg9X%2bnvsnXRM1ud7lnmrPSleZ2%2b9EKbDonpMUqty1tZFItUTPtffbZXTP5fOzFHVo60/1DS05zRsp39%2bNCW%2bknP8479fGeoIb83OS0%2bGCjXWdmB7sk0wL42FVGWo773cYIegycxp2b/G15LVA2LPFz8MeC%2bfTvdemh5DbDEGnCVO5LBFPObuB6wjwMzOXp5TuJaxD/RZdE9FzIvlbFq4n4rMqbcB3vFbO318CZNFmBvgcBjAtjoeXxoYl8/oaGBZnRfXDXGiqrYOlge6gfnY07McGUVkcLUEfnRrtg5b6Khjp74Typ4%2bgGa8f3L0FbY213JCu1np8Xg1FD3N4RHraG2FiqAfqqkqgt6OJr5dmRmFzZRaGetuhr7MZSp8UQndbA5QVF8LcxCDk3r%2bDz2dAtzQNT4sKoKggh9%2bl79G36ypLoPlZFVy6cBaeFOZBQ2053Lh2GR7mZYPDtLafBGyLtNdhwRcMsfWZyVj1oywYbC4TuTdOC5fdBrrF%2bZhhfjziw1FgBqCkxAMOqK8ug1vXr3LHTh0/xo24l5XJ19Toz86fwUbnw7lPT3GDf/6zn3LDKkqKuOz77x3i56dOHIOrly/AxXOfwt9/cATe%2bdHfwPf/%2bnvwGAfg09MnkMEdsDA1DD/58TvwwZH3oLq8GL773e/Ae4fehU9OHee8b37zm/B3P/kxFD/Kg%2b%2b89RacPH4UrPpllrw9pwBLgNUAPtNgzLVa7TVu6qIDVXkwlJslCk4fEzO9XbAxOeyzrM/FSFRlBugghBJAI0SNp9HKyrwGt29m8P35s59w3SWPC%2bA%2bSgQ1khp24uNfQ9aNa5w%2bzM1mBtGzC1j%2b9MmP4Vl1KWTfuQmZGZfh%2bLFfQ0HOPRzNS/yuaX0Bjn709/Duz/4OqsqecKfzHtyB/Ad34c6t6/Ctb32L6yTpe/uH/5eZ7jSv7yMBPAVwrbdZIbR%2by6dvOWyrPfROtPVv3oRP//Kr4szbfwZ1598Rh95%2bxzs/3BMO4byj0Sd9QJUGnEZYX5gE49o8GFbnQL86C5MjvWDaWIAASotlcxkMa3M8ejR3fXY9i%2bXM2ABsLE7BOhK9YzWs8FSgZ1SvVb8C85NDYDeucj4xnhiwht8ybyzC6vwE170yN851UJnZ8QH%2bDrVHj20ZH%2bxOKON9GIASgCMadE6HxktvB0vf/I9Q9bdfh9w//w8wmf3jeM%2bdw/Gzhw6F7aa1mCJOQqtdSTlRA1Ui5aVICosfXZM%2b0GplVXHKZOBypPDUxtE9lfHidUDWO5xH5dXUR%2b8odVAZKk%2bp2h5StGktg2TlkfYPeBywPt4VqXz7L6W6H7wldV7%2bJDzeUCIt9TaE/VZdzKuIf6r1WEvJy4%2b6xKUqszPvBcqkWB53a8fuSlDuFE8Fj00v7JsrEY/dEA/47SLks0PAbdlhLX7R2CCZKQcltY43NBnCvW3lgRfnKRs9qEBcW%2bsKJtBpy4iXbcTLduBVWJVvJGUkRtetSkRq%2bsJt%2bFcmAdoKydQNeKws7rsRASQZJG2nycT5e9TxUoTt86OicxiWwL65CHb9AQjL03u7M8C1JYJeGxF%2byCaI1Hs1jYXcEJe8EA25IBb2MEWCLr6P4rOo8jzsd0BAfu%2bVEzGCOmPTzR%2bY6L39GEBcFpLfDtGgHdR7SmlUx0f6oberFeamRmECr2cmh2FteRZWFqZgYXYcpsYHYbCvE8z6VfXdV0pyO7Z4RLlTG3PbHdxcSN1xTRl6by8G0Khh521gt1qlDb3Vj1IQpw/jSiDcdqM4f%2b5T8fGxo1CQ9wBOoKl7MzMDCtEuP3b0I8hE6%2b7WzevwwS/fh8ryp8hAlzwVXlHHUzHAbV4Dp3EZaYXvHZjvNCwn8ujeZVrl%2b3QYIMK45Pnc1mhek9E9Mb/ligZlsUORFhbjOuQgKLl96wY0PquGx4/yoaKsGGqqSqGk%2bBF2uhgeod1%2bEhmT9%2bAeT5eEPkijk1ROpYD2ehcG2HHEZ3pqYXWiG1bHOznPtDQOa3SPtDLWAYaFEZjrb%2bB7WW8s7M0ACcGNw7YVLuzaCs7pnSG/xx7yuGxSiBljEX6cDn6lwTzPSTowjYbd4KX9AoeZ5z4RvaPqBSpLJKFUqNfUGSngTFBM8nBZ1ivKe0TaqZTMgL6aPKi8cxIqso5jJ7tgvK0M5gcaoafyAZTdPAb1eReRPoOOkiyWBJaavRhADZd8VjG%2bbPX1LQf8FmfQ7nbawhI22OMwicHOFjHU1YJ29jzMTwxxp%2bl6cXqEr40bSzDa14F2%2bRg4tjZheqQPRhDi6hEnmHTLMIG2uRnt9ynMN6BdvzI3ge%2bOctqDsHkMIXUfokqy64d72rgu/C4zM9UUGGkqZuqtzoHl0XaY66uHrdUpWBxugaGGIhioe4jpI86nabCfBCS0PeqBeMhrD/vctmjIy6Mt7GYdZGdcgpsXz0Jd6WPIQeTnQLO0q7kOrn16khvf3fIMMs6cgu7mZwhQpqEk/z6UPcyB/vYm7kzBnUxowimTl3UderHDxbn3IBfRYzUiyU8%2bPAKPsrPg1mdnobwwl%2bu/cvo4OCybCWlLlgCa7zSyPM9RxOl%2bO39Ffoa6gO7T0gGq1kflh1xHUu5pBDyoBBGdiVnU9Cvz8shRw8ybKzA13MsdNqEEEIIzrC3wCJME0Ig7rXp%2btoCrxsbSDEvFwtQIS9HkUA8s4woy1N2KSG%2bK86kMSctwdxt4cVrtpgRlmkt/GUyDAdp1X0ucR3OV5iWt/UTUKJ6/ij2gPlfnO83rMOYRA4m4DNkNanmqR6kvhvaDek/1UEp5gZR2wMKrtwN8BCPdqa27bSsPYa5zm%2bR85d5lTjzfUdZl3n5f825yXfT9VM92tMEt1%2bFAkXbol1izp01UHvXAbmAIvkhw84WBod96BiRn/EOh14EGhboMyqvADgI19SuIcDerzZ9kwb1OLECK8MCUzjLITEigQgZCQvm4iEseARGfggBlS41XAdLYyj2tCJSnNviVocBdl8H5V7IM7pAAWrKCXmucbAG182Tp9fe0Q0drAyyi5UbIcGJ0ANYRDbah4TOOaz7ltbc0wBqu46rx8lrR4A6a29cu2I8Byqhb4ratTbvJoHc5beZw2G8XCgMEoj9x6sTHUF9bCXdv34Tse1mwND8JFy%2bcg/LSJ1D8%2bCEc//gogyKUlufAzF5ILxXySy0Bsh1Ay5qM9FZ4mVMtPtkqlNEgEeWTVbjfFGAG0Ki57Ea/ZcviXVszQkd7f1S/sRKhDQ%2bHRS%2bwY4I62dJYi5LQCO0oDctovd1CWFz6FG3v3g5mRGtTHU4TZ4IB2jShH9zW5/OU/N0YxwxASaWO6WYGYKK9nFHf%2blQvgqAmBkTT3TWwPtkDS8OtsDDUDItDLTCPiNC6McvweF8G2C36cMnT2ljWrXzE/JdgqL8/LHA0UfkJtM6EQB1AqC8ekXd%2bkGGsGKmBqk4I4hRilIdMILSoWoqM8sKypahagmTtUR5NO0mxMOOKntFKgpYBNKJr2MnaB2eh8vZJaCq8yqiv7UkmtD%2b9BZ1ld6Es8yg0PbwCDQWX%2bJlhYZQZt68SJJEvK6kIZ2RkR9paO70Oqz5EMJk2RNrqKkXbs0rGAYOICt02AyM/O4IiAkOUR%2b718YEu9vxMIkYw6Zagt60BRlB/EAYgtEc2P93PIRboqK%2bG/o4mRIwLjA3mEGtUFOUxjkjWI8k6gPE/MkLF/7qZfh71zbkh2Jwd5L2BDcyjNG0lSB9BkRc4yiEclRAqQxFiNLgB969fFjcvnIGGiqfw8O5NZkAPIkAdKkLKqyjKBxfmVT15CIOdzZzOjPYjirzMCI/QX%2bXjfOjCKULIkNLcm9e4LgI/3Ygse3FaHTv0M2hE1EiSo50eyQwgPZCY66ZtHeBQkKFT0QvqjtEB0CBBYM2eoM8mCJfjyAlCfYTvqdMhLGMzbbAE0EgbN7BhpnVGhBvLM7C2OAVOi57L8v3CJD4bZl8ejT6hwFVUoiQRNPqENDdX5ljCqC51HyC9VWD%2bpVYBrhjnbrItIBKaGJ/J89iVmKsBebuM57m6syPvEHkSyC6kme%2bM/BT0l0CV2lTRIVHFlnjeHrBr0ODcAe2Aub03RHw4wgq6E35GcJxuk4zYhIzaZPLvhugc22W28xVSnnkdO%2b8p9SY9U9qhoS0uJy99ywem55Tgl2jwSzSoybDp2e%2b%2bF3kU2uvam3T9qonqdrMbfP3A5E5yl6fcFE1CgDIQSqBBa0qkp81Lx/x9VVjgIEgw/T3BROe33WIqKlT3AnnPL%2bBQ9vjtjATDykpAGEC7jf060WC6e4PpMEBo7QC2CAM7Ok8jKxrqqkRXexOs41rd09XKtv8GXj8pKoC%2b7jYYG%2bplfLAwM84M%2brwkQLvMJdsDB5EA9g2GA7SDa4suDOtdCEwiEt6HfQ5hM%2bvg1Mnj8N7hQ1BTWQqF%2bTnc8dqqMjjy/mFEgHlQVJgH5858Aj2drSwpe22MJEbV8/ISIPsAV7jTqgOEUGByubQkAOd5pLV0znfk26XR2rxJn89pYdeY17klBvs6Re6DewiQuqAGO95UXwOjOOp5Ofd45Eki2lrqYbCvI%2bH%2b0nY4lV7YDf6muyFCpq5%2bfhgG6x%2bBFztFaJC8Q%2bOtpYwKVTM4LQbQfHZZTcGnN6a9RReMUHR52m8zGv2KWSzikjfhG9ixI4SWm6oD1GuSAEKJqk9AxfKqbzCi6I10dUVqBsyxh5hcYMVXP%2bCOd1dkg3FxFIouvQdjyAQPan/VRb7/FPCQorODc2srONXhdNoMW4FIiBpv5w0RAjcDCHKInpU9YXue3F/kHmusLIGW2gr26ZH7i1xhfYgC%2b9oaEfTUsvurHZHf07xsxgPkPbIibtDa%2by8iASTexsUxWB5pY3RIewIkFUt4T6iQANMBd4SsLAluh0FStsRon0A4LZtw79pnohIRX335E8i6dA5ascN3rlzkzt%2b/cQVyMq8yE4g5hRQvXFfJbjPyDxKKLHuYC5%2bdOMrQeZYCJZdmEvuHL8KAbR0g7w5xfIASC6CiwnR1gBYNJvyBqi1A%2beQdJmcowWJiBiFC8vtt6Vc53VydY3LbjIwACc1RBy2GVbAa18Cso7IrjArddiNvhGxPgVexCjy/7B1sFSA06LWn8g/yNTFEnb8h1devIEBKVRshpHkuJWyG7TgARohYl99tfQFbwf6SvsE90KCXtra0qC2ZGK0ZZfSmXKei/Z7zdxymvb%2b1B1EdTmUz9MCE732JBr9Eg7ugQUZbdsP//2QzgItCeHH9l9N0aU1GhHsoQUFKZrfgCNVF9jxtL1EBdRV5TUGSr1UJJm2KqmgwsUnKESLq/p6CBiUl%2boNiAhNRIEqeAqM/Nzic1n2avkF2bIRDrihthG4HSpqgs62RsQBFi1aUPoHmxlqYGO2HhmdVUPb0MczPjEFlWTFHkr5qB%2bl%2bcHjXtf8ADODOSkGncJo3QiX374W3NhbDkZCLJYNM4fzc%2b3D61Am4f%2b82%2bwApMrSpoQYOH3qXUWAnQmVChhRISe60VGgwXfCTLgNkP%2bEi4wKyCNXOWtZnEjHFaTLATA4QtKNXpV/fvB35J2X1cPj6rahlbUEiQ8dlMwhEfIJ8guT762pv5g6TNDyrqYCGuiogyExIkdLkhqvXqaI/X8Y9TrB3tu8ZdJbeQTA0DXP99bA63gU9VQ/YS6QGSO7LAJ/CAItuOfzhpYzo/2nqg8OfZcT0yzPhkGyyCkR/iV0hEfGCah1C1M87QXRNCDGQFOaqdoD1BaLFF5GCVAywbiho8NlD9hOujHdCf20BGJfGoKUoA4YbHoPHssHl0p4CKPJxy%2bZKMOf69fDm8myIOk2dQbNWEKIj4NPf3gh3r37GoKa%2bophdXEX3b7NrjPyDBJLIZfb4wR12dZHbrPxRHuMH8vqQl%2blVSYBDiRGmSFESe/IaUz6NPuU7tMgxXSWIIxUPBRyRkKIEKZ%2bYUJx7T5B/jzp4/dxpaEW0R8iPGJB/%2bwZUYCeJIeQE7Wmph9uXL2CZCmipKQdyqpL7bHq0j8HQQfcN990RMsoxAGpQtIoOXwQNiqRd3cQuMUWJUOOJKISVYoPJL0jXhPRcVj0jP93KLPsMKd9iWGNPD5ULK67yF90xft1oUGh9g6kMIV7rCe35no/%2bplgAFfnxbk9g%2b17VFYEXXAE0/snX5xtkM1NBa3shuW3a3Vz12JLzjNv1vyip7bIbZLPWtLad7kea8l%2biwS/R4G5okM798mYGbVgYhUKgpe1ND81U2LHRsf389ZApMQV4U%2bSA9NwU2OXARMotsYAmWEI1atTt7oSSewlT92DH5hZe77E5OhsUSloGySZQO0xokJZC1aCh5ZFigyg0ju7VCK/PwzWWDgRO2zWmjngcO%2bB22%2bPYUaE9NUKnwwry7sPYcB9k3bwBD7LvsDeITpARIiRccPnSBSD/oXa7%2b3VGiqpHZNgAUo7NqQDphQwhpPjk4nSgsLbIXdndEaB78g8QGsy8fo1RIMFg%2bvUFnResKn8KH2OadesG1FWXwy%2bPvA%2b11WUHOjeYyoWWriVoWZsG3ewAH5Ezr0xyWBw9o2vz8kTCN7CvKUwdhLAbhuZmpOziLOf0bKMz%2b/EVW9/kWIjyaVpMTwwJOh26hdZedWUp1CEKpD0AQoCTYwOwujTDscJ0kpSmAesHxUeo%2bgpVfRHU6JAX8w3K8Jc6XnTpfai%2bexq6K%2b5DzqkfwUBdATTkfwY12Z9yvKB8aGouDQYgohuanoz8KuOct6k1x5lfkunsnBgLg%2bQGL0oIQWIya6kxMWQKxALs/5MUvwDFDUYVn6AFmeRRTGaSBDKN5bOFJj5SRymVp7wXkgBEeNQxCpOlM4KND69A%2b9MsuHv0%2b9BXncs%2bQooaJX9hQmL2mwJkqkZ8NvFssD98MT/bU1Bb5bXZjHHa5sKOiII7mYJADx2DI3S3ZVjl3%2bCQz4%2b8RRT8SECosaqEUSH5Bm9dPMvH6Qg9kquMfIlUBwVF3r1yEUZ62vjAdTJ8TncKbOEUIO%2bwfm6Iw2EJElvXZxPnhtUjcwdSgrGAI%2b5xWeLRgJOP09IKQCNZ87SQO9CGCq%2b2pIhHkY690T0FSNY8fcTOUYoKpeeUTz7DTtQZ18%2be5sjRJzn3kO4CHcC8c%2bUCh9VqGXBwJbiYODPIUeO43qfaGzwwGmT3lbIMqhEi1GHtvwT4PKEyJeh8H813j7I8ko%2bQxFuNBieUSEslXdNzet/N3ihz2ugwvWVw7oWXwZ2GjxIXlIwGk8Uykcf43pYwkDhfU559ihrDSZseZBvd/zL/D9iLAZ50HCM2heyadLcytp3l5dC55Lw96tm1DXo57M38ApTsGPkSDf4DZcBr%2bYkKozhtYLNjZyBzcrDzc9dfNO3bFjmIe1c4rITL71BaqsWmKrBk0iq2L5bsvAWn3TqjbbuQ37nTr4hKe3cGyHZAwp9HS5a6bNGGpmrF8RJnl5c4G%2bb7lPdeB/pLf2m0gHNrY0e4LlmsbqtuhxGl%2bSNWagb42cT1ANr8kHH1Ejx9Usgo7wQCoOqKErTz6%2bH8uTN8Yozy6Ycpo4M9iaMtn/fIU4ciIQ8sj3dBd1UORMNeWBhpBSMCodG2Mpjpqwcp6KajgGkywG2FOHaGHJ6fnD4J169d5mDI9987zH%2bGIaJrAkE3Mq7A4cO/YGj8RTKAOrg80QUNiAVsaAkONj4GF478SGsJdJbfU%2byTNCVA/TmKaXOFT4XOTY/yyVAV6ZFkLM5OcKwwRYi2NddzrPBBPMHaAOykYOwXcpjSXLfTOULEAx765yBiA7JISQpMCIRCB2GA1rqLJSJBHYmIUPmPUa5ERGh8R6jbHg3VnEV%2blQxItJf9Em5ZYSN%2b4YEMuARRYNucF2kxYPtsgEUweeRUm5d84lMTPbJrB5OvNYwT6UpLMsN2bKYo7VIiVEQiQMOteY/wTDoSoDkxTpHiqhjtODuQuFZCYhLXHovSYEuqBguSINpmM%2btXJWxQPJmBSViE8%2bjUqvIjtz0laPu7ODiU%2bmwxibzV6jdkCRB7MWD7lAgHTTpiXpcp5LYbQsqIPfdBVWqwLDLCJYJ%2bN4me8jMV544j%2bBRyuzA7QUEXsTNnzrlWVucjEPdjxywiyRe5o36IBwAgJACCkNyO5LKSD78d8ELQbYuVteQEDMszEQr6UKVkPwkgLolI0APGtfHI7fPfC08N54ds5j6vzbzikwKu5%2bZrQO28azPq03eHnavtYY9lOTI90h0a6KoPRIJudW0WEPXhEtoUOnbkg%2bC3/uC/x0p/eTJsMhgikaCDVqAd5xQTHQo44wX5%2bdIPfvAj6ZPTZySXzRjTMiHBCC/qAq9DLG8MSH2zJeG2waLwL77/5/FPvvudyPrKSJh0BCHe/SSARBjnpxtsxqnweF9mvOvZaZgduQ%2brK10h7GhcietNPk0Sk8z1Emw9BtvwTai7%2bE5s4llmwKRbjEjyFrmguUjXNt2K9OFXvxE//fv/Ba7917%2bAb/%2bvIxGTfj2qrCQ7xJ5GPj8vX/qdf/wv4v/0n/0r%2bEe/87vio49OhCHmF8qBbaGKvYRtXtePhGuHr8Qq%2by9CSd85uHr/PfjhH/9hfGqoJRCL%2bOjvNPsyQMgdtMe99gnJtF4JEyM5orbyLDS13omYjYshVQpUCvld4LUsSaHVgri0%2bggMnZni0Ydvgrn/bhyhq6RGl6iKz7Glj9Z850eRy1/5E/j6f/tT8e/%2b7Q9ETUVHGOJe7VQQymn0%2bE9%2b/J7077/yx/CHf/Q98Xu/9zX402/%2bMIplotopgPMdYkFvvHGoIJzb/Csoav1YXK16V/zi2nfhr9/8WnR5czIcC8on4PefAvTf7oBbGFZ6pJmm82J%2bpEB0V5yFgsLjscWFPmUaWHbMP2RabKPzbmSz7TKs1l4QPdfeFZu9WVGXYTYWlsvLZWnVCHnEQGFB%2bIP//XPxb37/G%2bJf/u6bcOHsIwmEF0fVsvO0Gkpc9eOC8O3z5%2bEbXzskTvz8I7h47FLM5bDG1FB%2bZgDWGw16ROdQWejBo2PiyJW/Eo%2befARnsw9Fb1w5EXC6DTFS5n5ZB%2bw3BcgJ4iB0GHHNlURCw1kw%2b%2bRotLevJojKLv68EuSGxnymAcm3UAiW6pMw8vAsmOfq3PaVbhPph6C8QnCnfDgVIG4Lt5aXwJ/857fgK//627FzZ/LCIHwJBmz/ysNBZ4HC4JgRN351GTI%2bugAnfn0j6PfYIioDlOgV/q/BxGBn6H9%2b9T/FMzP%2bFmqufyhaih%2bGZsua/caxiYgkpacDtv8eQ8fofYbwZtMt6cP/8c%2blJ3czXABhFiNtOTpeT399iEbskq6rMnjne18XXflnXE7Dgsll2bBoO6QGYEp%2be/Tm2czAT996O9Ld0BhA1BbXLoPqskpGmM20GRno6IjWZWfB3cv3Y/WNA%2bFYyCmUcHtWfvJUtIPLYoh/%2bKuf%2bi988FfRY3/xR9GB4tJQ16X7oeZLd0NxCPD553QkQF1PIYgN664vjzQW3vQbVyddQc0hCo0RwiIYDjjE0uh4tDo/O%2biyrAWCPltcOQG%2bo6w6fcaHRoL1NZVhp80QpZNqyTaAanAhw%2bNraxtSZ3s7rixDUiyc8Dtu6wv5QCfrmKjkirRUF4WHOpsiUcktsP6Yx2mOawyhNKYAim3E7xGSFwc9KuEajEuwFMY11v3c8kM4W/JhWXwWD/uxbAwVkh/f99KROKExdJR12i2wboBIENf3CK7ZHoj4fELB64m/2ChH6YVsdrtkWwBtBkn%2baZvQLoUUzKkc6BQ010GEkUIQCajH9J2QlimsrKVgtS%2bIKV01LBs7xMhqsVjSd4iZzWdEaBk6ExIQwka7XZucv2BoEePr5WJWVy9WTT1iZO0Jm9HaHWZK5w3NMKuvFzNYbmytXGxuDYuBlQJwOteJ8dx58kFMDfcK%2bvHi%2buq8MG6uiMXpEbE0PSomhnrF6tIs6NYWufO0HM6ODYiJwW6xtjwHxs1VsTQzymUnsezywrRYX5lPLJt7SgCJJ43cvL4J%2blbysKEN0DB7EXqXc6Bo9BfQunADon4fmZlclkbdYB2HzsXb%2bE4ztMxn4PUdqJk%2bDU/HPwAl%2blwGLMhYj0sPbQuZXH/X0l1oX7gJjXOXIH/oHXA4V7kMBVtR9BnFJJJzpbO9BQZ6OtiZQoe1Sh7mQHNjPQz0dTFQow0aCs0jpwuh0%2bFB%2bZAWxSxWFBVAC5Zta2mic4%2bMDdzpSIDTuQYbW4MkCWC2zYDJOgVbtjm%2b3unHs4PXbYR18wA%2bnwWLfR70ljF%2bz2SdZEYlgxbd1hDXR2XUskYsS8xRGca%2bRcMqH7xyKY4WOqxFB7QoHI/jETBfrZOe0TE8h0XPHaUdLHLE0E8c1dgF9afR%2b4MhhQk0uhwOh7Y1Ed1Tmmo/Ti7rpOnBtrhaPhXCk%2btJVXbn3iIfyNKE4WsPX2mjU9T9S/VQd%2bJwV4qyezKAdk0DiZ%2bjbe1Kyb%2b79u9RPtXvsXevO6lc4ieKmm8k5e2oM42ydP8b8Tu9Lx0jr8Mx8tsoAf8PP6Ni8fUdq3sAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"600\" alt=\"实时便笺查询\" data-srcset=\"/assets/static/nonebot-notify.bd6740a.06f03bb3070b1cf39bad286a6f5d4fd5.jpg 600w\" data-sizes=\"(max-width: 600px) 100vw, 600px\" data-src=\"/assets/static/nonebot-notify.bd6740a.06f03bb3070b1cf39bad286a6f5d4fd5.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-notify.bd6740a.06f03bb3070b1cf39bad286a6f5d4fd5.jpg\" width=\"600\" alt=\"实时便笺查询\"></noscript><figcaption>实时便笺查询</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Playwright 绘制运势抽签结果</strong></summary><br />\n<p>模板主要参考了 <a href=\"https://genshin.pub/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">可莉特调</a>。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1080 2115' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-96dafb10ddda3e3c223f338b749d2d47'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-96dafb10ddda3e3c223f338b749d2d47)' width='1080' height='2115' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAB9AEADASIAAhEBAxEB/8QAGwAAAwEBAQEBAAAAAAAAAAAAAAUGAwQCAQj/xAA2EAACAQMDAgQEAwYHAAAAAAABAgMABBEFEiExQQYTUXEiMmGBFJHRFSMkobHhM1KCg5LB8f/EABkBAAIDAQAAAAAAAAAAAAAAAAMEAAIFAf/EACYRAAEEAQIGAwEBAAAAAAAAAAEAAgMRBBIhExQxMkFhUXGRobH/2gAMAwEAAhEDEQA/AP07RRRUXUUUUVFFndCVreQW7KsxHwlhkA0rur9tIs3utYvLeKAMF3MpPJ7cCnFI/GOiy67pAtLeaOGVZklVpFLL8J6ED3qRQRyTsdK4geaO34qTyyMhdwmgu8fa86R4q0fU75LS11K3mnkzsREdScc9x6Zptb3Pm3EsTR7NnQk8nBwePuOaitA8FX9h4gs9RvL20dLZpGCQxMpJYEd%2b3NX2T3NOZscEbwMd2oV/fwJXBlyJGE5LdJv%2bbez7SnV0v2vLR7G3jkCHc7vLs289hg5J%2b3HevN/dYvXXyEcx4AJdh2z0HvTeo3xYXF5FsLDN5BkrnpgZ6Efp9KyslxjbbT5WlGNRopq%2bsG1t3kdII4YwWZmc4A7kmvUOtPNCksSQPE4DKwc4IPQ9KTagsUmmTwzOI0mBi3Fd2CxwOPc180zyV0qCO3kWWOHEO4LtBKnaeO3INJcxJ8ovCFXSo7TUZJrmOKSJFD55Vj6ZplUh4XRkvX3OH3XczDDE4BHTknGPQcVX09jPc9luQZGhpoIooophDRUX4wAN1EGCkfjoPmx9OmQefy9xVpUV4r1L8BqYjWG7lkmcBRAhbGFGSfYduM0rli2Ae0aC9Wy8avcS2unCSDO8zovAzwZAD2PavOjrGmnMsMrSoLiT4mQoc%2bYcjB9Ome9dXkRX1miXMW5GYPscYwQ2Rx2INc2jiIacfIkeRPPkOXABz5hyOPrmsxNgjhV5tMNBs0s74BGz5s8kx%2bELgsDxx19%2btVNSfh1y98cmXi5lUeYT0x2z29McVWVp4fYftJy926KKKKaQkUqvLC4ku5ZIjHsfB5Yg9APSjV5L1Ly0NlaTTqGy7K4VUHfIJGSf6V1ahNZWzRPe3fkFs7RvIBx/7Q3sEgpysDp3CXjTbodBD/yP6VhaaHLawmKFYQhdnxuPUnJ7etNodS0zCKmpW7bumZASa9T6lYW8jxzXaK6EqwIPBAz/AEoXKRq3FdVLks7C4ju4pJDHtTPysSemPSmtcJ1rSxDJL%2bNXy48bmCMQMqW9PQZr7JrGmxtGr3iqZBlBtPxD1FGjjEYpqoXX1XbRWjx7VznNZ1dcRXFqtte3JtjY6gtoIw%2b8GEPuJHwnJ6YPP1rtoqKJMmmako51aFjzj%2bEUYyuOP9XxfatG07UWZWbVY9wxybZSc7QCfzyfvimtFRRY2dnGluUvWiupG5Z2hAzxjpj3/OuhoLNvmghPvGP0rG5jaW3kjSRo2YYDr1FJdVvU8O6c13f3VzLGXVFWNN7Ek8AAmqDiPlbExhN%2bdv8AOqjyxkZke6qVLI6mPCn7VhUnoXjTTtT1WCxQX6zT7gnnwBF4GTyD6A1SQSTtcSpPGFQfIQvXn170xNBJAdMgooMGRFO3VE6wtmdVZVZlDOcKCeT7UNIikBnVSegJxS7VbO9ubm2eznt4kjOX8xGZmweACCMfzrDUbuRb2RQYQqkAF4wTyM/90s%2bURi3JgNvonQIIyCCPpRUzea3Jp9hPdzzIltAhdysOcAdeBXq01qa7s4bqCZTDModCYcEg9OKDzcftW4TuqpKV%2bJNGTXNOFpJPLblZFlWSMAlWU8dazsL%2bea7jjeSN0YsDtUDBAJ9acUzj5G4kj2IQpomvaY3iwVH6L4Hi03WLbUX1K6uZLcuyI6KBlgQSce9WFFFHnyJMhwdIbIQcfGix2lsQoHdFRXjHaLuEuVA/HQctj04xkdfbmrWo/wAVJLJdoIVdiLyEtsDH4cDOcEce/HrWfmdg%2b07D3Jdqt3cWKbxKnlSlkjQxZIYK7HPqOB%2bX1rLT9SuJ7uGCU5R8n/C29FjIA%2b7Hn9K116VY7W13xLIjTOGyPiVdjklT2PbP1rg0tw2rRgyM4UusQZiSi7Ifh/n2rNWixoMdkeCn3hJYlvJPJkVwbycsVUDDEcg46ketWVTWjW6W1/GI9%2bHkkkO5ieSpzj0H0qlrSw%2bw/azZjbrRRRRTSEiorxZNeR6kEsrB7su43MHCrGAoyTnue3WrWlt3pzTXLyrMF344KZ7Y9aBkNc5o0/KJG4NNlRmtkGysRcbkDyuHCkEj92%2bQOxNYaTEIbyFfKJR9zxSv82zZFjGOOe/tVodJc9bhD/tf3o/ZL8fxCcdP3X96Q5eT4TYyQG6Ur8OIyXx3QGHdczMB/mBHzdT1qspbaac0NykrTBtmeAmM5GPWmVPYzHMZTkpI4ONhFFFFMIa//9k=' /%3e%3c/svg%3e\" width=\"1080\" alt=\"运势抽签\" data-srcset=\"/assets/static/nonebot-almanac.82a2fbd.95740ce08f204d5b61c1f4b5b3d5062a.jpg 480w, /assets/static/nonebot-almanac.175c05c.95740ce08f204d5b61c1f4b5b3d5062a.jpg 1080w\" data-sizes=\"(max-width: 1080px) 100vw, 1080px\" data-src=\"/assets/static/nonebot-almanac.175c05c.95740ce08f204d5b61c1f4b5b3d5062a.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-almanac.175c05c.95740ce08f204d5b61c1f4b5b3d5062a.jpg\" width=\"1080\" alt=\"运势抽签\"></noscript><figcaption>运势抽签</figcaption></figure></p>\n</details><br />\n<details><summary><strong>使用 Playwright 绘制原神角色天赋查询结果</strong></summary><br />\n<p>模板来自 <a href=\"https://github.com/yoimiya-kokomi/miao-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@yoimiya-kokomi/miao-plugin</a>，做了一点点修改。</p>\n<p><figure><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1442 3492' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-05319ab9fa61ffeaa2ecbee12163e920'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-05319ab9fa61ffeaa2ecbee12163e920)' width='1442' height='3492' xlink:href='data:image/jpeg%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAACbCAYAAADSkJ0yAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42qS853fcSZYl1n/NHn3Vh91vOkczGo12d2anR6NR95huTXV501VFX7SgB70nSICE994DiYT3NoH03nvvM2EIkHdvRAIkq7tG5ujDY/wckhkv3nv33oj45a8SiQTi8ThE%2b//J4uLvjiz%2b79j/0zP/d38b///xub/8/PvvHIu/7/Ovjg6OHo7FYn9m76/HY3/%2b4Qnx97SksASSPzNeS7FNxZFiKy2dQDqdlCb%2bRpyL60d/I64n5d%2bIZ5O/YKV74m%2bPnkv%2b7H7q/XEy9eGz5HdJxngcQyb3YdB/ddT5VCqFbDaLXC6HfD4vbXt7W7aZdBbpZA6JaAZBbxweWwQucwRWbQi6VR/WZ%2bxYUpgw1aPBUPMaul8voK1iBs1PZtB0ZxI15Qt4dlOFx9fW8ejaGh5eXcTtC0pU3phD1c0FVN%2bcQ/P9ZTTdXUbV9RnU3l7E07Jx3D0/ggcXFbh/cQwveF59SYGa23Poe6ZC9Y0JVF0bxcvLQ7w3gOeX%2b1BBe36599D68PIK710eROW1YVTzezTe5fd6oMbKmKc0YEcRIEa3UCigWCxyBNLSGaL1eDzSOclECi6HDw6LF157FC5TDOtzVsyN6jHOTg83b6Lj%2bRzq%2bZ%2b8vjGJx2dHce/4KG58rcSdf%2brBhX/sx7d/34sv/6Ydv/vrJvzmrxpw7B96cOYfunHq111su3Dut304%2bX904zzt2N%2b2oOxfBvHV37Tgi//ahD/%2bfQe%2b/ZtW/PSfm3D1nxR4%2bMk67vx%2bDXf%2bbRW3/s8x3Pr7Ltz6/SSu/vMErv0Lje2df5vBjb/twO3fKPD4Ow1q75jw9Bs9zYhn3xlh0QSQzibxK9H5SCSC3d1dBINBKMbG0N3dg5cvK1FV9QrDwyNYXl5BY0MLWpo6cPfWI9RUtaC3XYmvPz%2bG8rKnKDvzAOe/v4Pv/3AJP3x6DZ/99jy%2b/O01nP%2b0EVXHVnD9s1Gc/udOHP9NG87%2bjh3/1348/0KBs39XixufDOLO7zhi303i/qdDePL5KK7%2bSxfu8PmHX4/j9jfjuPftJE79cy9ufTaOym/VePaNFi%2b/06LyeyOqvlPj6W9G0P/Uht7XfjRcdaDzgQt1l%2bwYfG1B49l51Jw2w6RNo/a8Fa%2bO21B13IqteQ9T4dAB4XAYb968kSNeWVWF1tY2VFfX0AFVWF1dg0FvxNjoBBrrW1H7uhlXy27jwe0XeHT7FX785jy%2b/ewMLh17gJNf3sBX/3oeP/7bbZz9vBLn/1CDmp%2bMuP/VGm78YR5X/zCCq58N48GXSjxmJ8//t3rc/30/uk8vYOTKOobL1tD4wwxHuQd3/vdmVLPj5V%2bM4yyj4cono6j8bgOv/qhDzQ9aVP9goJlQd8KCl59rMNbsgcWRwsyYH/NTQUyP%2bLG1kYB6medDPhh1SazMRNBx3YmGk3Zol7yMgMSHCDhKAZfLJc%2bTySTcbrd0TCadg98bgtXkQi65B4cphI15E1SzNswNaTHZzTRo2ED/qw20PV5B0%2b1l1F5ZQN3FDdT9pMWLP6px77NNlP9hAef%2buQdV7GQ5O/mYI9x7bAbjVzcwcmkVSrbKi6toOzaHh1%2bwRnw5joofFzjyzPfv%2bbnHdWg6oUfzSSOaTlrQdMqKxtMONBxzYLIpAIcng4XJCGYVYVj0KbidWfgDeUZ2HkZNCsFwHv33fWg%2b7YJ%2b5RccsLe3x3BfhlarQyaTQXdPD9ra2hGLxjExPg2t2oTGulZsLOrR2TSEjRkLzCsRbI57sTLgxmybHWM1Vgw%2bN2PgkQVdN41ouWhA3UkdKr7V4MHn67j7%2bRhen1xA7fczqPl2CgMX1zF3j593dhXDVzZ5bGAHl9jZRTSeWkHXRXb6uBZtp0xoFXbagvafbOg4a0fneQd6y5zoOu/C7EAY62sxbKzEYdKnoWIrHLAxEcPiUERemx%2bJoO9WAO3n/HSA/%2bcOEKMvKv74%2bDhWVlbgdDJUGhrQ3NwCt8uDV1XVmJ6cR8WzVxjsVuB1RSNGu2ZhWQ1jU%2bnC6qAT8%2b12TNRZMfLSjKEnZvSy8HReoxPOG1B/UsuRV%2bPJ16vovKRH91Utan%2bYw9gdA2YfmTHzwITp%2b0bMMZeHr7HDZ1Yxcc%2bO4ct2tJ8xoeusBR3seN9lJ3ouumgeHnsxdM2L/ut%2bDNwPoP9eAJP1IX6HMMaeBLHUGcf0kximHsZg1WQx8TACRXkIfVeC0DM1UtlDFBDFr%2bSAAqt/RsKhiAABg7s7uygWtuHzBhHwRhFwx%2bCzxWDe9EC/5IZlOQTthA%2bqIS%2bWOjgSDU5MVjkw9tSO/ttWdF02o5V1oPp7LSq%2bYhR8soX6YwaM3/Fg6IYNjd8tY%2biSFmNXee26GYoyOvCCHcvPwpi/40ffGRt6TrOgXXKh7yc3n/XSKX6MXg1i7HoIU7fDmL4dw%2bTNks3ciWHubhwLdzOYu5PB/P0MFh9nsdCcksdLD7OYuR%2bDTeuTnELygEAgAK/XKyMhGo2%2bN3EuCmQwGEIoGJF1wOMMwGX1wWny80O8MKw5oVt0QE0usKG0YXXYisVeM2Y7OaItJkw2GKF4pcfAcy16HmvQ%2bVDDiq3FUpMNi01WzNYasNBkxnSVHvN1Ziw12thasdbq5DN2zLzmvVdWzFRbsdDg4DUnVlrdWGlzY61DmJ8WwHpnABs0VZcfG13iPAhVtx%2bbNNEuD/jk/Q1e1xMBQuEg4T35gQgJJ4iiJ4rgxyauHV13uw/PPSXzCPN64PG5pXl9Hnj9HvgCPzd/yCstEPIcmrd0L1i65wt65fGHa/ycw%2bNftMPP9Upz/78zf6kVfx%2bKBH6ZCovR/vdMRIOMiFBYWui9hRAJH95je3RN/k348JqIoMPnS%2belY3n/6HMOnwmHIh8%2bm9fE%2bfvPlZEY/mAff49g6Xsd/Z/h0C88c2gfax8ZAeLLGwwGbGxsSNvc3HxvW1tbWF9fx9ramrSP7x3dF0VzcXGRnGEVmyqVvC6eFYgi7olnVLwuPmdpaVkei2eWlpawxr8R50fPiM8Q3%2bHoGXEuPuNPv9cvmXjm6P/8954Xnyv6KlJcQP2vxD8uVvytrU2Sn9cSBdRqtfyywjQaNdrb2/H8%2bXPU1NbyP1jiB6kOnbUun%2b0lXD57%2bgwVFRWEojXpjFckUZVkk83NzTAajejq6ia7fImnz57JTq3yS9bUkChVV6O/rw86rRYD/f149uwp6vj/LPEzVPw/nvH5ly9eoKe7Gxr%2bXyXnfGQffY/R0VFJ3sT/MTk5Ka/92fOHAyFSWTpARIDd7uBFFWZn57G6Jj6Q3lTRY1t0BI8XFpYwNT2LickpLK%2bsyfvieWEbm1tYXt/A1NwcJmZmsE4vixGY5vksOzHDVvynCwsLmJqawvT0NNZERPG56Xlem5vHwgpHXaPBPEdvYmZWXl/j567z/5%2bcnZPn8hlGyVEkloyDpOI1/v%2biU2L0p6dnJJ0XkfYhctffD2jp2jocDkfJAfF4El6XEV7zGCKuGfgs4zQl7LoxGJZ7ELJPyOtR9wyC9kn4reOHz9B4zz/ejURrM7I9nUh1tiLU3YGgz4eA0QC/Xoegw042FmA%2bBkmoiC7kHQFGXKiuGvFXFUjUVCLyugKhl88R5XmS5/GalwhXPpeW4HGitgrRl48R6BhGzEDlaiRTNUaRMLD2LBkQ2XQjqgshoGKr9SNnpdymYEvome/6EGK6ICIUPxGNHxFtAGGVn9/fJ6X6r2J0QNCjQzEwCKuqATF7D4rBQWysDqOrrQ62jTqsTVVgevABEs5eFAJDyPkGkadlQ0PYHa1F5MY1KI9/D%2bflC3jbVIeMxQz/yR8R/OkkgjeuokCGubuzA7vNhhgjbod2cPs67Ge%2bgvKP/4rUhR9xcPEctstOYeqH30Nz4lPsX/oJby%2bdhfWnrzH2/e%2bQOf0VDhp64dV4YF3YIqubx1ZHN3Du18BIJ7LkJ66FFSQIz%2btj85jtU8Iwp4JXZYFlUYMdTxLvQnm8DeWw784hbA0hTkksHRDw6JH3D8OlaUfcMYB8YBimtUEyv2E41C1YmXiJecVzxBz9yPlHkPENI%2bsdRjo4gqKiAan7dzF3/ie4b13DfmMt8gytWEsTAiePIbUwhzyV5naxAIfdTq%2bnUEzEsX%2bvHNYbZWRlF5G6fB5vrl7E9o3LGLt5BasXf8LBtUvY5zXbzcvou3oJyfMncdAyAMu6GVsTC9hk5zQ9vcD3/xPe9TfCtmlB0RVCwhLA3OA4JntGsTQyDbfKBM%2bmGXlXFAdhdj6UwR41Q8gWLDkgHk%2bR3enkyOfYsYRrAFFbL7KBUdnZrHcIheCotISrH3FnPyOBRmfEPYNI9L/C7uOHwOsX2K94hLQIWzogTiYZYagnOfoCZcR0VCFbQCabR4yqM1t%2bDQV2LH/nJvJl55DjaIu2cPsG8tfLkOe5uFbkce5OOQp0QOplG3ZMuzgwFQDrDt5ad5Fb8SG3GUdalUCRkndbl8E7Xn9r2cYbPifOd/VZFNRJ5LYSyGuSyK4nEDSSC6SEAxIpeJ0aRCwdsG40wLnVhBhDvfXhcfTSnNoWaBdfk/ZWI2jqQNjSiZC5E2Fa0N6FaOdzBK5exhZHzXXlAmIVT%2bBYX4PjwV24XjyHjeb0eGGxkxIv12PeOA%2bv0YQER9dz%2bmtojn%2bGyLkfkPrpFBLnjkHLc5EaqbMnkD57Eq4z3zAlPkfs5Jd0QAvCWvIOlROmWT3symXsVt5BYXwGeUcWQZUdEbUHpmk17AsGuJfNcC2VLG0II2eOSstoIwiYhAMSpQjw0QExWycWFE8ZYvVI%2bwbQevc8zvzTP2BO8RhNVRfQUHkeTjWdY%2b%2bWTogIRzi6kex5AeuFc6j77BOsnz6OTOUzOAk3HnbI/%2bnvYefoeUmjdRYNTg1/g9YNpobZjtyV81Cx4zXHvoD/9PfInTmO5IWTVHvfYvzHL5CnA/I/ncD6uR9RfeJr%2bI99ie3aTqxPr2G8sw/9HYMYr3gKfPY/4G07nbxlhn5qBgGtHX2N7Rjt6GMqKLEwPIGh1m7EzV7s%2bBiF3hjy9iiCTJV4MlGKAJ9Lw9FtlyMrjZ3zaVphW6mT535Duxz9kLkUAdLEc8IZjIBU%2bQ0k7pcjeecGoo/vw00UcJNsuHq64SHzcjpdcDgdGNnsx7plHT6TBfHLlxC4fBnm27cRO3sGCWHnfqLD7sJZVsaIOI0UnRJhjbDevoX4yT8iWdGEhC6B5JYfWaJBZtOLg7pa7Myo4Fu2I8XrOV7P6qNIa8NIaULv24wugqwuWrq39ScRIGpAwtmHJPNfFLqYnccscgHrAFJuVnvWhpR7AGnmvDgXzyVZB%2bJeng9Uo/joAYoVj1F8ch/Z6kokCXuR1RXCkwoxkhFR%2bNKi%2bGW3UcjlEQ3GsVTnx0KFD4svfVio9GPuhVe2i2wX2c6/cCN99TpyZSeQuXIGhQvHGF0d2DZtY9%2bcZ76nkNOloNL5EdTGsG8qosDz7FYUBd7bMVDN6jMo8lpRl5b3xHVxnt8k8hmDpRpQQgEdi9wIKyvz3NzN4yEYVTPoqO/C2nQVBttvYbT7HoY770DBdlFZQdQYkSiwO9YAPyOg44/fwChgsK0RabMJvu%2b%2bgu/rz%2bAvu4AcC%2bEOpbWOvCAUCSKb3sF8%2bzv0Pk/gVfkmZhoBZc2ebCtvbGCgMoPp%2bgPs3LgD/fnv0H7sD0ie%2byPeEgXM60asjc9isnMIbd3t%2bPXsFfSZZ7HniMK%2bsomkLYCR9l7MDIwxiq14Fy3Iyr8fyko7iGTxxvsRCpR4gJ4IMASProORQBgMDsO%2b3g/tVCt8xnbol%2btgWKmHdqlWtl59u0SMjIDB0XoUHt2H%2beZVRO/fwl79axTzeaSmpxC6fRM5EqH89g6KhEEhknL5LDLJIhZad6F8lcdgRRiz9fuYrCnKduB5COPVRczUbmP7WjkC5Vcwe7scGaLAm8Y%2bdsoL%2b7IW/nUr1EsqnFh8hXmrGs6xZRY7DfZ8WdiWtHCuGhE3%2bLDvz2KPHX7jK5k8d9IB1o9g0O/WImLtlqEuwj9sYdEg5CV9xHwBg4ERGf4Zhrxok7wXI1RGRdtbieLDe3hX9Qy7T0mWXjylEgsiTOgLEe4ih/MNQqUJARKLReBzhzFel6YDtjFV%2bwaKqixGK9MYq8rJc%2bXrbSgqCaVl11AsY/jfuII8ESLxvBXbhh3sG/I4MBYJhzvIr8eQUyWR2YijqEkju8F04L19YwG7upy8VlAz7LeEEQJVhMwVslHDRzAoUCBMGNQsvIaHsBeiAwKqargVhLfZSiyPP6eDut4XQlkMD2Ew1lUBd9lFTJ74AaYLPyHx8insS4twnDsD99UyWK9fYVH0Q2PW48TgQ3RujMJl8ULxOonuhwHUl2sx%2biKLwWdxjLzIoe6mBj2Pwxh5TgdcYJE89QWmf/wE4ZNfIFPVBs%2bWC85lHVbHlqDuGcLBzc%2bxPdTD6p4j/K0ipLbDNLcFw8wG1BMrjOI1WMkEbYtaeDcs2HaxSBrDRCL/z2EwShhcHq%2bAS0AdR9aoeIi1mm%2bxOfMSS8pnZIg9JfijI6QdwmCi%2bwWcly6g85svoD57CukXT%2bDU6eAuvw7vF3%2bAveY1fNTlKqMav249jcdzTfAy/0Zr8mh/EEbldTVGKvcY%2bmkoXuZRdWUV3Y9DGK1IkwecYw34Hi1nf0Dwx8%2bwXd3O76PBdPcoxvunMV9TB3z1H/GmrQphWwzuVS2SlhDWFAuYH5wiXI5gqmcM%2btlNGOfVcKyZCIVp5CxxwuBRChzCYMjcztAW4d/F4y74tM0yGgQ6JBwMd1u3vPexCQeEOyuQJdYLBMixBkSfPIDX75fmWVmGL50uzSYxHaZ0y9A4SFBsXkxX2jH7xEMk8GP6iROKZ34MMxKUVUWM0hHDFXF4yx4icO0ubPdeInD2KsJVrD3E76LJg117CLuMpLdjI9heUyOpd2GHBTBn9GDb4keRYke029bScc7olveyRhcyGicjwF2KgCMUEDAXYV4LGBQ57jIPUwUqpQPC1l6ZFgICP7akfwjZ4VoWwQeIPb6HzKN7KLIIpn1eRPp6EBkdRlQ5hnQuJ9cci%2bkcCoUiMiyGhXvEdoofP61w5QSsD0agrIfMfVEEJ1gUJ2sKmHydg7IyinFGiUFpwUFqHftJFm3/GuK%2bZYw4x%2bAJr%2bJtUgeLit/Hv4rtyKa0YljFgr6OQmgDbxJa/h0tpceb%2bAbCXj3E4L93QJEVfXWyklW/CztUeeOLs6hnjmnnK9HTfFPCX9zR914fCHsPgzevo%2bmbL6ErO4%2b3rYRBmxW%2bH7%2bD9w%2b/R%2bDmtRIMFotQq7cQCIexLdQgHaC9dBz1ZIKpiz/A9XAUk4TBqqsLGHoRw0zdvrQBosTrG0uYfAXS2wCshjHMT/dhcrAFTQOv8ZdjlzEUnsJCbwMukEFmYgYM9NRibKgZy3P9mFZ2YLi/AYWkGYQBYNeLd0UbIn7TBwcIGMyywosISLoGJSQ69IPYXC%2bFv1PdSohkihySoox0QAkG8yN12HnyEJFHd5ElC9ytfYUiMT9jNCDaSIjMMOfEqhMtnWRFJiQWYlRmt68gfvMSdGSPb4QDHpDaNpAPvEpjsnaHaLCLifp3UNa%2bZb3YwVg1YJzxIB9bQMy7gnx4AwHfAp7oG2GIL2K88TG8ujF2zoSoZxEJRkcmtIaEf5mEbQkHWT3eFYw0E95m1XTAYQSUaoBWFjiRBmHCYdBcyvGUq1emgITAQ/iL8zxm75VQGaZoirAIZu/dxs7zh8g/vEMx9Bh%2bl5ORZJTmt1rg8XrhJxLYPFZ4Am54WANWXmxh5ZEaa8/0bFWYfEqqXJnD%2bKsiYTFPREjAfqMO3hsV8N1%2bDfflp/DX9GHHQWx3%2brFn99J8eLu2gW2NCXsu5rtN5Lidee8iMfLhjXiO7bZV5L%2bd9Nku24zWyiLoZBFMfkABAYPzo0/h2GrmKPfg4g83UHbiFkkQmWBbOZS9dzHccQtD7eUSFWICFgmD8e4K2C%2beR/e3X2LrJ0pWymH7wjxcZIZeQqOVosjtD0Jv0eLWBMN1qwdOFqeR2iIVZxQvrqkxVPUG/UQBUfwqr6yg61EQIxWkz%2beJAid%2bh/7vfoPosd%2bjUNUC84oVmolVKHsmsVDXjINTf4u9niZEHRksLTlIvKgVTEGsjS5ionMUy0NzFD/xkvFewZmgIiQKmA%2bpsHTAIQqsEAY92lbq/h5MtVbh8ndlUFMKz488xtTAA0z0kQaPPcXWXBWJUDfFUIkHeClsJo5/DxMlcfLZI3bQAlfVS7iP/RGO4UHygACMVj2ujp1Dr6oDbmsAY%2bQBPQ%2bDaLylh0LygAT5QJ68QI/eJ1HpgMS5SzCXnUXvlUvwH/8WecKgYVmP1ZEprE2uYKurB%2b9O/jXe9NbBY44wBdzE%2bSjyzgg2J5YIgSNQTSwSGv0oyOtR2eYsEUaA/2M1WEoBwfSith4Snk4WuwGGfZ8Me1EfxL2Uu19CZZx1ISKg8DAF8kyBfSGGWAdidIBgfoFYjOHPUMtm5aqTn7Do9DnkIojbQQfUJFnxC5io3sXIywwhMMUIyGDi9S5ToCBTIEYilC/7CWkW0syZHxB/1kxRUyTDI60l09s3FLAz60B%2bNYQUGWFhM4GMqsQI98gW3/C%2baAUTzKhiZIsx2aZXoodMMPFhSkx0UmiBkKUHO5ExNL2%2bjtbachbGHlhVzeT/HawFQ0h5BmWbEceBYVkEs6TCttvXpRbYFXOCrAEhavXw6ypEGnifRVEUQbHKnM2mkUoUMNe6w47m0F8RwnTdG8JeQbb9z4OkwnlMEwbzN24jdPF7GM99hxwL5XZdD1IW0l5TGL4VG0yMhgoyS7WJFd5dgHfTiqQhCN%2baHd5VVvotD1srImovduwp1gnqAFcGO9Y0%2bxn8kzlBdka/XM8i2IO9mAINzx/g3uUbWJ16wRpwC%2bvTlVIG5/zDEgmOYHBH0UCou462b7%2bCQcBgcz2d40HgwlkJg%2bGXz5Hb3cM2YVCrZaRFQsimtrHYto/%2bZxFU31zHXMM7RsI2Ztm%2bur6KwZdJQuAedq%2bX8zNPoOHMHxE/%2bz3QOgDtohrT/WR4VIPNnS34q%2blzaDeMo2ALwaczI2ZyY6StB4qOPii7BjDRPQT1zDLyrgiVYV6qwX2KovCfqsE0ESAjJjo5skkeF4OTiNuH5YiLeUJBfEqCiB33liIgTadlGQF7z56gSA2wI9KgtorqbxtZiqEYFWHh4AAZpkGeREisOhe3C0jGcpht2cYkw1/AnYS86gIV4A5marYxzfPpapKna7eQLr8Gx4OHjICfkK/pptTOIq2PkN2lkTDF0KNWwWL0IrbpY2Qw/K0ZZE2i0CWR0kfl8bYtg7wlJe8VbWnkDamPiuChGBICRyjCgLFDQuHmzAtK35pSvvM8dER/P6bClnZ4DHPwmkl8zCZ4CHtOkxEuQp97Yhzu2Rm45mbhdBP6pDEkvW7YLB4oqhOkuxnmeor6v4iNO%2bPM%2bbPwXSpDqOwSQ/8aKbIF48%2bCmHzmwcRjHyY6gjA4CrA6d6C35mA0pRFWLsOu8sDs2oPGmKSlYOA9gyULoy0Pk71ABMrKa6U2C7UxAxPlcOq9HD5EgaGO23BsNnLUB/Dq2ud4fuH/gooVv7P%2bCppfXWSVbT3UBCVRFDa3IehWYW1Tg9qGBrkK5CHTc6yswP315/B/8zlsZ07CKbQB02JhfgF6gw5Om490N4WOey68vDSNEcKg5uYAsue%2bQfsPn2Dmh3/j8Wkon0fR9iiCZ5cXMfSM5GiYUbKuxcj4Ahr6lOitfg1895%2bQ6auFPljA8PQ6tOxYY8cAGtr78fxVA4b4rC%2bxC1c4D3ekAE%2bUDgzkYXaEPjhAzgka26Qc9hvbGQFdcK/XY334ARxUh5r5V9ikLPYb2tjxzvfzgiE6wGtbgcFgxsz0tFzfczoccIjl9J5uOCmHnWursLvccv1Ro9HCbrfCavZgiOyu42kBzQ/D6CbN3bw5hO3Tn2L15kVoz3yHwqnvoHzqR%2b/TONrvOzH8hEKpP4MFip6pFSOmKYsX5lZZKL9AcHIU85YY1oxBGH1ZTK6aMLVmxjiL5DQlsDlQgEl0mmaho7QeRs/HDvATBsXIisURsSYgUkDM/Ytcz5IWi8InJ0HsvRImo6KVx50IuDYQ42cUxCxQKoUARzscjSJMwRP0uOWEiNiBIpbLxYYEsbM04PTC%2bGQE1rtDcD5UwHR3gJR4CPq7Cl6fgeHhOLQ8HnsZIyIIWrwn5wpm21mvLAUWsD3%2b/29IfvZh1yTh0mbIOvNUeEUepxDhvQifCVl32ZddBExFuAmdLm1ato7NNBysAclU/OdaQKCA0AM74TE8enwaT5%2bcgX2zGVvz1aUVIemQQxQQs0UecoS4Gbn8NtY40mL0d/b3kXE6ECAihG5cRejBXbkyJOYERRqICdLteAwHdy/Dd%2b4zrJ74PbYvfgYHxdBoC9DCXB%2bsfgMlhdEUYXHsVQYdj%2bwskgcwDxaQ0rkQ3nLAMrWBlck5XFyuxbJ5C29tcTiU8yx4Ebg48n5GQFzjgpfR4ligCnSn8I7R8Y4IcOBIk8d8jALekgOWx19KBxSCCsz0P0J3/TUsKp9jtOsutsOKX3RAPkmcjSYwPq6Em6Fe3NlBTmy2eHQfvm%2b%2bQJyyuLQ0VoTZRKHCiNhmFLyjCLJdPYfOc6eQv3AM3gfDmKEYai7f5MgnMMdRF2pw6GUcjXe0lMbvYB7dgXlJRWY6SYo7hd7BfvyXmSvotS4guKzF%2bsAQiv4UlhXTMCxuwrKigWpyCRNkhDkywLeRPPbDpTnCP1saEyEulr8E3MWdAyX25xk4HPlhmQ5HJqBRKMMkmWA8qJPLXaKDYqtdnAwwzeMUIS9GRZh9907uxHi/F5mpkhBM8dETuO49gulZJYLl17HxVIm%2bxj2MNhUx3FjAYF0GSkKjgMiZ%2bn1S5x2oO9PYJYTtGInlVrI8cw7mDTtimrFz0ksAACAASURBVDByW1HsWfIo6lPy%2boG1yOcy0nZN2dK0OO8VDaW5waDpT7RAgEXQpmqUlV4skgTMo7RhssNmuLUtcGma35tP33Y4c9RGXr8Et9sHvV4HE0dYQJ5Dx0pfVwNXWwsc7a2yKLpdLlhJjV1MD6PViWuDFpztNuFcuwbn%2b6w4123EhT4LfurQ4FyPERd7zOhlJAw/T6HvaRj9TzNYbyWV1RC%2btGGEV/mZq3YMrczDTAa4Q/iLqLyIb/kR3fAitMZUWXeX%2bMHhokjmlxZGYjICtOxUC1qrL7PaV0kx5F6bhHN%2bGCNd5Wh4eR69TdeZCrelGhSCKG7vkTDod67BYLSgpqYa84RBH4ufY2Mdnu%2b/QeDzT2AvuwAnR9zH/J/jfaNBTxz3oHzEgeN1y/jqfgfKBp24QAeUDTjw5e1WnGlRoazPjv6qDDofePHs0gwGnxeh6UtDM7OIyb4RjDR24XVTLf7XuUto1ipQsEegV%2bnhVZvR09BGa0V3XQtmB8YkCyx6qRU8Mdn%2b%2bdKYUyyNtcG%2b1SRHO0iI86w1wDH3Cm59q1wYNa/XMUIa4GYEeGSUdNBa4bYswWJ1QKfTyl0XNo6yw%2beDk5LY8eolMd8GG6%2bLAmlkhIgI0JvtuD5g4mjrcLZtCxd6zYwAPc72mXCqTYUzPXoZBf0VCYw8TmLgURhDj7PYbI0jsuGAZ9nK0XURYi14vDyItS2tjIqYLoC0Lgg/IyOwxkJMTRDecCGjJ/02hKXlTBFGUZjf/aNZYT9rQPxweVxMigioizmoDB3DrAFDsgCK%2biBWgwQsiskRAY0JZw8iPjXSGSquQl5urhRz/6IORMkGI7QYoTB6uCtL3M9m0vCGorg3xjQY9eLWeABXRp143ulHT30aPa0FdDdl0N4Qx7PuAJ4NhPFiKIaHPG5ThKkkd%2bF175NV7sPr2mfxcxHakrDZd0iJs7Az993OPWkeV%2bk5p51EiH/nsG3Dyjph1OfYhuRLFO9hUIihlYlKjnQTCiEWPcsKMguzUM%2b%2bQl9ruZwTnBp8DDUh0bLRJI%2bjti4UUjY6IAclUcBkNGH37VtkOOr%2bH79D4MQPCFDL58UOEcKgqAHxWBTJbBFPZsMo6zXidPUUbs6EUd8ZBxENjbe1RIE0ZokAd8dDuDhoxInaSVwe96NpIwkVef%2bCyoTeqTWMdffg4MT/gsL0AEYXNHhdUQUHGd%2b8ygzF3AaUC5sYmlzG5LIGI9OrmNsgChUBZ3QPFqZFMvEnS2P2rVYpiXMBsRdnEglKTe1cNRQ99wmRL6RpF2ugW6rFwliF1A9FOkDUEbHzS5CfgthyS%2bETZwEMkM6mV1eQJzQKOSz2H6dTYvNEng4ISQeca1zCzelQyQE1QMcDG8YrcxRGb/BwLIzLfUacb1rGDWUIresprOmcmFjcgnLViDnFOPbP/R2yU4NkfTqMK2fhiBSxpndjelWP8QU%2bN7%2bJmTUDJpY0UFtDCOcAR/TNBwccpYBgefnAiITBCCVxgiEfp4m0KAYV73eJiBQQalFwgYRYLPFukVFlJAwKmBNOiKfTiPM44vXKHSKCBYrNidkUFWEqDU8gwhRwyBS4PRHEVRbEZ10%2btDcm0NmeR3tLGs2NUZSzON4Y88hnyoadqB/3wWfbgZfhHfAcUIe8hX89AKdWbPQ6YD8OYDeTETLs/a4P5mLou/l3TqaH3UTo1GUpyA5T4L0WYBHUL9VQWTXImR774%2bNw116CjUXRslYHI5WhZuGVXDkSQqi0S0TA4DIcrOpib6B6awsudtquUsFBbHeRDNmePITT64PFZkYDi%2bmCfhpmmwfXB804wyJ4qmEFFwmDZ7sNONtvwTFGxOlurSyIsjh26XG6YRknu83oZq1IqdwIqZxwzGqJCOt4tNKLDcJuassL7fCMLJKmKZKg6S045skIV63IGUXxKxXAvCWCnO6jIhg7XBwVDhATH2K%2bL8kU2Djzb5j/p7/CwvRLtNeUYWP6BfpbbrAGvJK7xQQPiFhKMKinGKqvr5c7P72EPKdGA8/5n%2bD/6lPY6YSjHSJnhr9F53oD7A4/bo7YJQx%2b/aALlwZdOE8YvNRPGLzTThjcxKU%2bGy7223GyfhnfPOzBKQGLkz4YyOzGe4cx1tKHupYG/PX0eXQap2GcnEDdk3IEtQ60VNZioKkDU70jWFPOIecMY9sbR9EdY0s4/GUYLO0CkbtBOLp2dTNMi6/lsZgoFaMulKIgQWL0xXXhNBdhUESAUHti7k9shRPy17nJKOjqgIv473A45Q6RUX5RlV0Ns9WFmwMGif2XeoWZcJEwKNueo3MDLvUIIz%2bgnaF1DDmQ3KTI2uSX10QQ0oTQyWjTql2IqsgItRQ4urhkhuGtINuIPI5ro0jQZEsyFNuMsC%2bBD/sExcqQoMJy6Zv5LVaA0j7me0AhYTF1eD3tGTzcJTJwuFOkl7VChzzFUO7wHYPU4W6QHGtChhogy2tiR2aGdWFvfRbbHjuiyRTGpuYwPDGLEdrwOImOckqeKyZL14aU09Ty0/JYQdEzND4JpdgYxfx2%2bwltvn06tYjY2CI8ah9s/ncwmJIw2/NweN7Q9mBz7cDO1uokArm2ZSuuGWzUJbZwSQ4LB4R8BumAqcEnMK42oBgag5%2bjHtqqw%2brkS8yNPMV26N8RQwlCWyKNbup/HXNRvmTBjlvMZqwwJXZ3tpHdoRjy2eUU9kHXE6SKO1icn8XoyDAaG%2boxOzuDiYkJLM1N4nb7AuoH57AwM4GZ6UnpnEvNFDQTY1jZtGBh04bJ%2bXXC4Cr6awkbX/2PyA82wJlkZSfF1lLkiEkQxcwqmruGoJhewdy6Hk6W/3D2LUIZcoP4GzrkYxikGkxT%2bDjVbXKLTNY/ijCpcYgm1gpdmtbDJbFhuUkyc%2biAtJTDFqJAVmK8GH2xCCqcIOYEgqEwnbGDbKGIYiyMt5Vnsb/AyClsY35%2bDqMKBfoGBjA9M4vxiUnMzEyjc3SGHZiR%2b4onacqpGbSNzPH%2bODtixjoL2ZrOgzUWs/XlLRQfHEN0bhqm8DYcgRx5wC6WtW46yo4VrQfrBh809hiv78CTOIA3sQ9b%2bA3MzsjHM0KHEyKEQTERIiZEpFl6pGNE2IvrsaOJEGl9kgiJCRHxGQL7RaiL%2bf%2bQeFeAbYT5L2BR7BUOR6LwBXiPjvESFUTnR0ZHSaDGMTQ8jMGhIQyyVY6NQsHrA4OD8towo2RCqeA9OkqxxgHaRZiQFrXvIULoc6rjcOoypOwZeIQZCL/iHi1oKcJrzMlrbl1aTpa49WnyndSHCZGjLTJCDC0qnsnNknFHF9YnWtBR0yRhUb9cTfLzmoqx/aMpMTEn2AqffRVanRHDw0Nyt7aHnbWT/DhPHoP7wllYL19kzgagMevwdd8ttK6NwGV3op8d7Ozqklvm%2b/r70dXdjX5GQ31DA1paW9Hb14ee3l5pNbV1aGdB3VCuwr8iNj5qsTWxRnncB1z%2bV7zpb6fgIcXesiKqZRqML0OjXEJAZcW2g1XfRjEkLYqiI4qCkQXU/DMtoGX1b8X04CN2tIZqkPk81Q1lezupcS1Wxp%2bTBT47nBTt%2btmkaMC1jg2VmjBYJ7fE%2bzjyDooe991b8H77JeyN9fAFQ3KHyG87zuPpHNmmw80RHZIdFS9qCmeIV/SEA15WVqK1rU06RTiho7MTL16%2bRGdvNzYn12Gc2cDioBIb5AAbzc3At/8J77pewaYh0mzokTB5MNU9jPkBJVzM/V1vAkUXO%2b6OynbbIxzyCzAoaK0I96Op8QDDX6wSyzXAj6bC5RS53EzZJWeSBRHy%2bUOIREqvygjV52HrDQbhJhT6iAICIsVbqfOGdRgcZvmMCG/RyaNWjLRoRegLE50XJpwyNDSM7v4ezA0vI6qh4NKnEDeKNo3gjA7BdR/sa0FEdCmEyQpjvC7uh7UJBNQxBJkmQdnSNHH4N2LwfAyDQgsIaBPLYnEH4ZCqz7NYBc8SSY9nSO4cEztHorLtO5whorn7kIoYUdzeYx2IScUn9gJkQvwybc2IdHciNkL1yGti0rQoZo5YEEWtmJkVhW8CY0plqdixFkxNT8tzcX1icvLQpuS1iQklppf0MHsJb74ijO4CHC52spPyfMMIZwxQs%2bgZHWno7Blams/twBHcgz3wwZw8N3l2YXb8AgwOd96T%2bwC34xOw9D/ByPG/x8LwIwx1iqXxOxhsvw39St0hJA5LGMzEzBRAuxjkqIlXVHYPDpB2OeE//gN8n3%2bCgNgreLhDRKXaRCAQlEgxO8fKPj6B5pYWdnyGDpjA3Pw82js6ZVRMz8zQMSWHtLS2YZJMb3nLhtk1I3qHx7HKHE7aHMAn/wHbfdWwxYjzdg/MnjhaCH9D4/MwkgHG8kAo/UbCXyi9jwhb75/BICNAdEZsmY%2bzwgvBEzV0wTL6GBGmhp8p4SUDFKkh5gpLJuYFepGJGpHLFyl4QvLN0ywJj3hBQuwWjbS3Ik%2bClD38TYJsPk2ILEXA7Byxf2oC45PjmCTej3OERTshzqcmZDsxNS6fkTY5hpkVA3SOHLTWGGyhN3C6qCzrnpLvb2GLsOgMMTr8OzC6snREXpqTkCeiwBHchZ0mnrH49j5EQJJha2RVntgyYsFMGam1QKkyYE5nINbqMaOzYc7gkDbDe5NbJkyqSza%2baYTabEOEnRfhL1SfyHUfKbGPesCn1cBPQuQ5XB43aVxwObxwO30Ya3ZjtC6A8aYwRuq8GK51YaTeC0WTH6Nsh%2btc8pqi0U/zYaiGNaTTixjVXMJaQJyqL2YpwLfsgn9LLHcTAtmGmP9Jqj5h4tkQ60WE98SxsKgpC68qDrdJ1AA6IJWIQWPzo3HRjyuVvXg1pkPzapxO2YDVNoOHncu4%2bnoIDzoW0LzkR/taBG2rYbZhNK%2bEsWwkDbVQ6TU2yjk/Lyu%2bnQzQRQTwHf8e1lPH4QkHoCOLu/XpLPqrN1kUPRh7Rdl7N4CXZasYfbGDwWcZDD3Lo%2b4zEp9TGgy/KEjruuJC7SdKdN2KQtOTg3V%2bDZtjsxjrGsHsq1fA8b8Ahluhbm6B4sx3iBo96KluwkBdG8bb%2b7GhmMU6ydVk5yAULT1YG53Grl3sEDncIJFiHmht1OIrXmryWTRM6mUn17YWsKJZQcWgCvcaR/C8ZwFtSy50rwfRteZnG0D7qh%2br/A%2btZqPMZ7H8LfYEiirvqnkNN7mAY0wBd4AqTm1F%2bafT/GIlB4y/SqPvQRgt5SYoK/IYeZbEWEUOHae20HfNKXeNKCqyGLjlR%2bfJDQw%2bTEHdlYFtUYdN5Qp5igrq7iHsn/iv2BvohHFkCltNzUhaopjoVGCya0xyBd30JpaH57CuWJLthnIZOTPRwXy4LiAcoLF60bkWwDBDpY9h1LniQT/ZlTBxPkA4Ea3o/JH1bATRwb9ZM3oRjYSQJtyJN9HFKnAgEkGAjM9PR4gdIiItQqEAKXcAEbZOpx9tLUE0NSbQ3pZFY30EDfU8b4iivT2F1pYEz0O8HkJzM5/pyKK2Lo7ZXhsOHDa8cbnxjmkFrx8Hmi1s6w3EeA%2b2nW4UTBa89XjxjrbPwdi1O/DGKTZNOeXxjk1skjKQB9hLm6SSTAG9IyA72TJnkZ0fY249qu7F/YpG9K250TJvR/eaD8PMp2F9UrYjtH4N1VcgjZ3tAswWi%2bQBRaEAvezwvdsIP32EcPUrFN/sUjBl8KhOj3lGTiZfwIMZPy6POHCxV4ObkwHcULrZ%2bnGi34XTgzye8OLGuA/XFC5KYjUujoUwuqXBXnwNqbAKYccC9cck7msbsBWaAzJGapR17KX1CDrmEXEvIu5bRTq4jpBzQV5/VzDjbYEOymk/bJMTDjA4g3KEH7eNo3XOilH7G9TeLceVz3%2bHmgkDHrWOo2pwDYN0UskJJRMOsFJlxUiCOjq7YDQYsEMEyJAOB69dhu/rzxF6XYW9d5Sw3jh%2b8/006rvMFEcFPJmN4EL7Fn58NoC7U1HcUnhwSxnA5y0OfN/lxh2lD7cnwrjUocbx54O4MhbDlM5CxjeKWbLUicEm1Pe%2bxF9MXkWXYwCefBgmnwn7GTM0G2NQrQxDqxrjMQVXdzUKSSOwz6jZ9QBFKx1gPHJAnKTBj36ypRFDGsO6JI9jUOrjGFr3YEDD8FeF2Pn4z2xIpAX/Rk/cLeazcjJU/AZBimiQZRSkiQjRuVnk9g9Kv0yTzmB0NQqzO4VYMo2HYoTH2MnxAMrHvLg56pLtbaUwH88ZBQq3vHZ3wo%2byEaboihqIb2E3ytFMmfAmYcCSRYmwnxohbsN2yoz9qA57McrykJribhM5nwp5/ybexMQWWT324wbsRTYR9hhKDjiqAR2rfpnbnas%2bdKz4MbTpRu%2byBe3LXvTQAV3M9y6Gb/dG6bhUBANYMbgR9PvgdntkrrvEMhilsZsM0C0WTKen5FtjXpKj3NIQEsYNsjV2eNCMC31WXJJmYZibZHu%2bt2RiVuhSr7l0rceM07zWOWLBrsmHgkVsivYizf97a2sNAUbGG14PbpgQpyYQ9zK8lzd5aT5pWYOnZCzaGQ3rlNlTEkMSBRgBLYtunLv3GpUDy2hXpWBWDUA/9ACP2qZwraoH1yq7cKt2CK9Gt%2biQiHRCGx2wxg%2b3mAwULJXyvWCxNGYXqpAwGPjuK9gJg45IDD7VMnDyvyBfdxN6dxDlwzYcq13El3da5ZzgBbk2aMU/VRvxhwYTyvrMrA9mHO%2b04L9V6PFDpwkDrBFC6Y33MKxrOlBVW4P/bfYa2rSTMC2aoF83w7dlx3BLHya6RqlKDRRDaeTJkwuuRMncCeSt8UMx9BEKtK34UKvUsRDa0bERwSDV1ujoGJrmbLLTlUPreK1Qo5n3u0SkEArbGCnLejccNitUm5uwsBCK5TEnK7RrcADOG1fhoiCye8VbZFoU7n2LxFADdESBGwMmOSt8pnlDzgpLB3CUT3WacYZ14gIjQti5HgtOdphxosuEbhbE6IYddjJC35oFuuUtnFuowax2DeZ5E8J6jrQ5BMuCBpZ5NUJbTuSp/LKWMHLWCC0q1wWzlMPvX5g44gEitEfJrvrVAu6YDnRCD1XTIGvCCOFxlCxqQBND32YEvUyJXlWYjqDMpSfFZ%2bRZ2OQOEfF6jNghIiZGxCszhEaxQ0S2kbh8d9jlC%2bHOiA1XR5jnLHxXBu24OmDF1SEHbo06cXPEiauDNmnXhx24q3DiwhAdz0h5q8nhjaGIt8YdvDPtYHsthQIjdkfNdiOOwlYKB8Zt7Ony2NFkpW1TQeZUrE28n2WbWY5/eGXmCAVEEazomUPbgo2dLWJYtYInHR1oXXATAVZJkuYwwOI4LAqlgEEDUYDS0xLMUOllMb%2bwKGWv3CHCKAicPYXg5QsI3inH9ts3iAVTeHVuHctDLqSLRIGZEC4zzM82LuLOZLhUACcC%2bK7TheM9HtwZ97NAkp2O%2bvFpM%2bFS4YNiIYqYmhFGQbQ5vYyNviUsfr%2bC8IAHdgMpNKM1wpE1zG7AwfD3q%2b1QT65APbWKAtPgIJjDfqC0WfL9S1PvYZCde9JGdTZjgsKyjb7ZBdzp6mD4a3GvYQTXWQPEyAukGBJRcQSDIXLzWFSqORH%2b22KHCEc5%2bvK5XB%2bMDw1i5x3VmCeBa7%2bdwkSTBelt4YAwLnbpcOr1BO5MRegAD8rHSw442edh532ERcEV/BIaL4z6oOTI2Rc2sURqOz9KoVQ/ionfz8HXZscWi9/cKsmNxYuZfgXWqQbFmsB0n0K%2bPSqWxt%2bKl6fDf/LaXOoQBgUPUFJAiM71bYbJAlMYpFPEeWnE0%2b/hT5iIht5N8nNnBPlcRv4IU0Fuh40ixTZJ6IsYDcgcvJWrxclUGkZLGsFQBsFoHPeVLsKgX47%2bDULgDYb6DULfXSVHn3aDaSCsnFD4cNyDMt7rVZDhGZgCliJg35UvUOdHWeBWk9hhRBYJ2eKFyX1zAbvGrHxRUhwLEy9PihenxU4R8ZbZ%2bxcnj4pgO4tg/aRBsr4OQtytG69Q073M4yBaF11oWXDKAtgwbZYmILNUBF3weVxQqzVyKtzJvHfqtHC%2beglXUwMcLU1wiCJoJQHqf4nYyjiZJ2FwgOHfZZT7A46K4EUWwRMdJpxkISwtkpSK4I9tJrk01kkn5dT84poA/MtMhVXC9MYk9BoTtk0puGb18CyY4F9zIqLyILrpRYDHwjL6CGFQFMAo0uqPdoiIFNDZA2icteHM7ZdS9Ayy4D08XY4vPytH7ZSJ8Ecm9qITl562sO3AQ0Jj31YMrXTAmtkHs1Ev5/ZmZ2Y%2b7BChEgx8%2bancIeLgiPtVS8APf4Fi9RWSpxBh0F6CwbttKBMw2FOCwX8mDH76HgbpEMLgr18YJAwOTvuhVs5D0TVAUdWOqrrX%2bMuZ82g1TMA1v4mFgRFKXyd6G9qgaO%2bTL02Ptvdic3IRCYsPO2J%2b8E%2bXxo4ioHXJI0e6nW3nWhDtLIa1o2pJkBrohMYZqzQx%2bh2MFskDDiPA7XRQOtukEhQ/kuAiErhWluGgDhB7g8RGSREByca7ZIfDjACfhEGxR%2bh8l0HC3xEMigVR2R7C4AVJigiPjIAOpkRK7Udwy4OkLgSv2oXnK6NY1xjgmdEhaQwjTYjzid0hG4zMdYoxFYmayoWkPoSMiaNPS338%2bnypBviYzxGZ6yK3RQ1onXNIgSTyfkBD%2bqsptcL6WS/6tyLoJiFSO4ix4r2gXK60Q0T8BKf4FSq9jhXZhBgdEhM7RMSPKnjYAfHmaJg1QO4QYeFjobs%2b7MR1wtyNEZekxKIWCPgT18VxOe0yj2uJCh77HryeAzp6Bw7WgijFm5to5HC%2bISHLw8zodTnEDpE38LoPiEx7cteIjQLPSpgXrVGfh8V6uDwu1SBRQOC9QIF6pQZT/A/KLt7HF5%2bcQNuSGy/7l/GgWSk7fySEjmDQGsoim05iYHCotENEzAmKt8bEJimxS6TsPPLvgG2fEzj/93jX9wLR4j6ezoYkCpysGnuPAmK7zGes%2bN91ut/D4KVhH35ba8OlEZK1jRTWdQ5MLKiwxg5EHR68Pf4/IzvaCkf6HSaWxaQptczYHHqIFA0d/Zha1iCce4dA6g0C6X2EMgdwxz/aIPGxGqxj57tW3BimJwfHV3DzyjM0z9PzSjUqehclERo54gHvYTCLDENpS60uyeHD/YKJvh4EL55DZotihIKoGPbh7bV/wYGivuSAmSAu9zPUW9dwm0hwizxAwOCZfg8uDvvew%2bA1BSVyr5t8wIeW9RQ2DF7ZKUMgj5AriL2T/xmZiX6oPFlsWYJwRooYX1TLHSGjZLMLmxZ2/C18yX1pgfQBnLGPHHDEBEUKCLYnJK8QOqOmLCbsRXkumOCwPi3DXjBBYaUUCGOTeCocUCxuyxQQP5cTZbgLC5MSx%2bkQ4ZhYPIFkIMgUiMEtdogo7HKHSPl4ENfIAAXrE61whIDFEhO04zrT4g4V4iXeq%2bO9oG0XQbHzQ6SCdRt%2bRqVLn4GD8OgxF%2bE05hB0cqRpovXzeQ9TxWHIlozwaCEztFkOl8ZkEaQDhBZ4ObBKvr/FaIjgVuMcTt3tkdBY0beMl4PrUhmKmSNhpSIYOCyCdjmnX9oh4oN9g0zs2mW479%2bB7eE9uUPEbDOhdvk15gxTMFvdpR0i7VqcaliWMCiKoWiP18zjLK/LYkgVeLZThxO8drKntEMkoXLCs26FcWId65MbeDCrwdqWC7vk%2bX6VGVEqPR3vGaZUcC4ZSJx0sM1rWQBDyFuoBagJsoTE4M%2b0wKEavP6yg2pwFX0kCy9edeLy6bt43r8q4e/CkyZZD4RmECghBNGRGjQRBhsam%2bTPX4kdIg6tFp5L5%2bW6gP3JQ3iD4dJviAx%2bjY61%2btIOEarBEw0r%2bO7pENWgU%2b4QETtCvrzXgTOtJW5w6XCHyLeP%2bnCq14b%2bKR%2b0E4tQ9gxhgjBX19yFvxmdRgfDPGmww7mpQZA1QsJfRx%2bm%2bsgUe4Yx1NItYXCbMCgYYf6XYFAQoR6GdPdGUEaDgiRCQe91rpeudaz6pAL8eQSUYNDvdcsVYDH1LWDQzZD3iG2xYwp4Y3G5O8zldmHSsgitUw%2bLzS1h8EKv6KRN4r3gAaItG2DB67dKCLx4OEdwZcCO04yITqbBtlr8CkwM28YUMro4NQgJ0UYASVUAWV7PaqLIifbQcnwmrYlI8pPRiL8lFFLoBYzvidAhFRbUVqq8IIZY7CpnbKhe9PA4LidARQEU9UC08pjWSzKkc8dQzOfkT1YLNZgSsz9ieXxyApHFBTK/ZSTF7hHWhL21Wey6bQgkMqS3jDjCoMj3m4oS9RXtlWE3VaJHwqGYFbrBZ64MuXGJbT%2bL4gHr0a4lh5xGdCwGDXlKhO0b1qwEqXmW37GgT8pN09vGNIqGkm3LtnRNvEb3frN0CQVCktndqe1H9cgGpoihJypq8ePjWrRQYT0iPJZX90suMPxnKJCDWFsQc4Jih4iEQbut9BsiX/wBfipCAYNFjxXvjv8V3rY/%2bACDnVqcfDX%2bMxj8pMmBbzpc72FQIMI/VrNGjPgwTjFkIwTOj05B2daDhtYe/Foxg0E9I4NiS0f9HzG6GP79WFJMY2NyASqywDfBNA7CH/2GiO8jMfRBDsfQNm9Dj0SAPHpmtlA3sCAd075IHTBrkSP/ngccOkDI4XxW/Aq1V0ZAntFQ3N1DemVJzgrnA3752lwxHsHbF6dxsDiIaOENnpDWXiO5udpnlPsAj2Dw8ohPQt8tpU%2bamC8ooxPKxoTcJXRpPPCobIix2JnXLLg%2bo8ayzoeMOYysI4FtZwJeFsnAlkO2Ea0be540FWBJBb7xZbHr%2bEgOl2DQK4ubgDvB8sTCh5jsECEumOEgCc8QOyxSQEBgz0ZIpksnn1mnFoiT3YnQF%2bsCPp%2bPik%2b8LuNB0O0mBAblngGxa8QTjCMcjcHh4eiOWBnaZH1UeFeY91fICa4Q%2bm5QIwhWqbFuSwAAIABJREFUKM/FJAmh8NaIHed5r5PF8kBDPW8oyLdCxcTIzmoIhQ3m%2bmZS/n6I%2bI0Q%2bcYo2Z6wHW1W/r6IfGtUtD/7DZGPZoSEFnjQPIaaMTU6%2bfDcQjdDbhIVQ1t43DGNJ11zuNekRO2Ens4KH06JlSZFnXarXMsXvyPoFjtEmPfO4z/IvYJWooE76IdBbcHTY3NQNKtJQkhxB6041bKJY6%2bmZPW/0E1NQAH0Sb0BXzYdbpWjneoy47ev9ThG5dijZLFdNcJI4TM7NIv19m4cXP4X7Ay0I0ciZFlcRUBtw%2bLgFFaGZ7A1sQzzgho5GyW7g9XfUXp/OGcWMPgRCggYFIzvfpMC1eQBnfTmwuww%2bvtb8XxYjfukwXcaRuWkaN2E4WeToqsmL9WggQ7olz%2bc6Cb5cVIWu4n/nm%2b%2bgKO1pbQ2qLLg4j9OoLtCBRvl8w2O6MmmdfzwUolLAw46QOC%2bA181WvF9C5Ggh%2bjQY8eZTgc%2brbPgWAdhcMIP08wa5gfHMTc6h%2bWmJuCb/4j9riqSIS%2b8mwZqEBeme0cx2z%2bG2QEl1FPLcqOk2CQpXpwWMJiz/QIMimWuQeK/YIRiarx1OUBu4JLoIERRvxBB6vj7KfIP0%2bIehDnCRz/K6ibk%2bdj6g1RrGg0CZIfi5yt9fvIFnQsepxdWl0dOi18ivF0ZdpWmxgfUrPTLuKbcwFXlOrn/srQyxRpuTqjwE%2b91jOixp07LyY09owhxFjbS9yIJWnw9goL4pbjNOHYOf0FOmPjFKfnitCpaajdjSK1%2b9PL0%2b6UxdrCdmNq16mWHk5gk45qYM8ra0DpvRxvviQIpCqGcFdKVFkaMviR2inn5IyniXQGxQyQtXp1rqEOkqwNRaoLctlgwSWO21w67Nox4JotHkz7SXLd8deaWIoybC5MotzzFudU7uLT1AOWGF7ihr8A1/TOcXb6FS8ZHGFAp2ak0GV0CMZUPng0HWjYXSMRcOLCR5i7bkTUy1E1xxNUBaWIiZMeWxq4tUzJ7RkJh6OjV2WT8CAajKH/VjdpRFYYsO9iYncJCTSWZIMVK7QCedc8RDidRzxqgoGYQa4Qf5gQjEgYNej123uwjzRH3nzwG7x9%2bh8Dd29gBObkjjnN/N4mh16b3c4IXOjU4UaXAnckkbixM4Za9At8pz%2bHc%2bl3cMlfhpqkSZVsP8a3iDMrMTzFmnIFpWoWZoTHM9SrQ2t2Gv5w%2bi17rDJYVCyh/WCXnBI9%2bQU7sFd6YmMdeMIW3kZyEwiMYDH8MgyICRHiLJbABMi2RCmObLoytm%2bW8n4gKEfKCEAmUOFok7dckYPKnJBESEChUoNgaWxC/SO9wINrbLZfMcuJtkhTFVZMdNuqMRC6HR1N%2bXFcI4eMkBEZwc3EaN8xPcO2/l/ftP21lW5r3b%2bqfRzMtTUstjUZzR63WVfe0pmc0t7tvd3VV163UTW5SSSVFqkilQpIiD0gCBEiA8DDYBhu/sA0YGxs/wDZ%2bv40x7/cbAvl6rXVsQlIZzS8jtUbzw9Z5hvjss/da31r7W98JN9CDP6O3TyOARsH3ETqm/Zt0bShgwR6NvNVZerOsJ0porsVvRSSegVvnR4nQK7s4TnyshsuSHNmKLuMgvYlDOn%2bYoW2WRkD8Qvn8xeVxxgL8oNzaR2LoGM3IOgHbBR4hPP8ZFlfv6WUjSDZggXx9kdwfu0CeCsVcDkWfF0UKkYvBGTpXpGtFhOZmkStnkMyQz9fFBet/Ry7vpjqLGxY9rvvv0vB/hBv%2bh7g%2bdV8a79%2bkc1d8P%2bLFpB6ZBFNjjpDJHCEV38XiRBIZ6tRc/i2S8R1ECe2lOAHCLbWPdPoACbovRkgxSpEgb0OhLSQSleLpi27w1pNOPB/yQE1DWzU4jM/%2b/nPcf2PH3XY97rQOSWKU8UFfZZ2QvcAkucEi4fyhIR2cE06hx/HSWI48ACdFkpcvCU/QF53Bb7qvo2lCRT%2bqSMFQEl9TMPRZ/QBuagv4xjSI6zM/4fOBG7g8egfXfQ/wjfc%2brjh%2bxBf913HZW4uWoBnOqRTM41MYsLphUfUTuvxTbOg6MZ1fg9U2jlh%2bVSpKBobt6FDp0U1ThatMMgvMF9pDbmkPidKF4mmlAyganMihvscm4a%2bKLKZu3I3auno80wXwVONCg9ZdCYfLH3bAbB4F8uu8NMaKzRz4ZFmXnIxg9vJXyNitKFS0xH478D3FF/0UDc7JatBXXUF8QaHuNfUcLpuHcGXmB/yLrQaXJmtx2f8TLvvu4mvPHXxprcHv/TV4HjLC6aegyh2EfTqNyVEnjq/%2bV6yYNeg2uGB3zpBR3oKJfL/VPQv9qBcaiwvOYAaxuU2kFmlEUCdE5mhEfNgBRQlvh2mIaCpIsG%2bKhj6vEXJeMKwgQZ4i1WmgMETKggSXhSS1fo4E51lbnPOCjArJPQo6pJFRmJ8jRLiAbH4OzQYfGvQBvDCF0DAYwBOTHk%2bczXjm7kDj5Cs8Hn%2bJJ45WNDjb8dzTgfqJF%2bgbs6MUO5Ekx1zySBIgeRr%2bWbJZ8el15GL7yJLr42TIPHOF0ydYyLylew%2bRofPp0CZtafhPU2dUucIXGSJt5hlyeUnoyc8OTttQ33KX4oAMuikWeG2P4rUtSp1Sfs8jqBjB48N9RKIxCYern%2bpYXlqSkcDVYqwgIQxy6hjmCnCbGB%2bFbcQE3aAaY/YRWC0WOOwO6LV6mPQmjFpHYR%2bheyx2OWe12hAbn8U2CyWHilgLF7AWWUXd4xB8FFdgfgdLhBLXKS6IUxxTcMcw70tTS6HkTZEBXMNbQotvC1s4Jre4WDWC4gZzC5ILeNhpFIbIMAVDj5pv4emjWrQZwnhI0eAPL/pR99ogQRGny4QhEmKKzJbgAJ/PT0M7Ix1wcnyMMIEgrhc45bXCyscaQuFZkdjl4qrxcQdGRmzoI/dptyt0%2bbGxcbx%2b3QEdEyXtTJm3C4OUdcktNisSnpjAYC6ZWY6mUYqu4j/9M6FLbQa7uTzKoShWaESa%2b3WiKDk2ZIZJNQgnRY87OQrGlpXi6Y%2biwdWKG6xEevRmedj3MQp0Fgn0rMvymEyFYIUdwlPinCFCERi5Oc4JCkOEi6RZPO34BLvkDjkSlDoCeugjuo8Zo5wmHxm3wWCnHzg2AiNth61GGG10PGqBmc7xscFmkmumUfLrdgMC9oAsfe1F13GS3KHtJtxkQEturgtexGFiG4fxLbnG24PYpmyP6DzvSyMXyOjwPB9wkSHS48pL4%2bzPgCuDPndOFkHe0BTomSzQflHZkjG8mBEq5rPkXuIKN4BpcrxERhggSygwazLIclmGjKPOG0EglkEiG0ftVAOue%2b7jW/cD3Jx6iG8nH%2bDW1M/4ZuInXHfV4aabzlHja7em6nHF%2bxNU4zocsDJkZA3r/jIWvSW4p%2bj/D8zjkF7eio8iU/881uga1xbxdtVHmIGzQZxJ%2blRGiJMZHAx1ODK4eu8FnvY7oKFebvmmEXf%2b8BBPdFOoeabCj2063H7ej9s0Fe626SlUXpYO8ESLyKQSaGtrh3VkBKXFJWQ8HgmESr/7LVJXL2OOQmJ/NInftI%2bhaTSEdD6BmsATXBr/Af/cfw3fBO7jKkHgGzM/439qv8AXo98SJniAa746XHbcwWc9V/GVv5ZCcAOiVh8hQTNsfYN41TWAvzCOQ00R4EaUPJHNhpVYAVZCgJwPZCSoautCx7MWLEayOCLYvldY/mVOkHFAJ7nBZsO0LID2ceLTFMQrlRuvxlOyHMZh8EtLGC3mkESEkhS9kBXmxdFZgsLMERCGiMmIbN1dUZdk3lAsyWlwH7RTUaSyMdR4H%2bPK5F1cHrtD0LcO19z3ZPsHZ61y7KHjqTrqmHv4o%2bMuviIcoHLrsEijMuUKozBJYfFkDPfs03ASal30JbE4k8V2fBEZVwR5d1xa2jmLsNWLjUgZu8kVYYlwVng%2b/lE%2bgI0grwuIq6Nh00c%2bvse/JOsBOoG%2bmzBEK8avsnymoo7idQH%2bG9vbO2LdZV2AGSLUCQs0HZbJ8nMyhF3kejGLTTKCuYUi7s48x63QI3wfbcAtQnrf%2banN0DFB4ZrgE3wXeIRbgXp8F3wssPhqsA6qCT3OZg5ERotZIKeRPay5VrDtXcX%2bDNkZmh7b/nW5JkmRsCKndRTaES1hZofssNyW%2byOGCC%2bNMR2u/o0ZHdZZ6AhGeixu9N2pxUtyjU06r/AEH/Xa0Urhp%2bIF1i%2bkxLak8IlL5w%2bZFpcmC33lEso3roo6xO7pO%2bzTQ5/d/S1OzV1YPtxFfbyVHvARro8qgc8P4Ub8lGzGl7YbEhHejTfhTvQ5akKP8bnpKm7GHmM4TEM8UEDWF4PPPA7LwBi%2bqHHDbi7gXZk6P7aApUiRrk1gdtyPuQDBZM8szggFnpQUSd235W0c5y8yRM7d4IK4wa7RGIYSB/CNTmLq8UM00oP/RPP/4ZsR1DT24KVxGkbC1rrwhx3gIvgbJ%2bN3RC5wl0bCctNzlL78HOsWE3bP3uGglMO763%2bBM%2b0LLB/t4UGyBTeCP%2bOyrRbfJxtxO/IUPySf4StXDb4N/4zv443SeP%2bSswY3Uo8IqNmQc0ZEQ8Slt0DfZ8V/u0zYQZfFCkWBC9ESttILmDTYERz1IOkOIeUJ4d0idQD9Tn54jghPCp9kiKwIRVZhiCxBF9ugsHhb0KGRggxuJnpwQ3TrnDXCOUNhiGxvCjWGawJ4qLN%2bCBMmV%2bMU%2bpJ7lE/2cfFkfAY75RLmVxfR6H%2bFB4EWPA6146GvBQ%2bmmvHA14z66Vb8PP2SjpvwwNuEh366Z6YdP/oboZ8YwWloH8c0Vc8I3Z0SEizaF7FGU2CX3PVJRU77NLEvrJATwjPcjiIKW0QYInQfE6Z%2bwRDpJtfWRkauYyyJPsL5dZ99j4Yf2tDlLqBpOCAUuVbLrBjANooX2mi/cyIvRjCXScFNlp9jgUxFLYJBUZxZ42QUUxXuANclpLM5JBMJ6LQ6qPs16O3qhVatxYBqgLaD6Ovpg6pXBQ1dU/eroRnQovdNr1SYefSTWJ9eEIZIwZlAfCJGvyGC2MwcVoIL8BOK3QixgkTmvJW9FAg5CCHS%2bZ1ohSES/IAfsIJwhhkiadz4uR0vaL6ryPh1fFODur/5J9Sr3fi6tlGWx2qe9aG2RSv5wUt0rtUah4/cCbtBrhfgL7swHGbsH/D5YBweRpmXyqgjuIjCMWqXpAkHTLphPTq73%2bBJw1NohwahGujHoG4ITxsb0NHVCc2gFmotdZCqT74a06tWERDyIUhRIC%2bNGTr70PKqB7%2bm4a4NJjFumUSH3okNepmsLW7s1cqymJXaUJcKawlFXv8XGiIXGSJdhAV4/a%2bHcwPeArot07JmyKOCz3fSdWaRMGh6PZpAl6soI6CQoxg/mZI3XQVDefIGufmykiVm1giryOSLIr3PhErdoE7een/fgDIC6G3zVtXXDw1t1QMaevvKKJD7BgZoBLgF6JS9OaxNU0f7CnjtJBfsL4m0/nqwLIox5aksFioKMsvUWFlGOEIVntAHHKGLLDExbISY2MWpfUoGSFdZCNFVIsIhSY4uCxQeqLDE9nYUfSDG/MIGYQ0Rvw9LPi8Bk6jw8sUGzE5hu5RHaXUJTwLtqJumOR56iTp/E%2bq8L2T7INCM%2b4HKse8F7TfjIdmK2sBT6CYsOCMbcJJgFhgnRbfwzuLH8dQc9sLb8qmN84QpNbYHhxQF8v5RZEc%2bwcG24AOWWDUa5Id7qhpFuyUIfeJQCpnd2jY06zwUBBlleYzzBW8m0oobZGNJrjO1tIv5UhHawSERU2MNkSpDpPQvn6F0zhDJCEPkTPOc3OAeHiZfSrbnsvkH1JL1vz37FD%2bmm/CP5su47KnFnQS5xtgz3CRP8ff6r3AjXk9RqA1FAjezjik4LU64Ozvw7st/Dwy9QorefsAWxnZ2EQHWGKCAKDzulWYdGIaxR0teIQisHshK0QdLYwoOWMVrwgD9HgqAqLdGPUGM2%2b0U/SXRpPfipWlaskW9k3nxBEq9wJpSL7C8KG6Qa4I56uM84NqQFuWab7EdDlFQdIqDxRLO6n6HM0u3dMD9RAu%2bna3Htcl7uE1usCb6FLcTDbjiu4tb0ce4HW%2bQdpPuueq/h%2bupeugjVpQ9aUQcPkScYWTMduDmX%2bGdgcXftikaLMniB39eJzIeELZo3hdH3DkDv8WFxRC54kUCSLnNj5fGFCQ4TA82JKvBNPzJZfRNK8Of/T6/9YtT5JwhkuQPJmycM0Q48cF6YecMkd09BR2urmFpriCkyQK5whbXGzS42tHk7UKjsx0NjjZJfjS7X%2bHFZDue8vFEG565XqHV/Rr1rmaKFm04De7LkD7jL00kjrDtKcty2EGIosBZikKn13EWP8QZjeKqvP5hmNcIdmRVeHuakODUaiUY%2bogt3jTsJ%2bQXRK%2bXIPDIMLQ6NVosETzqG0PjoOcDhgg35gny0hjT5Zkh4vN6kZvjMtYpZGjo5wgFpn78AenSPPKzQew%2buoQVfQe5xzyGNTpo%2bjToau/C0MAQNCothskNNncZ0NkzDF2/FoP97B51aOwwQ61Sw2vwoOzLouRLITw6g%2bjQCN7e/QJHRs4PLGFMa8G8P4PQyBSmTZN0Xxq7qRWJD6SxfgizxyMfxwJkBNkL3GlW4/mgGyp68yZdHwLOPjw3BFHbrCE32ClJUWVdcP48GPIlSuTyvGhqbsb42BjmyPJnydUVbl6X5fFM4xOlXiDA9QJ/jt32O0gU5jBErq9fPYCXba1QD2qgon3dkBrftZvRQB0wODhAblCNLvUQrrVa0T1AbtDmRcjmwahmGJPkDl3trcDv/gQYaIHO7sBLOl6NsqiqWirfZx1eHM9vyEeWeElsL7/yv3eD3fJ2S0rFCDV%2bWOYG8Dogp8U5/heWiKd03njUuMJZYYhwOpwrRjIMevjjjcwKIb9foOmQqQCihXED5sN%2bJNIZesBBKZjm4mgplSc3x1tOkQ1q35fOa2l/eEiDPk0/JnUuGu4rIoa2Q4hum0DR4ZAeewSPg84UARwKdck77VDbIq%2b2QVNV8gAUvPGxNDre8H7MEMmUJBjipXCe22IQVXb0jEYlIcrznptkhSqtujQWKXJGSIkE2QZsMWGSP91pMmDZNoJVxzg2yQ7skJ3YmzRiPxfH2iYHT3YpjuaUV3XLQMo0YoPZapMCaml0zjhih8lqxox1muY/zefkNnYjq8ICyb0pY925hrepLcx58tiPrkvSg5Mmh3ElC8QZpGpGiM/xl2Y%2bYogoBIkHHQa0Gv3QRfdhffYC9p5eNOh8uPWkSxgivCokdPkKNtBUeIJMl%2b%2bme/lji8fsBgn4CEPk7/6HSGntMEMknwB%2b/x9x1vsQ6/uHIqHByhFt7e1SSW6mh3WO23C/z4mXgw5CjVapKjeMjOJW1yRtLUh4oki4yDvpLMgGo%2bTTV2H5jRVzXQTEZkMYNhtlaUzXPQA9oUFGgtqOXqhf92AruyC6wp/ICVY6gB6uayyBAS%2bNBor9Of/uckVomBeEQMmLo/zWpW5QgiElK8x1g3s7W0hQKMyBEAdEe1w1RnZhkSLC3aVF7LCUFoGfk9YaHLuNWN/dlzJb/i4gdwJXil/UENFb7LDZuANoZFhpJA5TB9ksiDrChACL9KYTOMqt45De7Mx3IayayliLFYU1cphew7w3hcVAFkW6LzMRJsOZlvOneSUrfHIxK3yRIVKtHOWSmVfj9OBjBYUOE2UXuCFlMswOGfB/xBBZXpLUN0d9jPnZFZZzWcynU1ioxAayVsCukBovl/PXIfnhuRO4XJ5twiBtjQY9hilOYGDFQgp8j8nImiIaWExTKCSPUcoeI0vRXop%2bV26aoPYs/U2KDnNMiKRIscQ84fQR5qjN8xoBHWeiOzRKNpGmZ4wFL6wLXFwa49VfdoNdrjk0PHmJ2tuPZWmsrsOEenKF7AaVgqn3REnmByQTMTJYGkw4HJWlMReyhAILVy4hde2K6AtySS1/XzQajUhswA/HuiGsIcLGj/f5XFv7K5HQqGqIyD2tbWQkVTCO%2beEMFUQdbjxcQD6ew9Ef/wtWTBo4IzmMOlwIZZcxYHTARiBojEAQrxINWicxk14ib3SA9MLuJ1aGKknRB11myfgwDhgYHEbL8xbqgFGKADVSI8AZ4fMO8CodoBRPxyhc7VektGgEZLhusP4hCp//IzL9fVIwUaBgiBXnuKii2gH8gK8piuSHrWqIsKAC64ZUJTS4Azo6O6UDLI5pjHrjGDI7EMiQa42lcPrlf8CG/g0mo0WMu6YQK5BxNo2LfJ6JEKHe5pY2Sx2TXz6QtcH4x2uD1bQ4rw4xIuyj4KKfIr1%2bcnPMEJEcoEyNeYVAdc4QUYDQ4sK8BEHMEBFJrYVFzLFcDn9hYntHIsFidWrwCKEO4KEt%2biCV7bleSEVSh4%2brmiI6/TBhggEYjVPU2QcijJii4Z6maTDvSCFNbjrOx8kDxGmoZ2jLFPk0T4nUodDn%2bXyUgqM4TZswTYFE4qOlMWaCMQ9AaHLJPTy%2b142W12MYjGygj948F09XM0H6ylZZGiPXsr8nX6dmI8jfENnm0rmWJix1tGNF1YOdiry%2baIzsKC6TJTTY/bGeEKNIdnlsDPmY960VISXxBHTOTC41PBbCPgunJ8ivzy6iEMjgpd%2bK2Vga77K7mJuKYS1UxBahwrUQvZQg2adgCSszFKOk1uUTW9wOL/ID3tPlV3CvjaAoBT6W3Fs8uvscl/6uBq3WCGoaesgNaipVY%2b9TYhwNMkOEy%2bc7OrvkE7fHTJQkQFS6fAnF//W3KP98XzREWG9wZnpGPp68TeGzaIjQg7KUDncA4wA%2bx5mf9xoiioBKd08PLNQB7AZjjgBsWgOMXWq86u7An9muQhW3Y9EfRWTCKdGgna6zmOrooFGiQtYZ3sktflpe/5whwgQIsv5aQk9D5O5MfhrmIxGoOejxcInMnLBHqsti%2bnMgtC4jgKeAgCFqLKG5xVqiwzpRk6zK6%2b/ub%2bHgcF9GAvv%2bqlJMVUWGt3LO9h4IsYqMKMlYLQjRCNgMr2CF3u46S%2bvOlvF62onZaBYr/jz2yL1xWwmyqtwiNiPLWJ4pYTu2ir3kBg6YH0RtjwDRubz%2be4ZIWchR7OLYHmh9OQxOl4Qiw/NfK1HiglJAzSIKleVxNoLMEuNqUY762MUV2Q64nBS7U4hcoc6xDQi4UkhG%2bTvm2fO5z2%2bbtzzfxQZQjMBxAh8rNmAQeh0FS2QDDCYPUiyQygyRLIuk7mPBHkQ2UEY8TfOfHiye2BFWSCZzSPccIk1bPheLb0uLJ8gGsC1Ilj/0Apz6YobIC90UegIb8Btb4FY34YHKTW7QKCRJ7pj3XkAJhqo8wVZyVSP0FktkCFlDROT1mSHy9e9RWCoj7Evg9t/YoX4%2bjVyBvMCg4gZfNDUpUloDaugpDqhpt%2bBptwFD9MAajRpvKFK8%2btJG9/aRFwjAStPANOZBp47%2bVisFQ1/%2bO6xp2pBce4skRZnh7BIszml09OvR2NolHqCweiRiq1nyALnlPVGZ/4ggMScd8KTfISywnsAKTMOj0HYN4QWFw1xI8ULvl3zghzjgffE0D13%2bfrhUjjFD5E0nst/8ERma17lSAdFgEg%2b/GMNwJ72xfIqCHCUYqvp8cYMU/T3r1lEcQiOAokO%2b3jugxdM3w1Cp%2bmAa9cEdLMDuDGLEHcPU6CSOv/0rLBnUCBcI5NB0nE2vYJw6yeoMwWCbEumd7AJ5hHkaGfTg2TI9fGHnY4rMe4YIuzwVzXlNaEOaBD6cE6R2kR3Cra/CEGEFCV7z57yfIMGlZVGNm2c1ObIJjASZM8xfg2d%2bQIHsA1t2Hv7nSJDV40RNbpjQ4LAUYfF5RoUWM6FGHU0Hiw/%2b7ClChVOEi2cIlQA3IT8PuTtPfBc%2bco9TiT3MkBHne0KFM/jTh3JtippsE7sEmnYwm1yo6ghVqsZo/r8aCRPmT8NMN1150IEbjVr0unI0KsLCDlFigQ%2brxtgNnp4ciYYIh8NcPL2dz4mExsK9O1h8Un8ur1%2bmTmBDKQQJQo08avjBlVhgRAzjkI7gMVl%2b9gxVo6ilzrCRF3CQmwtnNhBOLsI9W8KUw4fDe59jdcyK7AYQmJ1HZp46gAzcNEV7YRoNJdYQXDnB3OqJKEiVaKpkFo%2bRIG%2bxvn6hXoBjftYQ4eJpE/Xa3bqnuPbDM4LGIdQ2qyUx%2bgsNkQpDhAkSZrNF0t0H5AH4Ayv8uU3WEFnu6jj/ykwwGCawpDBEqjiAUV8VB/A5zgvoh4fPO4C9A6NM7gCR0vLGYLA6obK4YHrTBfzDn%2bBw%2bDXcSfJO5mnMrR0SClRUJH1kcJcoFC1vnlB7K21x6/RDRcn1C2nxavqb3d0gBzyE%2bvSRjUqeYLlSKbJ6zhRRKkZWZW2QWSGSDCV3uEVve5MrxwJ%2bbFN4zASqra1NvD3exdHhnniMqu%2b3VlxeVUSt%2btb5%2bOI5M4W6tvEQklwImTsQ3dBsnkbV2Djy4TmEaNRmcopmaKqiHVpt6eo5avxvoxc1RS9CYUU/pCiskKEwF1MuCH3ujfADy4qOSLVVyNK8MDI/V1SYIZz5YR0RFlHv7UaOWSLkwnLFAl0jA6oPw%2b1LIZtNyxyvBjwX5fR4W40DqnC4X0MeQ9MPp96FDf7ucISxwCKWCaNEOucwN7Ygn9zJEJJdmCb/Hl6S67xdDi5IWw0vY22Wv1i/jBX6d6VYRU5v/cLS2OU7DXg64ED/9BrM5L97nTP4qcOKG486pF6A1aaYKCmdQa3HU5ZocI6MWvurytIYf2XG45ZAaP6zf1AYIuQG/dNJ/PVXDjR0BFHMKx3Alv/58%2bfKQ9I%2bG72WlpcSEDEm0JIb7CI3%2bHWzHT39KkzbfAiOTMLUo0Hc48cmGeKRv7Si0BbDTChJUyOAuUAc2lfdsKuHERn3wqUnuN2txroUT6/%2bUlCxWjf4xpUXkuR3G/V6AAAEmUlEQVSbiQx6yLprHBGoxuN4RR3D2WJeGOUOkIwwj5aKhoirUjw9EwxKkMNVY1my%2brkRMzJcM8jkSTKKMcLrd577MTQSo9GQFDFVftsMfathrxL98TKYupITHICKwuzXfUPkDlXwGCalLJ6ZHxtk5NYIrfq%2bm0FZR6H2RBRZQoOb0QVkXbFzhsg8y/F7EvIJru34kmSHZfks9pGGyAAZQSO5EM4HckJEG95EOxlADoR4XUCwP%2buHEFTWVJrKt3jOENnd3VMqRxdoyC2vYIkeeoE6ZrnyhRlOlmzNZ7G5uojSfJnmtPlcVJW3bPiGDUaMkMszm4yVY8L8tD9qMdC%2bHlaLH4XkSSXhcYw51g0PLSBNdqqQIoQY20OCXPd87lSuyz0Zbid0/VCSJryNByva4uc5wdyC%2bH9hiNgisOZOcP/hC/z1f/41nvWPocUQEB0RNn6GyKa4QN4OMkNzXnGDbrcS63NOcCudQunSlyjT8C9/fwt7vDS2UMS77/87Tg3t2Dw4kpwgG7t%2bevMSF5ChY/LkC60TvUYHxsdsIstjso3hkXpSBBWd/gSmaO66Q2nYAimMaHU4u/ZrqR2OEdKzWseQLO/A5gljYjqBMV9U9h2BhEjr22nfNZNEmuX18xeKpxkHcHqLWSBthAQNmbdo/LkRP9U%2bRtdkEfW9Y6jrskiKnB%2ba3R/HDf0za4gSDmAlKSfBX8YBQo9nhkj7S5T%2b8Hus2a3YfnuGvbks3t34S7wdahZdYXsl0uOhz5beaDLTOQseq0bRpaMwmKYQf7lmyGTFffr/DUYDJsgFOv0Z2CYCMLlmYe3XAF/8KfYtGgyzxJ7OjNzSAUYc07C7QjCP%2bcg1OqEjl2m0T8nxhDeKdPngvRtcW12h3piHM7UBb3EfboqXJ5KrcGe2qG3CndvBVH6Xzm/DlV6ntnHeHOR7swsUZe2TeyNff8iRH0eD5AZ3aDpsUlAktQO0z6vHu/kk9taWsUHHDJt9ZGi56py3XgqleRua9lHYrBxz4zqk2aCfQm0vvME0YflTzK%2b/I0Dzjnz%2bGXIRgt3FTUSz68gvv6Xfc0jAh3z9ylsU6Di/fIL80rFsi6sMit4iUWI3uViR1FxZEXh6sM8fRt2VxAXvy/H5uV3ZP/hE4/NMj5Vs8J6yzwKqoi3GwioXzx%2bdYI8XT4VPfCALqcwu5a00/jfceSzASvss0X14eETHe%2bf3sq1hXKHcc0Dh9gl1KKtZHwpNhz/ru7PDX73idQpFznNzc0vOrYvy9a78japdOu%2bA8x/5f7NdfPhPHX%2bi8UPySlKQvAojSxZp5EQL02/4RzO7xOv1yid9%2bDqn4HhZnhlqXLnK51MUnAUCARF55Xukqp3u408BKbzlfXnm8w7gPB33HA/h87fxb9gYKnPShH8g/z7ecpOSHLrG4o18neU65ONN9Jb5Ps45cEBWZaTzvtQzU1PQqELa5r/Dz8x/41drla/DM7eH/wiTHP%2bt28WHrnYEt%2bq16nW%2bdvGYH7h676da9V5Zp6Bn5vt/Vf0PuANED5Sprv%2bPNuEn/R/u4WfkZ6124K%2bqO/%2b/tepz/yvAdPTPjFDktwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1442\" alt=\"角色天赋查询\" data-srcset=\"/assets/static/nonebot-talent.82a2fbd.9dd2e781868d79fc38684e00d792b01e.jpg 480w, /assets/static/nonebot-talent.cbab2cf.9dd2e781868d79fc38684e00d792b01e.jpg 1024w, /assets/static/nonebot-talent.d3a0f69.9dd2e781868d79fc38684e00d792b01e.jpg 1442w\" data-sizes=\"(max-width: 1442px) 100vw, 1442px\" data-src=\"/assets/static/nonebot-talent.d3a0f69.9dd2e781868d79fc38684e00d792b01e.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nonebot-talent.d3a0f69.9dd2e781868d79fc38684e00d792b01e.jpg\" width=\"1442\" alt=\"角色天赋查询\"></noscript><figcaption>角色天赋查询</figcaption></figure></p>\n</details><br />\n","cover_image":null},"previous":null,"next":{"title":"年度 · 2021","path":"/life/2021-annual-summary/"},"metadata":{"siteUrl":"https://blog.monsterx.cn"}},"context":{"previousElement":"##empty##","nextElement":"80fd281d175f651781df97b10a658c15","id":"622f2eaa9538047fd6f2cbe70c328070"}}