{"hash":"d0e0c1619d7b3fc0d158e77d415b3bdca67f15f9","data":{"tag":{"title":"cron","belongsTo":{"edges":[{"node":{"title":"照葫芦画瓢 · 编写 Actions 打卡工作流","path":"/tech/modified-github-actions-4-heu-checkin/","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/github-actions-checkin.a209973.5d7dca422dbc10301e4b28618b71683f.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/github-actions-checkin.a67b0b2.5d7dca422dbc10301e4b28618b71683f.png 480w","/assets/static/github-actions-checkin.a209973.5d7dca422dbc10301e4b28618b71683f.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-812d81964b261e06f6e45adb1ade60dc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-812d81964b261e06f6e45adb1ade60dc)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAYAAAA9djs/AAAACXBIWXMAAAsSAAALEgHS3X78AAAJ7UlEQVRYw41YaXfURhbl984vmDOT%2bTzzARhySEIWYoIhsYHBbLHBSwwdjGMMXrBjY2MWY2y3e5Nae2mpunOrqtUtEyDp0/eUuiS16r37lls6oZSSAJT%2b6LGKcs5%2bpJJSqkIqAnYslMqJjEhzIlNKaKRSCVEYJEkVuRJxqkSSqjQRKosTlWsksUGRRKoQkZJpxD8jslghT/iQWGUiJGKVCl6f52YtXF1/rWauyFW52mM2vWdb5bw80Zv85EdfzwcSCjTeIC80FNIcEHxunBGpQiSIRCJOCsRxjjjKEUUZolAjNYjDBCKMkWoEEbIgRB4FKGIi8lGIGLLIIDMBOsGAF/B3iCIlMt6TaiTIs9RAFoILLWD4NJyW1lp8zLQTPW/0HIe%2bVwe/S/YHzJesixwqIeNRqlQopAqEUkEslR8VyguJIDfw/VT5XqKCHiIvUnE3VEk3UGnXV5nnqdzrGhRxZNjN%2bJCMrBYMsyLPVJEJghFRaERmZMiQdUaIpNcVFyG5GMVQVEUlotUHI7q0uRoBqvTUIGL0R5Jx2WNeGdZpPBIyr1mn8Qg04xngc21eJNENC3S8DI5fwOHouim6boyuE8FzQgROgLDjI%2b50ITouRwdpp408DNFngWBYm8jTy9HRZ8cCRU7Gc0FEJDvhZMox5ZIZBTLjdYVZt16nz6mjQPWNs/89sLnvgHKy5xtjbDsE/8SUCBPyJMM4oAx5bXworDP2Gx46AQ2n0W2vACMdzU6CRjtBsxWh3QrhEG7Lh9vsImh1EbUcdI/acOiMIIh74frHeE3TtH%2bsyTC05Alt9fVZGi8slLCOQI5GIPG6o1DnJbsOSRJ/4oBqBHQThYktYPalQu2VghMpc5XJec0%2b2S6Z5xdTs3P4dugSRv93G4srW5h9%2bBSPl57j%2bs172DvwsL7xGncnZuF2BLxWgNpMDXMzD%2bDTeLftcbnA6NVrqNVq5vm%2bzzpQFNjc2MD29jZ2dnb68/rjOQ3WkAaPYvjukYkESNGPApFlWDuU8PT6SNSLlnWCcVzJ8IciQPamF/cUJl8AMzsKj94ozO/aE6z0ZB9kV3tUItLM06CvvvkeB%2b2IjpjHjTvT%2bOLcEE7%2b90t8%2b/2PuHDxCr47fxmnT32BBzz/dGEFZ06ewVdnzuLSd0Nwmi24XQ9nz57F9evX0Wq1cGl4GDPT0zh18iSuj41hZmYGExPjuHJlFNOTE/hh6Gtcu3oJU3dvYej819jb1Q4qWAgT44AjP8c7t6AdEs8bCi/bwE77L6RA6YCFtwoPXgF3NhUe0gGP92xN0A7Q7OvcYrtDQIcfdiKcPXceGzsHNPx7nP78HIaGr2Ls9jTOXxjF5NQsxscn8e//nMLVkTH8fHMCn/39n5ibfoAfvjmP50tL%2bJXGfn7qJL459yWGabyOBN8PMDIygkeP5nH69Gncun0b62tr%2bOyzf2Bt%2bSl%2bGZ/A6OgwLv5wHo/m7tv0yONeBKR40SzIvDRRu7gH3Nu2tassfp9MAV00xtaBR7uW/ZUD4E3H/oEuCdqrOy1lQ4y/F5%2buYujCZbI/hdpvzzB5fxGj18bJ2jSEEKjX65ifn8fNmzcx8tMoJn4ex6ULFzF68RL8dweYGruBg811rP/2ELMTdzA2chlT43fw4P4sDf8Zcw8f4h7nr1wZwdLCEyxuPcXfpv%2bFM3fP4cbIKJaX5o0Zkg6wNUCgFeSGyFdtS6Y%2blgNZ8PEiKHsp0giAL%2bYt%2b7/s2GiYM9EAjD9XuPJMYVOnIXuuviWOU6RaCzBCXBYgtn2URVX2CtfxVkPGshyCTCedDsThPrLGHmTrHdLGW%2bTtPSjvkOc4361z3IXf2kUROmh091FrL6Dj7vP%2bhi2ERdwrhLYOSHaDUFCLZLoboGr8x2vAQDTY9jGxpTD1QuGnFeDX1wrX1hSGl8DoULi7DdReUNREMbyAYZcWZDs30JGSs7WJR4vsUGxZ/dxTfVFVCg59LmwcIT46QB5T3PgucrdBB9BwOkG6dESXY3gIFdV5ntcFNNp3qI1Y3aRPGUi22A61A6gHemNmWmbF1mqH%2bXgKlA5gxzLFUC%2bxxhC6taGdYluejgbtmBZbXsMVOGCbO2gGOGoHzN0Iia7Yt%2b7BPfU1vK5P52R9402o9nq6rvTe4RFCpggVj2m5gv2WIojhnFEFa4XYpeFNMl%2bHjI6ovDq00aEidNiWuoRv2S%2bSXju0KeBShb7rSjSZzk5sO1iFhA87oKoDSCqmaWSXSV4j%2b5Pbtg5QyGGtrrBOsP6ZQkh9Y5whBL1PgULNjigIaIxmIz/W04uy0rJqB40WMscxv3KJY6o8Sgdpk5gYZk7pKp%2b7HHmP7HKKLTQbsF9CR0GTmuR1R5q0XdoH3rpWw3yyCKKvnS1Tu3zO8JLC8r52BFOCuf/knXWO9qx2gu4MXmyjYeGlj42DCE9e%2b5j83cXKro%2bteoK1/dgUpYD7gyMvxx71wOpWA7XVIzx7F2PPSbGyF2GNx6scn9dj3N/y8eRNiKfEL5se5l%2bFWH/rYvnlETb2mlh%2b08L2QQdvKao047KiA4oiN8bXfWmiWBftuq/6zv%2bkA8rDnmAwjE%2byhUw8B7aaVhStHio8O7RO0EJDt8ZD9t3LCw5GH3dwc9nF5JpDdDC60ML07w7eUhG%2baQl06b3VF21MLLVwY8VFbdvH7VWXjoiM0ZMbHqaIuZ3AjBrTdMDymw5%2b3TzAvWd1zG018eRVm2MLu02rBmWF/YwO2GxYJfiqA2O8Fne2DvylCCidYMeElbTTU4P6Xi1/tbQ0xY55q3M5Zsg2ye6Bk1EOZzQ0R5eCpM19gMfw8b2Y0phSuMPUoOzV95X7CoeKSvAZsiKDC2kZi%2bhghxU5DHS%2bBwYqZ4Fi3gsRsfNUCp%2b0Kaf3Arr660KuSdM1qxRC8lNSuNqqBltp9Gq17G%2bDdVfThcyChnBSO8Fcx7ZY8HfKBSRsQwn7ot0O662wsPBjJH6INKYjUs1c8YE9ANOLbTLg1tl1XdaVwGyJDUzOW9U3qPoD4%2b122P5fQNWqa9h%2bt6oEKxFQ3Roef2lQ3T5qlWhfiDDcFdNCJbl674WJ3jQrs20ut6H6enMP8ySOc4MkFkoQacQxjAxi3%2bcYqjRJVJam9sULd15JxO1y5NEuhp9MzPbXQlhIDVpY2QbDrEJV1q%2bO2XEsxt/bDv/pR4etDn29F4iT1GxX3yOtX0RLZGQxYe9MqRM0MuqEVGQEc5XIqRRlyp2dSMyLkIJhnSeE0L2LzBYsbLntLqpILUyoZ6bX0/AB6xXmB9H86Xc9J/7slVg1EjQzbHVkMlHcov4hAo7frxSNVxRIKs8lUVhkPOZ8RtmoIXnMCbLM/yuY8Bq5hSrBOfOyQ48Fr5flS4/CxJ3Zxai%2bjOkfV5Z2LAqqr8T%2bD9cnHEPe4u/6AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"date":"June 30. 2020","timeToRead":4,"cjkWordCount":2702,"cjkReadTime":9,"description":"赶在上半年的最后半小时发布了 6 月唯一一篇更新：利用 GitHub Actions 定时执行 Python / Ruby 打卡代码。","content":"<p>昨天逛博客看到了使用 GitHub Actions 定时调用 Microsoft 365 E5 API 以帮助续订的文章，我转念一想这是不是也可以用来跑定时任务打卡呢？说干就干我开了一个小的坑：用 GitHub Actions 跑之前写的 Python 打卡脚本。无意薅羊毛，只是希望通过一点学习将自己的想法实现。</p>\n<h2 id=\"照葫芦环节\"><a href=\"#%E7%85%A7%E8%91%AB%E8%8A%A6%E7%8E%AF%E8%8A%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>照葫芦环节</h2>\n<p>参考项目 <a href=\"https://github.com/wangziyingwen/AutoApiSecret\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@wangziyingwen/AutoApiSecret</a> 的 <a href=\"https://github.com/wangziyingwen/AutoApiSecret/blob/master/.github/workflows/autoapi.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">autoapi.yml</a>，搞懂了这一流程：</p>\n<ol>\n<li>将私密信息存于仓库 Secrets，以 <code>name=value</code> 的赋值语句格式定义</li>\n<li>将 Secrets 内容写入脚本复制来的临时文件</li>\n<li>执行填入了 Serects 的临时文件</li>\n<li>删除所有临时文件并提交历史记录</li>\n</ol>\n<p>「定时」这一特性是 GitHub Actions 提供的，在触发条件中定义 <code>on.schedule.cron</code> 即可！呐噜吼多！将 Secrets 写入文件是通过 Linux 命令 <code>sed</code> 实现的，比如使用 <code>sed -i '10 r tmp.txt' tmp.py</code> 可以将 <code>tmp.txt</code> 的内容写入了 <code>tmp.py</code> 的指定行 <code>10</code> 的下一行。对 Linux 命令的认知水平停留在 <code>rm -rf</code> 的我大吃一惊，呀，又学到了新知识！</p>\n<h2 id=\"画瓢环节\"><a href=\"#%E7%94%BB%E7%93%A2%E7%8E%AF%E8%8A%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>画瓢环节</h2>\n<p>此刻，白嫖是第一生产力。了解了这样的流程部署自己的自动打卡（让 GitHub 定时执行 <code>python checkin.py</code>）就不是什么难事了。</p>\n<details><summary><strong>照葫芦画瓢 python.yml 第一版</strong></summary><br />\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Auto Checkin\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">release</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>published<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># Coordinated Universal Time (UTC)</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0 0 * * *'</span>           <span class=\"token comment\"># 定时任务实现方式</span>\n  <span class=\"token key atrule\">watch</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>started<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.repository.owner.id == github.event.sender.id  <span class=\"token comment\"># 仅自己点的 star 触发</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Python Setup\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.8</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Pip Cache             <span class=\"token comment\"># 按照官方仓库 @actions/cache 添加</span>\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ~/.cache/pip        <span class=\"token comment\"># Ubuntu 的缓存位置，不同系统不同位置需要修改</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>pip<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/requirements.txt')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>pip<span class=\"token punctuation\">-</span>\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Addons Install        <span class=\"token comment\"># 安装脚本必须组件 lxml requests</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pip install lxml requests\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Secrets Get           <span class=\"token comment\"># 获取 Secrets</span>\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span> \n          <span class=\"token key atrule\">SECRET_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_PASS</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_PASS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_BOUND</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_BOUND <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_DATA</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_DATA <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># 先复制一个临时文件，然后写入 Secrets 到文本，再将其写入临时脚本文件指定行</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"> \n          cp checkin.py action.py\n          echo $SECRET_ID > action-id.txt\n          echo $SECRET_PASS > action-pass.txt\n          echo $SECRET_BOUND > action-bound.txt\n          echo $SECRET_DATA > action-data.txt\n          sed -i '19 r action-id.txt' action.py\n          sed -i '20 r action-pass.txt' action.py\n          sed -i '21 r action-bound.txt' action.py\n          sed -i '22 r action-data.txt' action.py</span>\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkin Action\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai         <span class=\"token comment\"># 设定时区为北京时间</span>\n        <span class=\"token comment\"># 工作流过程中新建 log 文件夹存放待会发布到另外一个分支的内容</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"> \n          mkdir log\n          echo `date +\"%Y-%m-%d %H:%M:%S %A\"` >> log/time.log\n          python action.py >> log/time.log</span>\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Secrets Delete        <span class=\"token comment\"># 删除临时文件</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> rm <span class=\"token punctuation\">-</span>f action*\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy Log            <span class=\"token comment\"># 发布 log 文件夹下的记录文件到 log 分支</span>\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">:</span>//peaceiris/gh<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">:</span>v2\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">PUBLISH_BRANCH</span><span class=\"token punctuation\">:</span> log\n          <span class=\"token key atrule\">PUBLISH_DIR</span><span class=\"token punctuation\">:</span> ./log\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">emptyCommits</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>第一版的工作流程看起来有点臃肿，不过管他呢，能用。</p>\n<h2 id=\"润色\"><a href=\"#%E6%B6%A6%E8%89%B2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>润色</h2>\n<p>写完第一份工作流文件之后，我开心地将文件提交到了 GitHub 仓库，又煞有介事地写了份文档。但是坐下来反复看自己的代码之后，我越发觉得这过于粗糙。在博客的文章收到了大佬的指导，于是我有了新的思路并开始不断地给自己的代码「润色」。</p>\n<h3 id=\"round-1\"><a href=\"#round-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Round 1</h3>\n<p>简单地实现定时任务似乎并不值得记录，于是我顺便给这个工作流引入了 pip 模块缓存、发布日志文件到分支这两个小功能，算是补上了之前折腾工作流学到的。</p>\n<ul>\n<li>\n<p><strong>pip 模块缓存</strong></p>\n<p>这是从苏卡大大《<a href=\"https://blog.skk.moe/post/deploy-blog-to-cf-workers-site\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录 - Sukka's Blog</a>》中学到的。Node.js 项目构建时需要的依赖挺多，没有缓存的话每次 GitHub Action 得跑很长分钟，于是他给出了缓存 node_modules 的办法： <code>uses: actions/cache@v2</code> ，通过检查缓存特征 Key 是否存在，比如 Node.js 就检测是否存在 <code>package-lock.json</code> 文件，进而处理缓存。</p>\n<p>GitHub Actions 使用这一特性其实很简单，只要按照 <a href=\"https://github.com/actions/cache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@actions/cache</a> 中需要缓存的类型确定好监测的特定路径和文件，编写类似上方 L26-31 的步骤在安装依赖前即可。之前尝试是能将用于构建并发布站点的 2 mins 工作流优化到 1 min 多，提升还是蛮大的。</p>\n<p>在这个项目中缓存 pip 模块需要做的就是照葫芦画瓢检查 <code>~/.cache/pip</code> 目录下 <code>requirements.txt</code> 文件。</p>\n</li>\n<li>\n<p><strong>发布 log 记录文件到分支</strong></p>\n<p>这是从 Typecho-Theme-VOID 二次开发过程中学到的。它的 Actions 将编译好的文件存放在 build 文件夹然后发布到 nightly 分支。仅需在 workflows 中给 <code>uses: docker://peaceiris/gh-pages:v2</code> 添加两个环境变量 <code>PUBLISH_BRANCH</code> 和 <code>PUBLISH_DIR</code> 即可，v3 版本这一配置从 <code>env</code> 改为了 <code>with</code> 字段，具体可以看 <a href=\"https://github.com/peaceiris/actions-gh-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@peaceiris/actions-gh-pages</a>。</p>\n</li>\n<li>\n<p><strong>邮件</strong></p>\n<p>启用 GitHub Actions 后我将 Python 中的 SMTP 配置删除了，这原本是用来在服务器部署时完成任务后发送提醒的。我想只要开启 GitHub 工作流的运行提醒就好啦，后来意识到虽然 GitHub Actions 自身有邮件提醒，但它提醒的是工作流执行状况，并不能等价于打卡脚本的执行状态。这一点还有待优化。毕竟配置起来如果像上面一样一条一条添加 Secrets 的话就太繁琐了。</p>\n</li>\n<li>\n<p><strong>微信提醒</strong></p>\n<p>由于 GitHub Actions 部署邮件提醒不方便，我找到了微信提醒的工具 Server 酱，在 Python 中使用 requests 库发送请求即可触发微信提醒，结合程序执行结果可以更加完美的推送打卡提醒；Ruby 不会写，我就直接从 Actions 执行时由命令行 <code>curl</code> 发送请求了，这些代码十分粗糙，放在了仓库 personal 分支下。</p>\n</li>\n</ul>\n<h3 id=\"round-2\"><a href=\"#round-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Round 2</h3>\n<p>也许看官早就想说了：为什么引用 Secrets 而已，又是设置环境变量、又是将环境变量 <code>echo</code> 到 <code>.txt</code> 文件、又是将 <code>.txt</code> <code>sed</code> 写入 <code>.py</code> 的，不能简单点吗？确实，在朋友 <a href=\"https://xyenon.bid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@XYenon</a> 的指导下我得知 Python 可以通过 <code>os.environ</code> 读取环境变量，所以简单的办法来了，将 Python 脚本中原来的赋值改写成下面的格式直接读环境变量</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\nmyid <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ <span class=\"token punctuation\">[</span><span class=\"token string\">'SECRET_ID'</span><span class=\"token punctuation\">]</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<p>直接读入环境变量 <code>SECRET_ID</code> 的值并赋给 <code>myid</code> 。如此一来，上面 Secrets Get、Checkin Action、Secrets Delete 三步合并为一步：</p>\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Action Execute\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n    <span class=\"token key atrule\">SECRET_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">SECRET_PASS</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_PASS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">SECRET_BOUND</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_BOUND <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">SECRET_DATA</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_DATA <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> python checkin.py <span class=\"token punctuation\">|</span> tee <span class=\"token punctuation\">-</span>a checkin<span class=\"token punctuation\">-</span>python.log<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>心情顿时舒畅了不少！</p>\n<h3 id=\"round-3\"><a href=\"#round-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Round 3</h3>\n<p>上次那篇关于调试 Python 打卡的《<a href=\"https://blog.monsterx.cn/code/heu-auto-checkin-covid19/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mark 并调试 HEU 自动打卡代码</a>》下 <a href=\"https://xyenon.bid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@XYenon</a> 给出了仅需用户名和密码的 Ruby 版本 <a href=\"https://gist.github.com/XYenon/79317d63e7f769e5bdff5b595d709b65\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@XYenon/checkin.rb</a>。</p>\n<p>代码仅 60 行，第一次看完我觉得很赞，看起来只要脚本代替人执行「确认信息 -> 提交表单」两步就完事了。现有的 Python 打卡每次都将事先定义的表单数据提交一遍，不考虑打卡系统中表单在服务器的缓存。如果表单数据在服务器上一直都有缓存，那部署这个 Ruby 版本我觉得似乎会更好，毕竟仓库里可以少写两个 Secrets。</p>\n<blockquote>\n<p>与 Python 类似，Ruby 也可以在代码中使用 <code>ENV['SECRET_ID']</code> 这样的语句直接获取环境变量。</p>\n</blockquote>\n<p>实际调试的时候，我发现这看起来简单的代码部署起来也不容易…… Ruby 使用 webdrivers 库来在终端驱动一个 headless Chrome 浏览器，然后执行动作。抛开因为不熟悉 Ruby + webdrivers 这套环境使我在 GitHub Actions 工作流写法上花的时间，这个脚本跑起来效率也比较低，Python 直白地提交表单整个工作流程需要 30 秒左右，而 Ruby 模拟 Chrome 操作花了三分钟多。是为了更快的 workflow 选择 Python 打卡呢？还是为了更快的部署选择 Ruby 打卡呢？</p>\n<p>经过多方搜索我使用了这样的 GitHub Actions 环境跑 Ruby + Watir + webdrivers 代码，不知道有没有更好的方式，贴在这里供大家参考：</p>\n<pre class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token comment\"># 运行 headless chrome 的服务</span>\n    <span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">hub</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> selenium/hub<span class=\"token punctuation\">:</span>3.141.59<span class=\"token punctuation\">-</span>gold\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">SELENIUM_HUB_HOST</span><span class=\"token punctuation\">:</span> localhost\n      <span class=\"token key atrule\">chrome</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> selenium/node<span class=\"token punctuation\">-</span>chrome<span class=\"token punctuation\">:</span>3.141.59<span class=\"token punctuation\">-</span>gold\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">HUB_HOST</span><span class=\"token punctuation\">:</span> localhost\n          <span class=\"token key atrule\">HUB_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9515</span>\n    \n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.repository.owner.id == github.event.sender.id\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Ruby Setup\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>ruby@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ruby-version</span><span class=\"token punctuation\">:</span> 2.5.x\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Addons Install\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> gem install watir webdrivers\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Action Execute\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n          <span class=\"token key atrule\">LANG</span><span class=\"token punctuation\">:</span> zh_CN.UTF<span class=\"token punctuation\">-</span><span class=\"token number\">8</span>\n          <span class=\"token key atrule\">SECRET_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SECRET_PASS</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_PASS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ruby checkin.rb <span class=\"token punctuation\">|</span> tee <span class=\"token punctuation\">-</span>a checkin<span class=\"token punctuation\">-</span>ruby.log<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>也许 Ruby 版本的打卡程序更适合写成 JavaScript 用户脚本交给浏览器插件执行。</p>\n</blockquote>\n<h2 id=\"结语\"><a href=\"#%E7%BB%93%E8%AF%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>结语</h2>\n<p>GitHub 仓库地址 <a href=\"https://github.com/monsterxcn/HEU-Checkin-COVID-19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@monsterxcn/HEU-Checkin-COVID-19</a>。如果仓库说明仍未找到你需要的部署过程，可以参考以下我的另外一篇文章《<a href=\"https://blog.monsterx.cn/code/heu-auto-checkin-covid19/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mark 并调试 HEU 自动打卡代码</a>》</p>\n<p>我原以为在 GitHub Actions 中实现定时任务要很复杂的配置，毕竟每次工作流都是相当于在一个全新的服务器上执行。现在发现原来定时任务只需要在工作流的触发事件中写入 <code>schedule</code> 即可。在查找文档时我发现这点在官方文档中有详细说明，害，都是不会看文档惹的祸。</p>\n<p>榆木脑袋的我在看到别人的代码之前总是从没想过可以这样实现。比如：将私密信息以赋值语句形式写入仓库设置，执行 GitHub Actions 时将赋值语句插进文件头部继续执行。甚是高明（虽然到后面我发现这也挺笨的）。剖析了我的不足之处，浅层来看最重要的两点估计就是：</p>\n<ul>\n<li>我对仓库 Secrets 设置的认识是死板的，我一直将其当作 GitHub Actions 执行时传递普通变量值的纽带，仅此而已</li>\n<li>不熟悉 Linux命令，虽然日常 Copy 到命令行的 Linux 命令中也有用到过 <code>sed</code>，但我并没有积极的学习</li>\n</ul>\n<p>深层次的原因嘛，大概是怠惰吧！</p>\n<p>GitHub Actions 妙用多多，之前关注过一个博客 <a href=\"https://p3terx.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@P3TERX ZONE</a> 里写了挺多关于 GitHub Actions 的文章，有时间的话要去学习学习！</p>\n"}}]}}},"context":{}}